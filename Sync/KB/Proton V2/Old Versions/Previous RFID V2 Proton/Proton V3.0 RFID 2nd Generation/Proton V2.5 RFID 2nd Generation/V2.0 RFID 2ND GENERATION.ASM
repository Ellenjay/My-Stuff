;----------------------------------------------------------
; Code Produced by the Proton+ 3.3.4.8
; Copyright Rosetta Technologies/Crownhill Associates Ltd
; Written by Les Johnson. July 2008
;----------------------------------------------------------
;
#DEFINE CONFIG_REQ 1
 LIST  P = 18F4525, F = INHX32, W = 2, X = ON, R = DEC, MM = ON, N = 0, C = 255
PORTA EQU 0X0F80
PORTB EQU 0X0F81
PORTC EQU 0X0F82
PORTD EQU 0X0F83
PORTE EQU 0X0F84
LATA EQU 0X0F89
LATB EQU 0X0F8A
LATC EQU 0X0F8B
LATD EQU 0X0F8C
LATE EQU 0X0F8D
DDRA EQU 0X0F92
TRISA EQU 0X0F92
DDRB EQU 0X0F93
TRISB EQU 0X0F93
DDRC EQU 0X0F94
TRISC EQU 0X0F94
DDRD EQU 0X0F95
TRISD EQU 0X0F95
DDRE EQU 0X0F96
TRISE EQU 0X0F96
OSCTUNE EQU 0X0F9B
PIE1 EQU 0X0F9D
PIR1 EQU 0X0F9E
IPR1 EQU 0X0F9F
PIE2 EQU 0X0FA0
PIR2 EQU 0X0FA1
IPR2 EQU 0X0FA2
EECON1 EQU 0X0FA6
EECON2 EQU 0X0FA7
EEDATL EQU 0X0FA8
EEDATA EQU 0X0FA8
EEADR EQU 0X0FA9
EEADRH EQU 0X0FAA
RCSTA EQU 0X0FAB
TXSTA EQU 0X0FAC
TXREG EQU 0X0FAD
RCREG EQU 0X0FAE
SPBRG EQU 0X0FAF
SPBRGH EQU 0X0FB0
T3CON EQU 0X0FB1
TMR3L EQU 0X0FB2
TMR3LH EQU 0X0FB3
TMR3H EQU 0X0FB3
CMCON EQU 0X0FB4
CVRCON EQU 0X0FB5
ECCP1AS EQU 0X0FB6
ECCPAS EQU 0X0FB6
PWM1CON EQU 0X0FB7
BAUDCON EQU 0X0FB8
BAUDCTL EQU 0X0FB8
CCP2CON EQU 0X0FBA
CCPR2 EQU 0X0FBB
CCPR2L EQU 0X0FBB
CCPR2LH EQU 0X0FBC
CCPR2H EQU 0X0FBC
CCP1CON EQU 0X0FBD
CCPR1 EQU 0X0FBE
CCPR1L EQU 0X0FBE
CCPR1LH EQU 0X0FBF
CCPR1H EQU 0X0FBF
ADCON2 EQU 0X0FC0
ADCON1 EQU 0X0FC1
ADCON0 EQU 0X0FC2
ADRES EQU 0X0FC3
ADRESL EQU 0X0FC3
ADRESLH EQU 0X0FC4
ADRESH EQU 0X0FC4
SSPCON2 EQU 0X0FC5
SSPCON1 EQU 0X0FC6
SSPSTAT EQU 0X0FC7
SSPADD EQU 0X0FC8
SSPBUF EQU 0X0FC9
T2CON EQU 0X0FCA
PR2 EQU 0X0FCB
TMR2 EQU 0X0FCC
T1CON EQU 0X0FCD
TMR1L EQU 0X0FCE
TMR1LH EQU 0X0FCF
TMR1H EQU 0X0FCF
RCON EQU 0X0FD0
WDTCON EQU 0X0FD1
HLVDCON EQU 0X0FD2
LVDCON EQU 0X0FD2
OSCCON EQU 0X0FD3
DEBUG EQU 0X0FD4
T0CON EQU 0X0FD5
TMR0L EQU 0X0FD6
TMR0LH EQU 0X0FD7
TMR0H EQU 0X0FD7
STATUS EQU 0X0FD8
FSR2L EQU 0X0FD9
FSR2LH EQU 0X0FDA
FSR2H EQU 0X0FDA
PLUSW2 EQU 0X0FDB
PREINC2 EQU 0X0FDC
POSTDEC2 EQU 0X0FDD
POSTINC2 EQU 0X0FDE
INDF2 EQU 0X0FDF
BSR EQU 0X0FE0
FSR1L EQU 0X0FE1
FSR1LH EQU 0X0FE2
FSR1H EQU 0X0FE2
PLUSW1 EQU 0X0FE3
PREINC1 EQU 0X0FE4
POSTDEC1 EQU 0X0FE5
POSTINC1 EQU 0X0FE6
INDF1 EQU 0X0FE7
WREG EQU 0X0FE8
FSR0L EQU 0X0FE9
FSR0LH EQU 0X0FEA
FSR0H EQU 0X0FEA
PLUSW0 EQU 0X0FEB
PREINC0 EQU 0X0FEC
POSTDEC0 EQU 0X0FED
POSTINC0 EQU 0X0FEE
INDF0 EQU 0X0FEF
INTCON3 EQU 0X0FF0
INTCON2 EQU 0X0FF1
INTCON EQU 0X0FF2
PRODL EQU 0X0FF3
PRODLH EQU 0X0FF4
PRODH EQU 0X0FF4
TABLAT EQU 0X0FF5
TBLPTRL EQU 0X0FF6
TBLPTRLH EQU 0X0FF7
TBLPTRH EQU 0X0FF7
TBLPTRU EQU 0X0FF8
TBLPTRLHH EQU 0X0FF8
PC EQU 0X0FF9
PCL EQU 0X0FF9
PCLATH EQU 0X0FFA
PCLATU EQU 0X0FFB
STKPTR EQU 0X0FFC
TOS EQU 0X0FFD
TOSL EQU 0X0FFD
TOSLH EQU 0X0FFE
TOSH EQU 0X0FFE
TOSU EQU 0X0FFF
_I2C_SCL_PORT = TRISC
_I2C_SCL_PIN = 3
_I2C_SDA_PORT = TRISC
_I2C_SDA_PIN = 4
RA0=0
RA1=1
RA2=2
RA3=3
RA4=4
RA5=5
RA6=6
RA7=7
T0CKI=4
AN4=5
SS=5
NOT_SS=5
LVDIN=5
HLVDIN=5
RB0=0
RB1=1
RB2=2
RB3=3
RB4=4
RB5=5
RB6=6
RB7=7
INT0=0
INT1=1
INT2=2
CCP2_PORTB=3
KBI0=4
KBI1=5
KBI2=6
KBI3=7
AN12=0
AN10=1
AN8=2
AN9=3
AN11=4
PGM=5
PGC=6
PGD=7
RC0=0
RC1=1
RC2=2
RC3=3
RC4=4
RC5=5
RC6=6
RC7=7
T1OSO=0
T1OSI=1
CCP1=2
SCK=3
SDI=4
SDO=5
TX=6
RX=7
T13CKI=0
CCP2_PORTC=1
SCL=3
SDA=4
CK=6
T1CKI=0
RD0=0
RD1=1
RD2=2
RD3=3
RD4=4
RD5=5
RD6=6
RD7=7
PSP0=0
PSP1=1
PSP2=2
PSP3=3
PSP4=4
PSP5=5
PSP6=6
PSP7=7
P1B=5
P1C=6
P1D=7
RE0=0
RE1=1
RE2=2
RE3=3
RD=0
PP_RD=0
WR=1
PP_WR=1
CS=2
MCLR=3
NOT_RD=0
NOT_WR=1
NOT_CS=2
NOT_MCLR=3
AN5=0
AN6=1
AN7=2
VPP=3
LATA0=0
LATA1=1
LATA2=2
LATA3=3
LATA4=4
LATA5=5
LATA6=6
LATA7=7
LATB0=0
LATB1=1
LATB2=2
LATB3=3
LATB4=4
LATB5=5
LATB6=6
LATB7=7
LATC0=0
LATC1=1
LATC2=2
LATC3=3
LATC4=4
LATC5=5
LATC6=6
LATC7=7
LATD0=0
LATD1=1
LATD2=2
LATD3=3
LATD4=4
LATD5=5
LATD6=6
LATD7=7
LATE0=0
LATE1=1
LATE2=2
RA0=0
RA1=1
RA2=2
RA3=3
RA4=4
RA5=5
RA6=6
RA7=7
TRISA0=0
TRISA1=1
TRISA2=2
TRISA3=3
TRISA4=4
TRISA5=5
TRISA6=6
TRISA7=7
RB0=0
RB1=1
RB2=2
RB3=3
RB4=4
RB5=5
RB6=6
RB7=7
TRISB0=0
TRISB1=1
TRISB2=2
TRISB3=3
TRISB4=4
TRISB5=5
TRISB6=6
TRISB7=7
RC0=0
RC1=1
RC2=2
RC3=3
RC4=4
RC5=5
RC6=6
RC7=7
TRISC0=0
TRISC1=1
TRISC2=2
TRISC3=3
TRISC4=4
TRISC5=5
TRISC6=6
TRISC7=7
RD0=0
RD1=1
RD2=2
RD3=3
RD4=4
RD5=5
RD6=6
RD7=7
TRISD0=0
TRISD1=1
TRISD2=2
TRISD3=3
TRISD4=4
TRISD5=5
TRISD6=6
TRISD7=7
RE0=0
RE1=1
RE2=2
RE3=3
TRISE0=0
TRISE1=1
TRISE2=2
TRISE4=4
TRISE5=5
TRISE6=6
TRISE7=7
PSPMODE=4
IBOV=5
OBF=6
IBF=7
TUN0=0
TUN1=1
TUN2=2
TUN3=3
TUN4=4
PLLEN=6
INTSRC=7
TMR1IE=0
TMR2IE=1
CCP1IE=2
SSPIE=3
TXIE=4
RCIE=5
ADIE=6
PSPIE=7
TMR1IF=0
TMR2IF=1
CCP1IF=2
SSPIF=3
TXIF=4
PP_TXIF=4
RCIF=5
PP_RCIF=5
ADIF=6
PSPIF=7
TMR1IP=0
TMR2IP=1
CCP1IP=2
SSPIP=3
TXIP=4
RCIP=5
ADIP=6
PSPIP=7
CCP2IE=0
TMR3IE=1
LVDIE=2
BCLIE=3
EEIE=4
CMIE=6
OSCFIE=7
HLVDIE=2
CCP2IF=0
TMR3IF=1
LVDIF=2
BCLIF=3
EEIF=4
CMIF=6
OSCFIF=7
HLVDIF=2
CCP2IP=0
TMR3IP=1
LVDIP=2
BCLIP=3
EEIP=4
CMIP=6
OSCFIP=7
HLVDIP=2
RD=0
PP_RD=0
WR=1
PP_WR=1
WREN=2
PP_WREN=2
WRERR=3
FREE=4
CFGS=6
EEPGD=7
PP_EEPGD=7
RX9D=0
OERR=1
PP_OERR=1
FERR=2
ADEN=3
CREN=4
PP_CREN=4
SREN=5
RX9=6
SPEN=7
ADDEN=3
TX9D=0
TRMT=1
BRGH=2
SENDB=3
SYNC=4
TXEN=5
TX9=6
CSRC=7
TMR3ON=0
TMR3CS=1
T3SYNC=2
T3CCP1=3
T3CKPS0=4
T3CKPS1=5
T3CCP2=6
RD16=7
NOT_T3SYNC=2
CM0=0
CM1=1
CM2=2
CIS=3
C1INV=4
C2INV=5
C1OUT=6
C2OUT=7
CVR0=0
CVR1=1
CVR2=2
CVR3=3
CVRSS=4
CVRR=5
CVROE=6
CVREN=7
PSSBD0=0
PSSBD1=1
PSSAC0=2
PSSAC1=3
ECCPAS0=4
ECCPAS1=5
ECCPAS2=6
ECCPASE=7
PSSBD0=0
PSSBD1=1
PSSAC0=2
PSSAC1=3
ECCPAS0=4
ECCPAS1=5
ECCPAS2=6
ECCPASE=7
PDC0=0
PDC1=1
PDC2=2
PDC3=3
PDC4=4
PDC5=5
PDC6=6
PRSEN=7
ABDEN=0
WUE=1
BRG16=3
SCKP=4
RCIDL=6
ABDOVF=7
RCMT=6
ABDEN=0
WUE=1
BRG16=3
SCKP=4
RCIDL=6
ABDOVF=7
RCMT=6
CCP2M0=0
CCP2M1=1
CCP2M2=2
CCP2M3=3
CCP2Y=4
CCP2X=5
DC2B0=4
DC2B1=5
CCP1M0=0
CCP1M1=1
CCP1M2=2
CCP1M3=3
CCP1Y=4
CCP1X=5
DC1B0=4
DC1B1=5
P1M0=6
P1M1=7
ADCS0=0
ADCS1=1
ADCS2=2
ACQT0=3
ACQT1=4
ACQT2=5
ADFM=7
PCFG0=0
PCFG1=1
PCFG2=2
PCFG3=3
VCFG0=4
VCFG1=5
ADON=0
PP_ADON=0
GO=1
CHS0=2
CHS1=3
CHS2=4
CHS3=5
DONE=1
NOT_DONE=1
GO_DONE=1
PP_GO_DONE=1
SEN=0
PP_SEN=0
RSEN=1
PP_RSEN=1
PEN=2
PP_PEN=2
RCEN=3
PP_RCEN=3
ACKEN=4
PP_ACKEN=4
ACKDT=5
ACKSTAT=6
GCEN=7
SSPM0=0
SSPM1=1
SSPM2=2
SSPM3=3
CKP=4
SSPEN=5
SSPOV=6
WCOL=7
BF=0
UA=1
R=2
S=3
P=4
D=5
CKE=6
SMP=7
NOT_W=2
NOT_A=5
R_W=2
PP_R_W=2
D_A=5
NOT_WRITE=2
NOT_ADDRESS=5
T2CKPS0=0
PP_T2CKPS0=0
T2CKPS1=1
PP_T2CKPS1=1
TMR2ON=2
PP_TMR2ON=2
T2OUTPS0=3
T2OUTPS1=4
T2OUTPS2=5
T2OUTPS3=6
TOUTPS0=3
TOUTPS1=4
TOUTPS2=5
TOUTPS3=6
TMR1ON=0
TMR1CS=1
T1SYNC=2
T1OSCEN=3
T1CKPS0=4
T1CKPS1=5
T1RUN=6
RD16=7
NOT_T1SYNC=2
BOR=0
POR=1
PD=2
TO=3
RI=4
SBOREN=6
IPEN=7
NOT_BOR=0
NOT_POR=1
NOT_PD=2
NOT_TO=3
NOT_RI=4
SWDTEN=0
SWDTE=0
LVDL0=0
LVDL1=1
LVDL2=2
LVDL3=3
LVDEN=4
IRVST=5
LVV0=0
LVV1=1
LVV2=2
LVV3=3
BGST=5
HLVDL0=0
HLVDL1=1
HLVDL2=2
HLVDL3=3
HLVDEN=4
VDIRMAG=7
IVRST=5
SCS0=0
SCS1=1
IOFS=2
OSTS=3
IRCF0=4
IRCF1=5
IRCF2=6
IDLEN=7
FLTS=2
T0PS0=0
T0PS1=1
T0PS2=2
PSA=3
T0SE=4
T0CS=5
T016BIT=6
TMR0ON=7
T08BIT=6
C=0
DC=1
Z=2
OV=3
N=4
INT1F=0
INT2F=1
INT1E=3
INT2E=4
INT1P=6
INT2P=7
INT1IF=0
INT2IF=1
INT1IE=3
INT2IE=4
INT1IP=6
INT2IP=7
RBIP=0
TMR0IP=2
INTEDG2=4
INTEDG1=5
INTEDG0=6
RBPU=7
NOT_RBPU=7
RBIF=0
INT0F=1
TMR0IF=2
RBIE=3
INT0E=4
TMR0IE=5
PEIE=6
GIE=7
INT0IF=1
T0IF=2
INT0IE=4
T0IE=5
GIEL=6
GIEH=7
STKPTR0=0
STKPTR1=1
STKPTR2=2
STKPTR3=3
STKPTR4=4
STKUNF=6
STKOVF=7
SP0=0
SP1=1
SP2=2
SP3=3
SP4=4
STKFUL=7
  __MAXRAM  0X0FFF
  __BADRAM  0X0F85-0X0F88
  __BADRAM  0X0F8E-0X0F91
  __BADRAM  0X0F97-0X0F9A
  __BADRAM  0X0F9C
  __BADRAM  0X0FA3-0X0FA5
  __BADRAM  0X0FB9
CONFIG1H EQU 0X300001
CONFIG2L EQU 0X300002
CONFIG2H EQU 0X300003
CONFIG3H EQU 0X300005
CONFIG4L EQU 0X300006
CONFIG5L EQU 0X300008
CONFIG5H EQU 0X300009
CONFIG6L EQU 0X30000A
CONFIG6H EQU 0X30000B
CONFIG7L EQU 0X30000C
CONFIG7H EQU 0X30000D
OSC_LP_1 EQU 0XF0
OSC_XT_1 EQU 0XF1
OSC_HS_1 EQU 0XF2
OSC_RC_1 EQU 0XF3
OSC_EC_1 EQU 0XF4
OSC_ECIO6_1 EQU 0XF5
OSC_HSPLL_1 EQU 0XF6
OSC_RCIO6_1 EQU 0XF7
OSC_INTIO67_1 EQU 0XF8
OSC_INTIO7_1 EQU 0XF9
FCMEN_OFF_1 EQU 0XBF
FCMEN_ON_1 EQU 0XFF
IESO_OFF_1 EQU 0X7F
IESO_ON_1 EQU 0XFF
PWRT_ON_2 EQU 0XFE
PWRT_OFF_2 EQU 0XFF
BOREN_OFF_2 EQU 0XF9
BOREN_ON_2 EQU 0XFB
BOREN_NOSLP_2 EQU 0XFD
BOREN_SBORDIS_2 EQU 0XFF
BORV_0_2 EQU 0XE7
BORV_1_2 EQU 0XEF
BORV_2_2 EQU 0XF7
BORV_3_2 EQU 0XFF
WDT_OFF_2 EQU 0XFE
WDT_ON_2 EQU 0XFF
WDTPS_1_2 EQU 0XE1
WDTPS_2_2 EQU 0XE3
WDTPS_4_2 EQU 0XE5
WDTPS_8_2 EQU 0XE7
WDTPS_16_2 EQU 0XE9
WDTPS_32_2 EQU 0XEB
WDTPS_64_2 EQU 0XED
WDTPS_128_2 EQU 0XEF
WDTPS_256_2 EQU 0XF1
WDTPS_512_2 EQU 0XF3
WDTPS_1024_2 EQU 0XF5
WDTPS_2048_2 EQU 0XF7
WDTPS_4096_2 EQU 0XF9
WDTPS_8192_2 EQU 0XFB
WDTPS_16384_2 EQU 0XFD
WDTPS_32768_2 EQU 0XFF
MCLRE_OFF_3 EQU 0X7F
MCLRE_ON_3 EQU 0XFF
LPT1OSC_OFF_3 EQU 0XFB
LPT1OSC_ON_3 EQU 0XFF
PBADEN_OFF_3 EQU 0XFD
PBADEN_ON_3 EQU 0XFF
CCP2MX_PORTBE_3 EQU 0XFE
CCP2MX_PORTC_3 EQU 0XFF
STVREN_OFF_4 EQU 0XFE
STVREN_ON_4 EQU 0XFF
LVP_OFF_4 EQU 0XFB
LVP_ON_4 EQU 0XFF
XINST_OFF_4 EQU 0XBF
XINST_ON_4 EQU 0XFF
DEBUG_ON_4 EQU 0X7F
DEBUG_OFF_4 EQU 0XFF
CP0_ON_5 EQU 0XFE
CP0_OFF_5 EQU 0XFF
CP1_ON_5 EQU 0XFD
CP1_OFF_5 EQU 0XFF
CP2_ON_5 EQU 0XFB
CP2_OFF_5 EQU 0XFF
CPB_ON_5 EQU 0XBF
CPB_OFF_5 EQU 0XFF
CPD_ON_5 EQU 0X7F
CPD_OFF_5 EQU 0XFF
WRT0_ON_6 EQU 0XFE
WRT0_OFF_6 EQU 0XFF
WRT1_ON_6 EQU 0XFD
WRT1_OFF_6 EQU 0XFF
WRT2_ON_6 EQU 0XFB
WRT2_OFF_6 EQU 0XFF
WRTB_ON_6 EQU 0XBF
WRTB_OFF_6 EQU 0XFF
WRTC_ON_6 EQU 0XDF
WRTC_OFF_6 EQU 0XFF
WRTD_ON_6 EQU 0X7F
WRTD_OFF_6 EQU 0XFF
EBTR0_ON_7 EQU 0XFE
EBTR0_OFF_7 EQU 0XFF
EBTR1_ON_7 EQU 0XFD
EBTR1_OFF_7 EQU 0XFF
EBTR2_ON_7 EQU 0XFB
EBTR2_OFF_7 EQU 0XFF
EBTRB_ON_7 EQU 0XBF
EBTRB_OFF_7 EQU 0XFF
DEVID1 EQU 0X3FFFFE
DEVID2 EQU 0X3FFFFF
IDLOC0 EQU 0X200000
__IDLOC0 EQU 0X200000
IDLOC1 EQU 0X200001
__IDLOC1 EQU 0X200001
IDLOC2 EQU 0X200002
__IDLOC2 EQU 0X200002
IDLOC3 EQU 0X200003
__IDLOC3 EQU 0X200003
IDLOC4 EQU 0X200004
__IDLOC4 EQU 0X200004
IDLOC5 EQU 0X200005
__IDLOC5 EQU 0X200005
IDLOC6 EQU 0X200006
__IDLOC6 EQU 0X200006
IDLOC7 EQU 0X200007
__IDLOC7 EQU 0X200007
#DEFINE __18F4525 1
#DEFINE XTAL 4
#DEFINE _CORE 16
#DEFINE _MAXRAM 3968
#DEFINE _RAM_END 3968
#DEFINE _MAXMEM 49152
#DEFINE _ADC 13
#DEFINE _ADC_RES 10
#DEFINE _EEPROM 1024
#DEFINE RAM_BANKS 15
#DEFINE _USART 1
#DEFINE _USB 0
#DEFINE _FLASH 1
#DEFINE _CWRITE_BLOCK 8
#DEFINE BANK0_START 128
#DEFINE BANK0_END 255
#DEFINE BANK1_START 256
#DEFINE BANK1_END 511
#DEFINE BANK2_START 512
#DEFINE BANK2_END 767
#DEFINE BANK3_START 768
#DEFINE BANK3_END 1023
#DEFINE BANK4_START 1024
#DEFINE BANK4_END 1279
#DEFINE BANK5_START 1280
#DEFINE BANK5_END 1535
#DEFINE BANK6_START 1536
#DEFINE BANK6_END 1791
#DEFINE BANK7_START 1792
#DEFINE BANK7_END 2047
#DEFINE BANK8_START 2048
#DEFINE BANK8_END 2303
#DEFINE BANK9_START 2304
#DEFINE BANK9_END 2559
#DEFINE BANK10_START 2560
#DEFINE BANK10_END 2815
#DEFINE BANK11_START 2816
#DEFINE BANK11_END 3071
#DEFINE BANK12_START 3072
#DEFINE BANK12_END 3327
#DEFINE BANK13_START 3328
#DEFINE BANK13_END 3583
#DEFINE BANK14_START 3584
#DEFINE BANK14_END 3839
#DEFINE BANKA_START 0
#DEFINE BANKA_END 127
#DEFINE _SYSTEM_VARIABLE_COUNT 49
RAM_BANK = 0
#DEFINE LCD#DTPORT PORTD
#DEFINE LCD#DTPIN 0
#DEFINE LCD#RSPORT PORTD
#DEFINE LCD#RSPIN 7
#DEFINE LCD#ENPORT PORTD
#DEFINE LCD#ENPIN 6
#DEFINE LCD#INTERFACE 4
#DEFINE LCD#LINES 2
#DEFINE LCD#TYPE 0
#DEFINE CLRW CLRF WREG
#DEFINE NEGW NEGF WREG
#DEFINE SKPC BTFSS STATUS,0
#DEFINE SKPNC BTFSC STATUS,0
#DEFINE CLRC BCF STATUS,0
#DEFINE SETC BSF STATUS,0
#DEFINE SKPZ BTFSS STATUS,2
#DEFINE SKPNZ BTFSC STATUS,2
#DEFINE CLRZ BCF STATUS,2
#DEFINE SETZ BSF STATUS,2
#DEFINE SD_INIT_MSSP#REQ 1
#DEFINE SD_CLOSE_FILE#REQ 1
#DEFINE SD_OPEN_FILE#REQ 1
#DEFINE SD_READ_BYTE_FROM_FILE#REQ 1
#DEFINE SD_CHECK_FOR_FILE#REQ 1
#DEFINE SD_NEW_FILE#REQ 1
#DEFINE SD_APPEND_FILE#REQ 1
#DEFINE SD_DELETE_FILE#REQ 1
#DEFINE SD_INIT_FS_MSSP#REQ 1
#DEFINE SD_WRITE_BYTE_TO_FILE#REQ 1
#DEFINE SD_WRITE_STRING_TO_FILE#REQ 1
MOVFW MACRO M#VARIN
        MOVF M#VARIN,W
        ENDM
RLF MACRO M#VARIN,M#DEST
        RLCF M#VARIN,M#DEST
        ENDM
RRF MACRO M#VARIN,M#DEST
        RRCF M#VARIN,M#DEST
        ENDM
JUMP MACRO LABEL
        GOTO LABEL
        ENDM
F@CALL MACRO M#DEST
IF (M#DEST < 1)
        CALL M#DEST
ELSE
IF (M#DEST > $)
        CALL M#DEST
ELSE
IF (M#DEST < ($ - 0X03FF))
        CALL M#DEST
ELSE
        RCALL M#DEST
ENDIF
ENDIF
ENDIF
        ENDM
F@JUMP MACRO M#DEST
IFDEF WATCHDOG_REQ
IF ($ == M#DEST)
        CLRWDT
ENDIF
ENDIF
IF (M#DEST < 1)
        GOTO M#DEST
ELSE
IF ((M#DEST) > $)
        GOTO M#DEST
ELSE
IF ((M#DEST) < ($ - 0X03FF))
        GOTO M#DEST
ELSE
        BRA M#DEST
ENDIF
ENDIF
ENDIF
        ENDM
IFDEF WATCHDOG_REQ
        CHK@SLF MACRO M#DEST
IF ($ == M#DEST)
        CLRWDT
ENDIF
        ENDM
ENDIF
G@OTO MACRO M#DEST
IF (M#DEST < 1)
        BTFSC STATUS,OV
        GOTO M#DEST
ELSE
IF (M#DEST > $)
        BTFSC STATUS,OV
        GOTO M#DEST
ELSE
IF (M#DEST < ($ - 127))
        BTFSC STATUS,OV
        GOTO M#DEST
ELSE
        BOV M#DEST
ENDIF
ENDIF
ENDIF
        ENDM
GO@TO MACRO M#DEST
IF (M#DEST < 1)
        GOTO M#DEST
ELSE
IF (M#DEST > $)
        GOTO M#DEST
ELSE
IF (M#DEST < ($ - 0X03FF))
        GOTO M#DEST
ELSE
        BRA M#DEST
ENDIF
ENDIF
ENDIF
        ENDM
S@B MACRO M#VARIN
IF ((M#VARIN > BANKA_END) & (M#VARIN < 0X0F80))
IF ((M#VARIN & 0X0F00) != (RAM_BANK << 8))
        MOVLB HIGH (M#VARIN)
        RAM_BANK = (M#VARIN >> 8)
ENDIF
ENDIF
        ENDM
R@B MACRO
IF(RAM_BANK != 0)
        MOVLB 0
        RAM_BANK = 0
ENDIF
        ENDM
WREG_BYTE MACRO M#BYTEOUT
        MOVFF WREG,M#BYTEOUT
        ENDM
WREG_BIT MACRO M#VAROUT,M#BITOUT
        S@B M#VAROUT
        BTFSC WREG,0
        BSF M#VAROUT,M#BITOUT
        BTFSS WREG,0
        BCF M#VAROUT,M#BITOUT
        R@B
        ENDM
WREG_WORD MACRO M#WORDOUT
        MOVFF WREG,M#WORDOUT
        MOVLW 0
        MOVFF WREG,M#WORDOUT + 1
        ENDM
WREG_DWORD MACRO M#DWORDOUT
        MOVFF WREG,M#DWORDOUT
        MOVLW 0
        MOVFF WREG,M#DWORDOUT + 3
        MOVFF WREG,M#DWORDOUT + 2
        MOVFF WREG,M#DWORDOUT + 1
        ENDM
BYTE_WREG MACRO M#BYTEIN
        MOVFF M#BYTEIN,WREG
        ENDM
NUM_WREG MACRO M#NUMIN
        MOVLW (M#NUMIN & 255)
        ENDM
NUM_BYTE MACRO M#NUMIN,M#BYTEOUT
        MOVLW (M#NUMIN & 255)
        MOVFF WREG,M#BYTEOUT
        ENDM
NUM_BIT MACRO M#NUMIN,M#VAROUT,M#BITOUT
        S@B M#VAROUT
IF((M#NUMIN & 1) == 1)
        BSF M#VAROUT,M#BITOUT
ELSE
        BCF M#VAROUT,M#BITOUT
ENDIF
        R@B
        ENDM
NUM_WORD MACRO M#NUMIN,M#WORDOUT
IFDEF _USELFSR
IF(M#WORDOUT == FSR0L)
        LFSR 0,M#NUMIN
        EXITM
ENDIF
IF(M#WORDOUT == FSR1L)
        LFSR 1,M#NUMIN
        EXITM
ENDIF
IF(M#WORDOUT == FSR2L)
        LFSR 2,M#NUMIN
        EXITM
ENDIF
ENDIF
        S@B M#WORDOUT
        MOVLW (M#NUMIN & 255)
        MOVWF M#WORDOUT
        S@B M#WORDOUT + 1
        MOVLW HIGH (M#NUMIN)
        MOVWF M#WORDOUT + 1
        R@B
        ENDM
NUM_DWORD MACRO M#NUMIN,M#DWORDOUT
        S@B M#DWORDOUT
        MOVLW LOW (M#NUMIN)
        MOVWF M#DWORDOUT
        S@B M#DWORDOUT + 1
        MOVLW HIGH (M#NUMIN)
        MOVWF M#DWORDOUT + 1
        S@B M#DWORDOUT + 2
        MOVLW ((M#NUMIN >> 16) & 255)
        MOVWF M#DWORDOUT + 2
        S@B M#DWORDOUT + 3
        MOVLW ((M#NUMIN >> 24) & 255)
        MOVWF M#DWORDOUT + 3
        R@B
        ENDM
BIT_WREG MACRO M#VARIN,M#BITIN
        S@B M#VARIN
        CLRW
        BTFSC M#VARIN,M#BITIN
        MOVLW 1
        R@B
        ENDM
BIT_BYTE MACRO M#VARIN,M#BITIN,M#BYTEOUT
        S@B M#VARIN
        CLRW
        BTFSC M#VARIN,M#BITIN
        MOVLW 1
        S@B M#BYTEOUT
        MOVWF M#BYTEOUT
        R@B
        ENDM
BIT_BIT MACRO M#VARIN,M#BITIN,M#VAROUT,M#BITOUT
IF ((M#VARIN & 0X0F00) == (M#VAROUT & 0X0F00))
        S@B M#VARIN
        BTFSC M#VARIN,M#BITIN
        BSF M#VAROUT,M#BITOUT
        BTFSS M#VARIN,M#BITIN
        BCF M#VAROUT,M#BITOUT
ELSE
IF ((M#VARIN <= BANKA_END) | (M#VARIN >= 0X0F80))
        S@B M#VAROUT
        BTFSC M#VARIN,M#BITIN
        BSF M#VAROUT,M#BITOUT
        BTFSS M#VARIN,M#BITIN
        BCF M#VAROUT,M#BITOUT
ELSE
IF ((M#VAROUT <= BANKA_END) | (M#VAROUT >= 0X0F80))
        S@B M#VARIN
        BTFSC M#VARIN,M#BITIN
        BSF M#VAROUT,M#BITOUT
        BTFSS M#VARIN,M#BITIN
        BCF M#VAROUT,M#BITOUT
ELSE
        S@B M#VARIN
        CLRDC
        BTFSC M#VARIN,M#BITIN
        SETDC
        S@B M#VAROUT
        SKPNDC
        BSF M#VAROUT,M#BITOUT
        SKPDC
        BCF M#VAROUT,M#BITOUT
ENDIF
ENDIF
ENDIF
        R@B
        ENDM
BIT_WORD MACRO M#VARIN,M#BITIN,M#WORDOUT
        S@B M#WORDOUT + 1
        CLRF M#WORDOUT + 1
        BIT_BYTE M#VARIN,M#BITIN,M#WORDOUT
        ENDM
BIT_DWORD MACRO M#VARIN,M#BITIN,M#DWORDOUT
        S@B M#DWORDOUT + 3
        CLRF M#DWORDOUT + 3
        S@B M#DWORDOUT + 2
        CLRF M#DWORDOUT + 2
        S@B M#DWORDOUT + 1
        CLRF M#DWORDOUT + 1
        BIT_BYTE M#VARIN,M#BITIN,M#DWORDOUT
        ENDM
WORD_WREG MACRO M#WORDIN
        BYTE_WREG M#WORDIN
        ENDM
WORD_BYTE MACRO M#WORDIN,M#BYTEOUT
        BYTE_BYTE M#WORDIN,M#BYTEOUT
        ENDM
WORD_BIT MACRO M#WORDIN,M#VAROUT,M#BITOUT
        BYTE_BIT M#WORDIN, M#VAROUT, M#BITOUT
        ENDM
WORD_WORD MACRO M#WORDIN,M#WORDOUT
        MOVFF M#WORDIN + 1,M#WORDOUT + 1
        MOVFF M#WORDIN,M#WORDOUT
        ENDM
WORD_DWORD MACRO M#WORDIN,M#DWORDOUT
        MOVLW 0
        MOVFF WREG,M#DWORDOUT + 3
        MOVFF WREG,M#DWORDOUT + 2
        WORD_WORD M#WORDIN,M#DWORDOUT
        ENDM
BYTE_BYTE MACRO M#BYTEIN,M#BYTEOUT
        MOVFF M#BYTEIN,M#BYTEOUT
        ENDM
BYTE_WORD MACRO M#BYTEIN,M#WORDOUT
        MOVLW 0
        MOVFF WREG,M#WORDOUT + 1
        BYTE_BYTE M#BYTEIN,M#WORDOUT
        ENDM
BYTE_DWORD MACRO M#BYTEIN,M#DWORDOUT
        MOVLW 0
        MOVFF WREG,M#DWORDOUT + 3
        MOVFF WREG,M#DWORDOUT + 2
        MOVFF WREG,M#DWORDOUT + 1
        BYTE_BYTE M#BYTEIN,M#DWORDOUT
        ENDM
BYTE_BIT MACRO M#BYTEIN,M#VAROUT,M#BITOUT
IF ((M#BYTEIN & 0X0F00) == (M#VAROUT & 0X0F00))
        S@B M#BYTEIN
        BTFSC M#BYTEIN,0
        BSF M#VAROUT,M#BITOUT
        BTFSS M#BYTEIN,0
        BCF M#VAROUT,M#BITOUT
ELSE
IF ((M#BYTEIN <= BANKA_END) | (M#BYTEIN >= 0X0F80))
        S@B M#VAROUT
        BTFSC M#BYTEIN,0
        BSF M#VAROUT,M#BITOUT
        BTFSS M#BYTEIN,0
        BCF M#VAROUT,M#BITOUT
ELSE
IF ((M#VAROUT <= BANKA_END) | (M#VAROUT >= 0X0F80))
        S@B M#BYTEIN
        BTFSC M#BYTEIN,0
        BSF M#VAROUT,M#BITOUT
        BTFSS M#BYTEIN,0
        BCF M#VAROUT,M#BITOUT
ELSE
        S@B M#BYTEIN
        RRF M#BYTEIN,W
        S@B M#VAROUT
        SKPNC
        BSF M#VAROUT,M#BITOUT
        SKPC
        BCF M#VAROUT,M#BITOUT
ENDIF
ENDIF
ENDIF
        R@B
        ENDM
DWORD_WREG MACRO M#DWORDIN
        BYTE_WREG M#DWORDIN
        ENDM
DWORD_BYTE MACRO M#DWORDIN,M#BYTEOUT
        BYTE_BYTE M#DWORDIN,M#BYTEOUT
        ENDM
DWORD_WORD MACRO M#DWORDIN,M#WORDOUT
        MOVFF M#DWORDIN + 1,M#WORDOUT + 1
        MOVFF M#DWORDIN,M#WORDOUT
        ENDM
DWORD_DWORD MACRO M#DWORDIN,M#DWORDOUT
        MOVFF M#DWORDIN + 3,M#DWORDOUT + 3
        MOVFF M#DWORDIN + 2,M#DWORDOUT + 2
        MOVFF M#DWORDIN + 1,M#DWORDOUT + 1
        MOVFF M#DWORDIN,M#DWORDOUT
        ENDM
DWORD_BIT MACRO M#DWORDIN,M#VAROUT,M#BITOUT
        BYTE_BIT M#DWORDIN,M#VAROUT,M#BITOUT
        ENDM
NUM_FLOAT MACRO M#NUMIN,FLOATOUT
        NUM_BYTE M#NUMIN,FLOATOUT + 3
        NUM_BYTE ((M#NUMIN >> 8) & 255),FLOATOUT + 2
        NUM_BYTE ((M#NUMIN >> 16) & 255),FLOATOUT + 1
        NUM_BYTE ((M#NUMIN >> 24) & 255),FLOATOUT
        ENDM
WREG_FLOAT MACRO FLOATOUT
        CALL FLO@0832U
        MOVFF PBP_AARG,FLOATOUT
        MOVFF PBP_AARGH,FLOATOUT + 1
        MOVFF PBP_AARGHH,FLOATOUT + 2
        MOVFF PBP_AARGHHH,FLOATOUT + 3
        ENDM
BIT_FLOAT MACRO M#VARIN,M#BITIN,FLOATOUT
        BIT_WREG M#VARIN,M#BITIN
        CALL FLO@0832U
        MOVFF PBP_AARG,FLOATOUT
        MOVFF PBP_AARGH,FLOATOUT + 1
        MOVFF PBP_AARGHH,FLOATOUT + 2
        MOVFF PBP_AARGHHH,FLOATOUT + 3
        ENDM
BYTE_FLOAT MACRO M#BYTEIN,FLOATOUT
        BYTE_WREG M#BYTEIN
        CALL FLO@0832U
        MOVFF PBP_AARG,FLOATOUT
        MOVFF PBP_AARGH,FLOATOUT + 1
        MOVFF PBP_AARGHH,FLOATOUT + 2
        MOVFF PBP_AARGHHH,FLOATOUT + 3
        ENDM
WORD_FLOAT MACRO M#WORDIN,FLOATOUT
        BYTE_BYTE M#WORDIN,PBP_AARG
        BYTE_BYTE M#WORDIN + 1,PBP_AARGH
        CALL FLO@1632U
        MOVFF PBP_AARG,FLOATOUT
        MOVFF PBP_AARGH,FLOATOUT + 1
        MOVFF PBP_AARGHH,FLOATOUT + 2
        MOVFF PBP_AARGHHH,FLOATOUT + 3
        ENDM
DWORD_FLOAT MACRO M#DWORDIN,FLOATOUT
        MOVFF M#DWORDIN,PBP_AARG
        MOVFF M#DWORDIN + 1,PBP_AARGH
        MOVFF M#DWORDIN + 2,PBP_AARGHH
        MOVFF M#DWORDIN + 3,PBP_AARGHHH
        CALL FLO@3232S
        MOVFF PBP_AARG,FLOATOUT
        MOVFF PBP_AARGH,FLOATOUT + 1
        MOVFF PBP_AARGHH,FLOATOUT + 2
        MOVFF PBP_AARGHHH,FLOATOUT + 3
        ENDM
FLOAT_FLOAT MACRO FLOATIN,FLOATOUT
        MOVFF FLOATIN,FLOATOUT
        MOVFF FLOATIN + 1,FLOATOUT + 1
        MOVFF FLOATIN + 2,FLOATOUT + 2
        MOVFF FLOATIN + 3,FLOATOUT + 3
        ENDM
FLOAT_WREG MACRO FLOATIN
        FLOAT_FLOAT FLOATIN,PBP_AARG
        CALL INT@3232
        ENDM
FLOAT_BIT MACRO FLOATIN,M#VAROUT,M#BITOUT
        FLOAT_FLOAT FLOATIN,PBP_AARG
        CALL INT@3232
        WREG_BIT M#VAROUT,M#BITOUT
        ENDM
FLOAT_BYTE MACRO FLOATIN,M#BYTEOUT
        FLOAT_FLOAT FLOATIN,PBP_AARG
        CALL INT@3232
        WREG_BYTE M#BYTEOUT
        ENDM
FLOAT_WORD MACRO FLOATIN,M#WORDOUT
        FLOAT_FLOAT FLOATIN,PBP_AARG
        CALL INT@3232
        MOVFF PBP_AARGHHH,M#WORDOUT
        MOVFF PBP_AARGHH,M#WORDOUT + 1
        ENDM
FLOAT_DWORD MACRO FLOATIN,M#DWORDOUT
        FLOAT_FLOAT FLOATIN,PBP_AARG
        CALL INT@3232
        MOVFF PBP_AARGHHH,M#DWORDOUT
        MOVFF PBP_AARGHH,M#DWORDOUT + 1
        MOVFF PBP_AARGH,M#DWORDOUT + 2
        MOVFF PBP_AARG,M#DWORDOUT + 3
        ENDM
NUM_FSR0 MACRO M#NUMIN
        LFSR 0, M#NUMIN
        ENDM
NUM_FSR1 MACRO M#NUMIN
        LFSR 1, M#NUMIN
        ENDM
NUM_FSR2 MACRO M#NUMIN
        LFSR 2, M#NUMIN
        ENDM
LABEL_WORD MACRO LABELIN,M#WORDOUT
        MOVLW LOW (LABELIN)
        MOVFF WREG, M#WORDOUT
        MOVLW HIGH (LABELIN)
        MOVFF WREG, M#WORDOUT + 1
        ENDM
BPF = 0
BPFH = 1
GEN = 2
GEN3H = 3
GEN4 = 4
GENH = 5
GPR = 6
PBP#VAR0 = 7
PBP#VAR0H = 8
PBP#VAR0HH = 9
PBP#VAR0HHH = 10
PBP#VAR1 = 11
PBP_AARG = 12
PBP_AARGH = 13
PBP_AARGHH = 14
PBP_AARGHHH = 15
PP0 = 16
PP0H = 17
PP0HH = 18
PP0HHH = 19
PP1 = 20
PP1H = 21
PP1HH = 22
PP1HHH = 23
PP2 = 24
PP2H = 25
PP2HH = 26
PP2HHH = 27
PP3 = 28
PP3H = 29
PP4 = 30
PP5 = 31
PP6 = 32
PP6H = 33
PP7 = 34
PP7H = 35
PP7HH = 36
PP7HHH = 37
PP8 = 38
PP8H = 39
PPZ = 40
PPZH = 41
PPZHH = 42
PPZHHH = 43
SP#P9 = 44
_AEXP = 45
_FP_FLAGS = 46
_FP_TEMP = 47
_SIGN = 48
SD_BYTER = 49
SD_IDX = 50
SD_SECTOR_NUM = 51
SD_SECTOR_NUMH = 52
SD_SECTOR_NUMHH = 53
SD_SECTOR_NUMHHH = 54
SD_ADDRESS = 55
SD_ADDRESSH = 56
SD_ADDRESSHH = 57
SD_ADDRESSHHH = 58
SD_SEEK_RESPONSE_IDX = 59
SD_SEEK_RESPONSE_IDXH = 60
SD_SEEK_RESPONSE_REQD = 61
SD_SEEK_RESPONSE_RETURN = 62
SD_RETURN = 63
SD_BUFFER0 = 64
VARIABLE SD_BUFFER0#0=64,SD_BUFFER0#1=65,SD_BUFFER0#2=66,SD_BUFFER0#3=67
VARIABLE SD_BUFFER0#4=68,SD_BUFFER0#5=69,SD_BUFFER0#6=70,SD_BUFFER0#7=71
VARIABLE SD_BUFFER0#8=72,SD_BUFFER0#9=73,SD_BUFFER0#10=74,SD_BUFFER0#11=75
VARIABLE SD_BUFFER0#12=76,SD_BUFFER0#13=77,SD_BUFFER0#14=78,SD_BUFFER0#15=79
VARIABLE SD_BUFFER0#16=80,SD_BUFFER0#17=81,SD_BUFFER0#18=82,SD_BUFFER0#19=83
VARIABLE SD_BUFFER0#20=84,SD_BUFFER0#21=85,SD_BUFFER0#22=86,SD_BUFFER0#23=87
VARIABLE SD_BUFFER0#24=88,SD_BUFFER0#25=89,SD_BUFFER0#26=90,SD_BUFFER0#27=91
VARIABLE SD_BUFFER0#28=92,SD_BUFFER0#29=93,SD_BUFFER0#30=94,SD_BUFFER0#31=95
VARIABLE SD_BUFFER0#32=96,SD_BUFFER0#33=97,SD_BUFFER0#34=98,SD_BUFFER0#35=99
VARIABLE SD_BUFFER0#36=100,SD_BUFFER0#37=101,SD_BUFFER0#38=102,SD_BUFFER0#39=103
VARIABLE SD_BUFFER0#40=104,SD_BUFFER0#41=105,SD_BUFFER0#42=106,SD_BUFFER0#43=107
VARIABLE SD_BUFFER0#44=108,SD_BUFFER0#45=109,SD_BUFFER0#46=110,SD_BUFFER0#47=111
VARIABLE SD_BUFFER0#48=112,SD_BUFFER0#49=113,SD_BUFFER0#50=114,SD_BUFFER0#51=115
VARIABLE SD_BUFFER0#52=116,SD_BUFFER0#53=117,SD_BUFFER0#54=118,SD_BUFFER0#55=119
VARIABLE SD_BUFFER0#56=120,SD_BUFFER0#57=121,SD_BUFFER0#58=122,SD_BUFFER0#59=123
VARIABLE SD_BUFFER0#60=124,SD_BUFFER0#61=125,SD_BUFFER0#62=126,SD_BUFFER0#63=127
VARIABLE SD_BUFFER0#64=128,SD_BUFFER0#65=129,SD_BUFFER0#66=130,SD_BUFFER0#67=131
VARIABLE SD_BUFFER0#68=132,SD_BUFFER0#69=133,SD_BUFFER0#70=134,SD_BUFFER0#71=135
VARIABLE SD_BUFFER0#72=136,SD_BUFFER0#73=137,SD_BUFFER0#74=138,SD_BUFFER0#75=139
VARIABLE SD_BUFFER0#76=140,SD_BUFFER0#77=141,SD_BUFFER0#78=142,SD_BUFFER0#79=143
VARIABLE SD_BUFFER0#80=144,SD_BUFFER0#81=145,SD_BUFFER0#82=146,SD_BUFFER0#83=147
VARIABLE SD_BUFFER0#84=148,SD_BUFFER0#85=149,SD_BUFFER0#86=150,SD_BUFFER0#87=151
VARIABLE SD_BUFFER0#88=152,SD_BUFFER0#89=153,SD_BUFFER0#90=154,SD_BUFFER0#91=155
VARIABLE SD_BUFFER0#92=156,SD_BUFFER0#93=157,SD_BUFFER0#94=158,SD_BUFFER0#95=159
VARIABLE SD_BUFFER0#96=160,SD_BUFFER0#97=161,SD_BUFFER0#98=162,SD_BUFFER0#99=163
VARIABLE SD_BUFFER0#100=164,SD_BUFFER0#101=165,SD_BUFFER0#102=166,SD_BUFFER0#103=167
VARIABLE SD_BUFFER0#104=168,SD_BUFFER0#105=169,SD_BUFFER0#106=170,SD_BUFFER0#107=171
VARIABLE SD_BUFFER0#108=172,SD_BUFFER0#109=173,SD_BUFFER0#110=174,SD_BUFFER0#111=175
VARIABLE SD_BUFFER0#112=176,SD_BUFFER0#113=177,SD_BUFFER0#114=178,SD_BUFFER0#115=179
VARIABLE SD_BUFFER0#116=180,SD_BUFFER0#117=181,SD_BUFFER0#118=182,SD_BUFFER0#119=183
VARIABLE SD_BUFFER0#120=184,SD_BUFFER0#121=185,SD_BUFFER0#122=186,SD_BUFFER0#123=187
VARIABLE SD_BUFFER0#124=188,SD_BUFFER0#125=189,SD_BUFFER0#126=190,SD_BUFFER0#127=191
VARIABLE SD_BUFFER0#128=192,SD_BUFFER0#129=193,SD_BUFFER0#130=194,SD_BUFFER0#131=195
VARIABLE SD_BUFFER0#132=196,SD_BUFFER0#133=197,SD_BUFFER0#134=198,SD_BUFFER0#135=199
VARIABLE SD_BUFFER0#136=200,SD_BUFFER0#137=201,SD_BUFFER0#138=202,SD_BUFFER0#139=203
VARIABLE SD_BUFFER0#140=204,SD_BUFFER0#141=205,SD_BUFFER0#142=206,SD_BUFFER0#143=207
VARIABLE SD_BUFFER0#144=208,SD_BUFFER0#145=209,SD_BUFFER0#146=210,SD_BUFFER0#147=211
VARIABLE SD_BUFFER0#148=212,SD_BUFFER0#149=213,SD_BUFFER0#150=214,SD_BUFFER0#151=215
VARIABLE SD_BUFFER0#152=216,SD_BUFFER0#153=217,SD_BUFFER0#154=218,SD_BUFFER0#155=219
VARIABLE SD_BUFFER0#156=220,SD_BUFFER0#157=221,SD_BUFFER0#158=222,SD_BUFFER0#159=223
VARIABLE SD_BUFFER0#160=224,SD_BUFFER0#161=225,SD_BUFFER0#162=226,SD_BUFFER0#163=227
VARIABLE SD_BUFFER0#164=228,SD_BUFFER0#165=229,SD_BUFFER0#166=230,SD_BUFFER0#167=231
VARIABLE SD_BUFFER0#168=232,SD_BUFFER0#169=233,SD_BUFFER0#170=234,SD_BUFFER0#171=235
VARIABLE SD_BUFFER0#172=236,SD_BUFFER0#173=237,SD_BUFFER0#174=238,SD_BUFFER0#175=239
VARIABLE SD_BUFFER0#176=240,SD_BUFFER0#177=241,SD_BUFFER0#178=242,SD_BUFFER0#179=243
VARIABLE SD_BUFFER0#180=244,SD_BUFFER0#181=245,SD_BUFFER0#182=246,SD_BUFFER0#183=247
VARIABLE SD_BUFFER0#184=248,SD_BUFFER0#185=249,SD_BUFFER0#186=250,SD_BUFFER0#187=251
VARIABLE SD_BUFFER0#188=252,SD_BUFFER0#189=253,SD_BUFFER0#190=254,SD_BUFFER0#191=255
VARIABLE SD_BUFFER0#192=256,SD_BUFFER0#193=257,SD_BUFFER0#194=258,SD_BUFFER0#195=259
VARIABLE SD_BUFFER0#196=260,SD_BUFFER0#197=261,SD_BUFFER0#198=262,SD_BUFFER0#199=263
VARIABLE SD_BUFFER0#200=264,SD_BUFFER0#201=265,SD_BUFFER0#202=266,SD_BUFFER0#203=267
VARIABLE SD_BUFFER0#204=268,SD_BUFFER0#205=269,SD_BUFFER0#206=270,SD_BUFFER0#207=271
VARIABLE SD_BUFFER0#208=272,SD_BUFFER0#209=273,SD_BUFFER0#210=274,SD_BUFFER0#211=275
VARIABLE SD_BUFFER0#212=276,SD_BUFFER0#213=277,SD_BUFFER0#214=278,SD_BUFFER0#215=279
VARIABLE SD_BUFFER0#216=280,SD_BUFFER0#217=281,SD_BUFFER0#218=282,SD_BUFFER0#219=283
VARIABLE SD_BUFFER0#220=284,SD_BUFFER0#221=285,SD_BUFFER0#222=286,SD_BUFFER0#223=287
VARIABLE SD_BUFFER0#224=288,SD_BUFFER0#225=289,SD_BUFFER0#226=290,SD_BUFFER0#227=291
VARIABLE SD_BUFFER0#228=292,SD_BUFFER0#229=293,SD_BUFFER0#230=294,SD_BUFFER0#231=295
VARIABLE SD_BUFFER0#232=296,SD_BUFFER0#233=297,SD_BUFFER0#234=298,SD_BUFFER0#235=299
VARIABLE SD_BUFFER0#236=300,SD_BUFFER0#237=301,SD_BUFFER0#238=302,SD_BUFFER0#239=303
VARIABLE SD_BUFFER0#240=304,SD_BUFFER0#241=305,SD_BUFFER0#242=306,SD_BUFFER0#243=307
VARIABLE SD_BUFFER0#244=308,SD_BUFFER0#245=309,SD_BUFFER0#246=310,SD_BUFFER0#247=311
VARIABLE SD_BUFFER0#248=312,SD_BUFFER0#249=313,SD_BUFFER0#250=314,SD_BUFFER0#251=315
VARIABLE SD_BUFFER0#252=316,SD_BUFFER0#253=317,SD_BUFFER0#254=318,SD_BUFFER0#255=319
SD_BUFFER1 = 320
VARIABLE SD_BUFFER1#0=320,SD_BUFFER1#1=321,SD_BUFFER1#2=322,SD_BUFFER1#3=323
VARIABLE SD_BUFFER1#4=324,SD_BUFFER1#5=325,SD_BUFFER1#6=326,SD_BUFFER1#7=327
VARIABLE SD_BUFFER1#8=328,SD_BUFFER1#9=329,SD_BUFFER1#10=330,SD_BUFFER1#11=331
VARIABLE SD_BUFFER1#12=332,SD_BUFFER1#13=333,SD_BUFFER1#14=334,SD_BUFFER1#15=335
VARIABLE SD_BUFFER1#16=336,SD_BUFFER1#17=337,SD_BUFFER1#18=338,SD_BUFFER1#19=339
VARIABLE SD_BUFFER1#20=340,SD_BUFFER1#21=341,SD_BUFFER1#22=342,SD_BUFFER1#23=343
VARIABLE SD_BUFFER1#24=344,SD_BUFFER1#25=345,SD_BUFFER1#26=346,SD_BUFFER1#27=347
VARIABLE SD_BUFFER1#28=348,SD_BUFFER1#29=349,SD_BUFFER1#30=350,SD_BUFFER1#31=351
VARIABLE SD_BUFFER1#32=352,SD_BUFFER1#33=353,SD_BUFFER1#34=354,SD_BUFFER1#35=355
VARIABLE SD_BUFFER1#36=356,SD_BUFFER1#37=357,SD_BUFFER1#38=358,SD_BUFFER1#39=359
VARIABLE SD_BUFFER1#40=360,SD_BUFFER1#41=361,SD_BUFFER1#42=362,SD_BUFFER1#43=363
VARIABLE SD_BUFFER1#44=364,SD_BUFFER1#45=365,SD_BUFFER1#46=366,SD_BUFFER1#47=367
VARIABLE SD_BUFFER1#48=368,SD_BUFFER1#49=369,SD_BUFFER1#50=370,SD_BUFFER1#51=371
VARIABLE SD_BUFFER1#52=372,SD_BUFFER1#53=373,SD_BUFFER1#54=374,SD_BUFFER1#55=375
VARIABLE SD_BUFFER1#56=376,SD_BUFFER1#57=377,SD_BUFFER1#58=378,SD_BUFFER1#59=379
VARIABLE SD_BUFFER1#60=380,SD_BUFFER1#61=381,SD_BUFFER1#62=382,SD_BUFFER1#63=383
VARIABLE SD_BUFFER1#64=384,SD_BUFFER1#65=385,SD_BUFFER1#66=386,SD_BUFFER1#67=387
VARIABLE SD_BUFFER1#68=388,SD_BUFFER1#69=389,SD_BUFFER1#70=390,SD_BUFFER1#71=391
VARIABLE SD_BUFFER1#72=392,SD_BUFFER1#73=393,SD_BUFFER1#74=394,SD_BUFFER1#75=395
VARIABLE SD_BUFFER1#76=396,SD_BUFFER1#77=397,SD_BUFFER1#78=398,SD_BUFFER1#79=399
VARIABLE SD_BUFFER1#80=400,SD_BUFFER1#81=401,SD_BUFFER1#82=402,SD_BUFFER1#83=403
VARIABLE SD_BUFFER1#84=404,SD_BUFFER1#85=405,SD_BUFFER1#86=406,SD_BUFFER1#87=407
VARIABLE SD_BUFFER1#88=408,SD_BUFFER1#89=409,SD_BUFFER1#90=410,SD_BUFFER1#91=411
VARIABLE SD_BUFFER1#92=412,SD_BUFFER1#93=413,SD_BUFFER1#94=414,SD_BUFFER1#95=415
VARIABLE SD_BUFFER1#96=416,SD_BUFFER1#97=417,SD_BUFFER1#98=418,SD_BUFFER1#99=419
VARIABLE SD_BUFFER1#100=420,SD_BUFFER1#101=421,SD_BUFFER1#102=422,SD_BUFFER1#103=423
VARIABLE SD_BUFFER1#104=424,SD_BUFFER1#105=425,SD_BUFFER1#106=426,SD_BUFFER1#107=427
VARIABLE SD_BUFFER1#108=428,SD_BUFFER1#109=429,SD_BUFFER1#110=430,SD_BUFFER1#111=431
VARIABLE SD_BUFFER1#112=432,SD_BUFFER1#113=433,SD_BUFFER1#114=434,SD_BUFFER1#115=435
VARIABLE SD_BUFFER1#116=436,SD_BUFFER1#117=437,SD_BUFFER1#118=438,SD_BUFFER1#119=439
VARIABLE SD_BUFFER1#120=440,SD_BUFFER1#121=441,SD_BUFFER1#122=442,SD_BUFFER1#123=443
VARIABLE SD_BUFFER1#124=444,SD_BUFFER1#125=445,SD_BUFFER1#126=446,SD_BUFFER1#127=447
VARIABLE SD_BUFFER1#128=448,SD_BUFFER1#129=449,SD_BUFFER1#130=450,SD_BUFFER1#131=451
VARIABLE SD_BUFFER1#132=452,SD_BUFFER1#133=453,SD_BUFFER1#134=454,SD_BUFFER1#135=455
VARIABLE SD_BUFFER1#136=456,SD_BUFFER1#137=457,SD_BUFFER1#138=458,SD_BUFFER1#139=459
VARIABLE SD_BUFFER1#140=460,SD_BUFFER1#141=461,SD_BUFFER1#142=462,SD_BUFFER1#143=463
VARIABLE SD_BUFFER1#144=464,SD_BUFFER1#145=465,SD_BUFFER1#146=466,SD_BUFFER1#147=467
VARIABLE SD_BUFFER1#148=468,SD_BUFFER1#149=469,SD_BUFFER1#150=470,SD_BUFFER1#151=471
VARIABLE SD_BUFFER1#152=472,SD_BUFFER1#153=473,SD_BUFFER1#154=474,SD_BUFFER1#155=475
VARIABLE SD_BUFFER1#156=476,SD_BUFFER1#157=477,SD_BUFFER1#158=478,SD_BUFFER1#159=479
VARIABLE SD_BUFFER1#160=480,SD_BUFFER1#161=481,SD_BUFFER1#162=482,SD_BUFFER1#163=483
VARIABLE SD_BUFFER1#164=484,SD_BUFFER1#165=485,SD_BUFFER1#166=486,SD_BUFFER1#167=487
VARIABLE SD_BUFFER1#168=488,SD_BUFFER1#169=489,SD_BUFFER1#170=490,SD_BUFFER1#171=491
VARIABLE SD_BUFFER1#172=492,SD_BUFFER1#173=493,SD_BUFFER1#174=494,SD_BUFFER1#175=495
VARIABLE SD_BUFFER1#176=496,SD_BUFFER1#177=497,SD_BUFFER1#178=498,SD_BUFFER1#179=499
VARIABLE SD_BUFFER1#180=500,SD_BUFFER1#181=501,SD_BUFFER1#182=502,SD_BUFFER1#183=503
VARIABLE SD_BUFFER1#184=504,SD_BUFFER1#185=505,SD_BUFFER1#186=506,SD_BUFFER1#187=507
VARIABLE SD_BUFFER1#188=508,SD_BUFFER1#189=509,SD_BUFFER1#190=510,SD_BUFFER1#191=511
VARIABLE SD_BUFFER1#192=512,SD_BUFFER1#193=513,SD_BUFFER1#194=514,SD_BUFFER1#195=515
VARIABLE SD_BUFFER1#196=516,SD_BUFFER1#197=517,SD_BUFFER1#198=518,SD_BUFFER1#199=519
VARIABLE SD_BUFFER1#200=520,SD_BUFFER1#201=521,SD_BUFFER1#202=522,SD_BUFFER1#203=523
VARIABLE SD_BUFFER1#204=524,SD_BUFFER1#205=525,SD_BUFFER1#206=526,SD_BUFFER1#207=527
VARIABLE SD_BUFFER1#208=528,SD_BUFFER1#209=529,SD_BUFFER1#210=530,SD_BUFFER1#211=531
VARIABLE SD_BUFFER1#212=532,SD_BUFFER1#213=533,SD_BUFFER1#214=534,SD_BUFFER1#215=535
VARIABLE SD_BUFFER1#216=536,SD_BUFFER1#217=537,SD_BUFFER1#218=538,SD_BUFFER1#219=539
VARIABLE SD_BUFFER1#220=540,SD_BUFFER1#221=541,SD_BUFFER1#222=542,SD_BUFFER1#223=543
VARIABLE SD_BUFFER1#224=544,SD_BUFFER1#225=545,SD_BUFFER1#226=546,SD_BUFFER1#227=547
VARIABLE SD_BUFFER1#228=548,SD_BUFFER1#229=549,SD_BUFFER1#230=550,SD_BUFFER1#231=551
VARIABLE SD_BUFFER1#232=552,SD_BUFFER1#233=553,SD_BUFFER1#234=554,SD_BUFFER1#235=555
VARIABLE SD_BUFFER1#236=556,SD_BUFFER1#237=557,SD_BUFFER1#238=558,SD_BUFFER1#239=559
VARIABLE SD_BUFFER1#240=560,SD_BUFFER1#241=561,SD_BUFFER1#242=562,SD_BUFFER1#243=563
VARIABLE SD_BUFFER1#244=564,SD_BUFFER1#245=565,SD_BUFFER1#246=566,SD_BUFFER1#247=567
VARIABLE SD_BUFFER1#248=568,SD_BUFFER1#249=569,SD_BUFFER1#250=570,SD_BUFFER1#251=571
VARIABLE SD_BUFFER1#252=572,SD_BUFFER1#253=573,SD_BUFFER1#254=574,SD_BUFFER1#255=575
SD_BYTE0 = 576
SD_BYTE1 = 577
SD_BYTE2 = 578
SD_BYTE3 = 579
SD_BYTE4 = 580
SD_BYTE5 = 581
SD_BUFFER_IDX = 582
SD_BUFFER_IDXH = 583
SD_BYTE_RW = 584
SD_RW_OPTION = 585
SD_EXTENDED_RETURN = 586
SD_EXTENDED_RETURN_ROOT_DIR = 587
SD_DATA_IO = 588
SD_BUFFER_POS = 589
SD_BUFFER_POSH = 590
SD_ROOT_DIR_FILE_POS = 591
SD_SEC_NUM = 592
SD_SEC_NUMH = 593
SD_SEC_NUMHH = 594
SD_SEC_NUMHHH = 595
SD_SECS_PER_CLUSTER = 596
SD_RESERVED_SECS = 597
SD_RESERVED_SECSH = 598
SD_SECS_PER_FAT = 599
SD_SECS_PER_FATH = 600
SD_NUM_OF_FATS = 601
SD_NUM_OF_SECS = 602
SD_NUM_OF_SECSH = 603
SD_NUM_OF_SECSHH = 604
SD_NUM_OF_SECSHHH = 605
SD_BYTES_PER_SEC = 606
SD_BYTES_PER_SECH = 607
SD_NUM_OF_ROOT_ENTRIES = 608
SD_NUM_OF_ROOT_ENTRIESH = 609
SD_SECS_IN_ROOT = 610
SD_SECS_IN_ROOTH = 611
SD_BOOT_RECORD = 612
SD_BOOT_RECORDH = 613
SD_FAT1 = 614
SD_FAT1H = 615
SD_FAT1HH = 616
SD_FAT1HHH = 617
SD_FAT2 = 618
SD_FAT2H = 619
SD_FAT2HH = 620
SD_FAT2HHH = 621
SD_ROOT_DIR = 622
SD_ROOT_DIRH = 623
SD_ROOT_DIRHH = 624
SD_ROOT_DIRHHH = 625
SD_DATA_AREA = 626
SD_DATA_AREAH = 627
SD_DATA_AREAHH = 628
SD_DATA_AREAHHH = 629
SD_FAT_ENTRY = 630
SD_FAT_ENTRYH = 631
SD_FAT_SEC = 632
SD_FAT_SECH = 633
SD_FAT_SECHH = 634
SD_FAT_SECHHH = 635
SD_FAT_BUFFER_POS = 636
SD_FAT_BUFFER_POSH = 637
SD_FAT_SEC_PREV = 638
SD_FAT_SEC_PREVH = 639
SD_FAT_SEC_PREVHH = 640
SD_FAT_SEC_PREVHHH = 641
SD_FAT_BUFFER_POS_PREV = 642
SD_FAT_BUFFER_POS_PREVH = 643
SD_ROOT_DIR_SEC = 644
SD_ROOT_DIR_SECH = 645
SD_ROOT_DIR_SECHH = 646
SD_ROOT_DIR_SECHHH = 647
SD_ROOT_DIR_POS = 648
SD_ROOT_DIR_POSH = 649
SD_DATA_SEC = 650
SD_DATA_SECH = 651
SD_DATA_SECHH = 652
SD_DATA_SECHHH = 653
SD_DATA_BUFFER_POS = 654
SD_DATA_BUFFER_POSH = 655
SD_FILE_NAME = 656
VARIABLE SD_FILE_NAME#0=656,SD_FILE_NAME#1=657,SD_FILE_NAME#2=658,SD_FILE_NAME#3=659
VARIABLE SD_FILE_NAME#4=660,SD_FILE_NAME#5=661,SD_FILE_NAME#6=662,SD_FILE_NAME#7=663
VARIABLE SD_FILE_NAME#8=664
SD_FILE_EXT = 665
VARIABLE SD_FILE_EXT#0=665,SD_FILE_EXT#1=666,SD_FILE_EXT#2=667,SD_FILE_EXT#3=668
SD_ROOT_DIR_FILE = 669
VARIABLE SD_ROOT_DIR_FILE#0=669,SD_ROOT_DIR_FILE#1=670,SD_ROOT_DIR_FILE#2=671,SD_ROOT_DIR_FILE#3=672
VARIABLE SD_ROOT_DIR_FILE#4=673,SD_ROOT_DIR_FILE#5=674,SD_ROOT_DIR_FILE#6=675,SD_ROOT_DIR_FILE#7=676
VARIABLE SD_ROOT_DIR_FILE#8=677,SD_ROOT_DIR_FILE#9=678,SD_ROOT_DIR_FILE#10=679,SD_ROOT_DIR_FILE#11=680
VARIABLE SD_ROOT_DIR_FILE#12=681,SD_ROOT_DIR_FILE#13=682,SD_ROOT_DIR_FILE#14=683,SD_ROOT_DIR_FILE#15=684
VARIABLE SD_ROOT_DIR_FILE#16=685,SD_ROOT_DIR_FILE#17=686,SD_ROOT_DIR_FILE#18=687,SD_ROOT_DIR_FILE#19=688
VARIABLE SD_ROOT_DIR_FILE#20=689,SD_ROOT_DIR_FILE#21=690,SD_ROOT_DIR_FILE#22=691,SD_ROOT_DIR_FILE#23=692
VARIABLE SD_ROOT_DIR_FILE#24=693,SD_ROOT_DIR_FILE#25=694,SD_ROOT_DIR_FILE#26=695,SD_ROOT_DIR_FILE#27=696
VARIABLE SD_ROOT_DIR_FILE#28=697,SD_ROOT_DIR_FILE#29=698,SD_ROOT_DIR_FILE#30=699,SD_ROOT_DIR_FILE#31=700
SD_WRITE_SEC_NUM = 701
SD_WRITE_SEC_NUMH = 702
SD_WRITE_SEC_NUMHH = 703
SD_WRITE_SEC_NUMHHH = 704
SD_WRITE_BUFFER_POS = 705
SD_WRITE_BUFFER_POSH = 706
SD_NULL_F = 707
SD_CLUSTER_NUM = 708
SD_CLUSTER_NUMH = 709
SD_CLUSTER_NUM_PREV = 710
SD_CLUSTER_NUM_PREVH = 711
SD_LAST_CLUSTER = 712
SD_LAST_CLUSTERH = 713
SD_SEC_IN_CLUSTER = 714
SD_FILE_SIZE = 715
SD_FILE_SIZEH = 716
SD_FILE_SIZEHH = 717
SD_FILE_SIZEHHH = 718
SD_IO_BYTE = 719
SD_TEMP_BYTE = 720
SD_TEMP = 721
SD_TEMPH = 722
SD_TEMP_DWORD = 723
SD_TEMP_DWORDH = 724
SD_TEMP_DWORDHH = 725
SD_TEMP_DWORDHHH = 726
SD_CLUSTER_SEQ_NUM = 727
SD_CLUSTER_SEQ_NUMH = 728
SD_CLUSTER_SEQ_IDX = 729
SD_CLUSTER_SEQ_IDXH = 730
SD_CLUSTER_SEQ_NUM_PREV = 731
SD_CLUSTER_SEQ_NUM_PREVH = 732
SD_CLUSTER_SEQ_IDX_PREV = 733
SD_CLUSTER_SEQ_IDX_PREVH = 734
SD_FIND_ROOT_DIR_ENTRY_F = 735
SD_BYTES_READ = 736
SD_BYTES_READH = 737
SD_BYTES_READHH = 738
SD_BYTES_READHHH = 739
_B#VR1 = 740
SD_FILE_NUM = 741
SD_FILE_NUMH = 742
SD_DIR_DIRECTION = 743
SD_EXTENDED_RETURN_INT = 744
SD_FILE_SIZE_LEFT = 745
SD_FILE_SIZE_LEFTH = 746
SD_FILE_SIZE_LEFTHH = 747
SD_FILE_SIZE_LEFTHHH = 748
SD_TIMEOUT = 749
SD_DAY = 750
SD_MONTH = 751
SD_YEAR = 752
SD_MSECONDS = 753
SD_SECONDS = 754
SD_MINUTES = 755
SD_HOURS = 756
SD_IS_DIRTY = 757
SD_SSPSTAT = 758
SD_RETURN_F = 759
SD_IO_STRING_LENGTH = 760
SD_IO_STRING_POS = 761
SD_IO_STRING = 762
VARIABLE SD_IO_STRING#0=762,SD_IO_STRING#1=763,SD_IO_STRING#2=764,SD_IO_STRING#3=765
VARIABLE SD_IO_STRING#4=766,SD_IO_STRING#5=767,SD_IO_STRING#6=768,SD_IO_STRING#7=769
VARIABLE SD_IO_STRING#8=770,SD_IO_STRING#9=771,SD_IO_STRING#10=772,SD_IO_STRING#11=773
VARIABLE SD_IO_STRING#12=774,SD_IO_STRING#13=775,SD_IO_STRING#14=776,SD_IO_STRING#15=777
VARIABLE SD_IO_STRING#16=778,SD_IO_STRING#17=779,SD_IO_STRING#18=780,SD_IO_STRING#19=781
VARIABLE SD_IO_STRING#20=782,SD_IO_STRING#21=783,SD_IO_STRING#22=784,SD_IO_STRING#23=785
VARIABLE SD_IO_STRING#24=786,SD_IO_STRING#25=787,SD_IO_STRING#26=788,SD_IO_STRING#27=789
VARIABLE SD_IO_STRING#28=790,SD_IO_STRING#29=791,SD_IO_STRING#30=792,SD_IO_STRING#31=793
VARIABLE SD_IO_STRING#32=794,SD_IO_STRING#33=795,SD_IO_STRING#34=796,SD_IO_STRING#35=797
VARIABLE SD_IO_STRING#36=798,SD_IO_STRING#37=799,SD_IO_STRING#38=800,SD_IO_STRING#39=801
VARIABLE SD_IO_STRING#40=802,SD_IO_STRING#41=803,SD_IO_STRING#42=804,SD_IO_STRING#43=805
VARIABLE SD_IO_STRING#44=806,SD_IO_STRING#45=807,SD_IO_STRING#46=808,SD_IO_STRING#47=809
VARIABLE SD_IO_STRING#48=810,SD_IO_STRING#49=811,SD_IO_STRING#50=812,SD_IO_STRING#51=813
VARIABLE SD_IO_STRING#52=814,SD_IO_STRING#53=815,SD_IO_STRING#54=816,SD_IO_STRING#55=817
VARIABLE SD_IO_STRING#56=818,SD_IO_STRING#57=819,SD_IO_STRING#58=820,SD_IO_STRING#59=821
VARIABLE SD_IO_STRING#60=822,SD_IO_STRING#61=823,SD_IO_STRING#62=824,SD_IO_STRING#63=825
VARIABLE SD_IO_STRING#64=826,SD_IO_STRING#65=827,SD_IO_STRING#66=828,SD_IO_STRING#67=829
VARIABLE SD_IO_STRING#68=830,SD_IO_STRING#69=831,SD_IO_STRING#70=832,SD_IO_STRING#71=833
VARIABLE SD_IO_STRING#72=834,SD_IO_STRING#73=835,SD_IO_STRING#74=836,SD_IO_STRING#75=837
VARIABLE SD_IO_STRING#76=838,SD_IO_STRING#77=839,SD_IO_STRING#78=840,SD_IO_STRING#79=841
VARIABLE SD_IO_STRING#80=842,SD_IO_STRING#81=843,SD_IO_STRING#82=844,SD_IO_STRING#83=845
VARIABLE SD_IO_STRING#84=846,SD_IO_STRING#85=847,SD_IO_STRING#86=848,SD_IO_STRING#87=849
VARIABLE SD_IO_STRING#88=850,SD_IO_STRING#89=851,SD_IO_STRING#90=852,SD_IO_STRING#91=853
VARIABLE SD_IO_STRING#92=854,SD_IO_STRING#93=855,SD_IO_STRING#94=856,SD_IO_STRING#95=857
VARIABLE SD_IO_STRING#96=858,SD_IO_STRING#97=859,SD_IO_STRING#98=860,SD_IO_STRING#99=861
VARIABLE SD_IO_STRING#100=862,SD_IO_STRING#101=863,SD_IO_STRING#102=864,SD_IO_STRING#103=865
VARIABLE SD_IO_STRING#104=866,SD_IO_STRING#105=867,SD_IO_STRING#106=868,SD_IO_STRING#107=869
VARIABLE SD_IO_STRING#108=870,SD_IO_STRING#109=871,SD_IO_STRING#110=872,SD_IO_STRING#111=873
VARIABLE SD_IO_STRING#112=874,SD_IO_STRING#113=875,SD_IO_STRING#114=876,SD_IO_STRING#115=877
VARIABLE SD_IO_STRING#116=878,SD_IO_STRING#117=879,SD_IO_STRING#118=880,SD_IO_STRING#119=881
VARIABLE SD_IO_STRING#120=882,SD_IO_STRING#121=883,SD_IO_STRING#122=884,SD_IO_STRING#123=885
VARIABLE SD_IO_STRING#124=886,SD_IO_STRING#125=887,SD_IO_STRING#126=888,SD_IO_STRING#127=889
VARIABLE SD_IO_STRING#128=890,SD_IO_STRING#129=891,SD_IO_STRING#130=892,SD_IO_STRING#131=893
VARIABLE SD_IO_STRING#132=894,SD_IO_STRING#133=895,SD_IO_STRING#134=896,SD_IO_STRING#135=897
VARIABLE SD_IO_STRING#136=898,SD_IO_STRING#137=899,SD_IO_STRING#138=900,SD_IO_STRING#139=901
VARIABLE SD_IO_STRING#140=902,SD_IO_STRING#141=903,SD_IO_STRING#142=904,SD_IO_STRING#143=905
VARIABLE SD_IO_STRING#144=906,SD_IO_STRING#145=907,SD_IO_STRING#146=908,SD_IO_STRING#147=909
VARIABLE SD_IO_STRING#148=910,SD_IO_STRING#149=911,SD_IO_STRING#150=912,SD_IO_STRING#151=913
VARIABLE SD_IO_STRING#152=914,SD_IO_STRING#153=915,SD_IO_STRING#154=916,SD_IO_STRING#155=917
VARIABLE SD_IO_STRING#156=918,SD_IO_STRING#157=919,SD_IO_STRING#158=920,SD_IO_STRING#159=921
VARIABLE SD_IO_STRING#160=922,SD_IO_STRING#161=923,SD_IO_STRING#162=924,SD_IO_STRING#163=925
VARIABLE SD_IO_STRING#164=926,SD_IO_STRING#165=927,SD_IO_STRING#166=928,SD_IO_STRING#167=929
VARIABLE SD_IO_STRING#168=930,SD_IO_STRING#169=931,SD_IO_STRING#170=932,SD_IO_STRING#171=933
VARIABLE SD_IO_STRING#172=934,SD_IO_STRING#173=935,SD_IO_STRING#174=936,SD_IO_STRING#175=937
VARIABLE SD_IO_STRING#176=938,SD_IO_STRING#177=939,SD_IO_STRING#178=940,SD_IO_STRING#179=941
VARIABLE SD_IO_STRING#180=942,SD_IO_STRING#181=943,SD_IO_STRING#182=944,SD_IO_STRING#183=945
VARIABLE SD_IO_STRING#184=946,SD_IO_STRING#185=947,SD_IO_STRING#186=948,SD_IO_STRING#187=949
VARIABLE SD_IO_STRING#188=950,SD_IO_STRING#189=951,SD_IO_STRING#190=952,SD_IO_STRING#191=953
VARIABLE SD_IO_STRING#192=954,SD_IO_STRING#193=955,SD_IO_STRING#194=956,SD_IO_STRING#195=957
VARIABLE SD_IO_STRING#196=958,SD_IO_STRING#197=959,SD_IO_STRING#198=960,SD_IO_STRING#199=961
VARIABLE SD_IO_STRING#200=962
USER_POINTER = 963
USER_POINTERH = 964
TAGIN = 965
VARIABLE TAGIN#0=965,TAGIN#1=966,TAGIN#2=967,TAGIN#3=968
VARIABLE TAGIN#4=969,TAGIN#5=970,TAGIN#6=971,TAGIN#7=972
VARIABLE TAGIN#8=973,TAGIN#9=974
USERIN = 975
VARIABLE USERIN#0=975,USERIN#1=976,USERIN#2=977,USERIN#3=978
UTAG = 979
VARIABLE UTAG#0=979,UTAG#1=980,UTAG#2=981,UTAG#3=982
VARIABLE UTAG#4=983,UTAG#5=984,UTAG#6=985,UTAG#7=986
VARIABLE UTAG#8=987,UTAG#9=988,UTAG#10=989,UTAG#11=990
VARIABLE UTAG#12=991,UTAG#13=992,UTAG#14=993,UTAG#15=994
ETX = 995
CHECKSUM = 996
MODNUM = 997
VARIABLE MODNUM#0=997,MODNUM#1=998,MODNUM#2=999,MODNUM#3=1000
VARIABLE MODNUM#4=1001,MODNUM#5=1002,MODNUM#6=1003
RESPONSE = 1004
SD_IO = 1005
MYCOUNT = 1006
MYCOUNTH = 1007
INDEX = 1008
INDEX2 = 1009
INDEX2H = 1010
TV1 = 1011
#DEFINE SD_CS PORTC,2
#DEFINE SD_DI PORTC,5
#DEFINE SD_CLK PORTC,3
#DEFINE SD_DO PORTC,4
#DEFINE SD_EOF _B#VR1,0
#DEFINE SD_RW_PTR SD_BYTES_READ
#DEFINE SD_RW_PTRH SD_BYTES_READH
#DEFINE SD_RW_PTRHH SD_BYTES_READHH
#DEFINE SD_RW_PTRHHH SD_BYTES_READHHH
#DEFINE SD_FREE_CLUSTER_NUM SD_CLUSTER_SEQ_NUM
#DEFINE SD_FREE_CLUSTER_NUMH SD_CLUSTER_SEQ_NUMH
#DEFINE SD_FREE_SPACE_KB SD_BYTES_READ
#DEFINE SD_FREE_SPACE_KBH SD_BYTES_READH
#DEFINE SD_FREE_SPACE_KBHH SD_BYTES_READHH
#DEFINE SD_FREE_SPACE_KBHHH SD_BYTES_READHHH
#DEFINE SD_DISK_SIZE_KB SD_BYTES_READ
#DEFINE SD_DISK_SIZE_KBH SD_BYTES_READH
#DEFINE SD_DISK_SIZE_KBHH SD_BYTES_READHH
#DEFINE SD_DISK_SIZE_KBHHH SD_BYTES_READHHH
#DEFINE SD_SPI_BF SSPSTAT,0
#DEFINE SD_SPI_IF PIR1,3
#DEFINE __KEYPAD_PORT PORTB
#DEFINE __LCD_DTPORT PORTD
#DEFINE __LCD_ENPORT PORTD
#DEFINE __LCD_RSPORT PORTD
#DEFINE SD_DETECT PORTA,0
#DEFINE RFIDENABLE PORTD,4
#DEFINE FLAG _B#VR1,1
#DEFINE SD_FIRST 0
#DEFINE SD_NEXT 1
#DEFINE SD_PREVIOUS 2
#DEFINE SD_SPI_FOSC_64 2
#DEFINE SD_SPI_FOSC_16 1
#DEFINE SD_SPI_FOSC_04 0
#DEFINE __XTAL 4
#DEFINE __LCD_TYPE 0
#DEFINE __LCD_DTPIN 0
#DEFINE __LCD_ENPIN 6
#DEFINE __LCD_RSPIN 7
#DEFINE __LCD_INTERFACE 4
#DEFINE __LCD_LINES 2
#DEFINE __HSERIAL_BAUD 9600
#DEFINE __HSERIAL_RCSTA 144
#DEFINE __HSERIAL_TXSTA 32
#DEFINE BUA 40016
#DEFINE BUAH 156
#DEFINE UPA_L 0
#DEFINE UPA_H 1
#DEFINE NOU 2
#DEFINE TAGOFFSET 4
#DEFINE SHA 16
#DEFINE SMA 928
#DEFINE SMAH 3
#DEFINE MUH 228
#DEFINE MMH 10
HSERIAL_SPBRG = 6
HSERIAL_TXSTA = 32
HSERIAL_RCSTA = 144
HSERIAL_BAUD = 9600
PROTON#CODE#START
        ORG 0
        GOTO PROTON#MAIN#START
        ORG 8
T@EB
        CLRF 17
T@EW
        CLRF 21
T@E
        MOVWF 20
        MOVLW 2
        BRA T@ST
T@GE
        MOVWF 20
        MOVLW 3
T@ST
        MOVWF 6
        MOVF 21,W
        SUBWF 17,W
        BNZ CN@EQ
        MOVF 20,W
        SUBWF 16,W
CN@EQ
        MOVLW 4
        BTFSC 4056,0
        MOVLW 1
        BTFSC 4056,2
        MOVLW 2
        ANDWF 6,W
        BTFSS 4056,2
        MOVLW 1
        RETURN
LCD@CLS
        MOVLW 128
        MOVWF 1
CLS
        MOVLW 254
        CALL CH@SND
        MOVLW 1
        CALL CH@SND
        MOVLW 117
        MOVWF 17
        MOVLW 48
        GOTO DLUS@W
LCD@CRS
        CLRF 1
        BSF 1,7
CURS@
        MOVWF 31
        MOVLW 254
        CALL CH@SND
        MOVF 31,W
        GOTO CH@SND
SB@STROUT
        MOVWF 24
SB@STROUTLP
        MOVF 4,W
        BTFSC 4056,2
        RETURN
        MOVFF 24,4073
        MOVFF 25,4074
        MOVF 4079,W
        BTFSC 4056,2
        RETURN
        CALL CH@SND
        INFSNZ 24,F
        INCF 25,F
        DECF 4,F
        BRA SB@STROUTLP
PRINT@MSTR
PRINT@MSTRL
        CLRF 4006
        BSF 4006,PP_EEPGD
PRT@MTL1
        TBLRD*+
        MOVF 4085,W
        BZ PRT@MTEXT
        RCALL PRINT
        BRA PRT@MTL1
PRT@MTEXT
        RETURN
PRINT
        MOVWF 29
        BCF LATD,6
        NOP
        BCF LATD,7
        BCF TRISD,6
        BCF TRISD,7
        MOVLW 240
        ANDWF TRISD,F
        MOVF 29,W
        BTFSC 0,1
        GOTO PRT@1
        MOVLW 58
        MOVWF 17
        MOVLW 152
        CALL DLUS@W
        MOVLW 51
        MOVWF 28
        RCALL PR@LP
        MOVLW 19
        MOVWF 17
        MOVLW 136
        CALL DLUS@W
        RCALL PR@LP
        MOVLW 100
        CALL DL@US
        RCALL PR@LP
        MOVLW 100
        CALL DL@US
        MOVLW 34
        MOVWF 28
        RCALL PR@LP
        MOVLW 40
        RCALL PR@CM
        MOVLW 12
        RCALL PR@CM
        MOVLW 6
        RCALL PR@CM
        BSF 0,1
        MOVF 29,W
        BRA PRT@1
PR@CM
        BSF 0,0
PRT@1
        MOVWF 28
        BTFSS 0,0
        BRA PR@CC
        BCF LATD,7
        SUBLW 3
        BNC PR@SD
        RCALL PR@SD
        MOVLW 7
        MOVWF 17
        MOVLW 208
        CALL DLUS@W
        BSF 4056,0
        RETURN
PR@CC
        BSF 0,0
        SUBLW 254
        BZ PR@EX
        BSF LATD,7
PR@SD
        SWAPF 28,F
        BTFSS 0,0
PR@LP
        BCF 0,0
        BSF LATD,6
        MOVLW 240
        ANDWF PORTD,F
        MOVF 28,W
        ANDLW 15
        IORWF PORTD,F
        BCF LATD,6
        SWAPF 28,F
        BTFSC 0,0
        BRA PR@LP
        MOVLW 50
        CALL DL@US
        BSF 4056,0
PR@EX
        MOVF 29,W
        RETURN
HRSIN2
        BTFSC 4011,PP_OERR
        BCF 4011,PP_CREN
        BSF 4011,PP_CREN
        MOVFF 2,16
        MOVFF 5,17
        CLRF 20
        CLRF 21
HRI@L0
        NOP
        BRA $ + 2
HRI@L
        NOP
        BTFSC 3998,PP_RCIF
        BRA H@RSIN
        SETF 4072
        ADDWF 20,F
        ADDWFC 21,F
        ADDWFC 16,F
        ADDWFC 17,F
        BTFSS 4056,0
        RETURN
        INFSNZ 20,W
        INCFSZ 21,W
        BRA HRI@L0
        MOVLW 61
        MOVWF 20
        CLRF 21
        BRA HRI@L
HRSIN
        BTFSC 4011,PP_OERR
        BCF 4011,PP_CREN
        BSF 4011,PP_CREN
        BTFSS 3998,PP_RCIF
        BRA $ - 2
H@RSIN
        MOVF 4014,W
        BSF 4056,0
        RETURN
CH@SND
        BTFSC 1,7
        GOTO PRINT
EE@RD
        CLRF 4010
        MOVWF 4009
EE@RD@W
        CLRF 4006
        BSF 4006,PP_RD
        MOVF 4008,W
        INFSNZ 4009,F
        INCF 4010,F
        RETURN
EE@WR
        CLRF 4010
EE@WR@W
        MOVWF 4008
        CLRF 4006
        BSF 4006,PP_WREN
        MOVLW 85
        MOVWF 4007
        MOVLW 170
        MOVWF 4007
        BSF 4006,PP_WR
        BTFSC 4006,PP_WR
        BRA $ - 2
        BCF 4006,PP_WREN
        INFSNZ 4009,F
        INCF 4010,F
        RETURN
C@WRITE
        MOVWF 4085
        TBLWT*
        INCF 4086,W
        ANDLW 7
        BNZ CR@EXIT
        MOVLW 132
        MOVWF 4006
        MOVLW 85
        MOVWF 4007
        MOVLW 170
        MOVWF 4007
        BSF 4006,PP_WR
        BRA $ + 2
        BCF 4006,PP_WREN
CR@EXIT
        INFSNZ 4086,F
        INCF 4087,F
        RETURN
DL@MS
        CLRF 21
DLY@W
        MOVWF 20
DLY@P
        MOVLW 255
        ADDWF 20,F
        ADDWFC 21,F
        BRA $ + 2
        BTFSS 4056,0
        RETURN
        MOVLW 3
        MOVWF 17
        MOVLW 223
        RCALL DLUS@W
        BRA DLY@P
DL@US
        CLRF 17
DLUS@W
        ADDLW 233
        MOVWF 16
        MOVLW 252
        BNC $ + 12
        NOP
        NOP
        ADDWF 16,F
        BC $ - 4
        NOP
        ADDWF 16,F
        DECF 17,F
        BC $ - 12
        BTFSC 16,0
        BRA $ + 2
        BTFSS 16,1
        BRA $ + 6
        BRA $ + 2
        NOP
        RETURN
L@DIV
L@MOD
        MOVF 19,W
        XORWF 27,W
        ANDLW 128
        MOVWF 4084
        BTFSS 19,7
        BRA DIVS@32X32SKIP1
        BSF 4056,0
        MOVLW 0
        SUBFWB 16,F
        SUBFWB 17,F
        SUBFWB 18,F
        SUBFWB 19,F
DIVS@32X32SKIP1
        BTFSS 27,7
        BRA DIVS@32X32SKIP2
        BSF 4056,0
        MOVLW 0
        SUBFWB 24,F
        SUBFWB 25,F
        SUBFWB 26,F
        SUBFWB 27,F
DIVS@32X32SKIP2
        CLRF 20
        CLRF 21
        CLRF 22
        CLRF 23
        CLRF 40
        CLRF 41
        CLRF 42
        CLRF 43
        MOVF 27,W
        IORWF 26,W
        IORWF 25,W
        IORWF 24,W
        BZ DIVS@32X32SKIP5
        MOVLW 32
        MOVWF 4083
DIVS@32X32LOOP
        BCF 4056,0
        RLCF 16,F
        RLCF 17,F
        RLCF 18,F
        RLCF 19,F
        RLCF 40,F
        RLCF 41,F
        RLCF 42,F
        RLCF 43,F
        MOVF 24,W
        SUBWF 40,W
        MOVF 25,W
        SUBWFB 41,W
        MOVF 26,W
        SUBWFB 42,W
        MOVF 27,W
        SUBWFB 43,W
        BNC DIVS@32X32SKIP4
        MOVF 24,W
        SUBWF 40,F
        MOVF 25,W
        SUBWFB 41,F
        MOVF 26,W
        SUBWFB 42,F
        MOVF 27,W
        SUBWFB 43,F
        BSF 4056,0
DIVS@32X32SKIP4
        RLCF 20,F
        RLCF 21,F
        RLCF 22,F
        RLCF 23,F
        DECFSZ 4083,F
        BRA DIVS@32X32LOOP
DIVS@32X32SKIP5
        BTFSS 4084,7
        BRA DIVS@32X32EXIT
        BSF 4056,0
        MOVLW 0
        SUBFWB 20,F
        SUBFWB 21,F
        SUBFWB 22,F
        SUBFWB 23,F
DIVS@32X32EXIT
        MOVFF 20,16
        MOVFF 21,17
        MOVFF 22,18
        MOVFF 23,19
        MOVFF 40,24
        MOVFF 41,25
        MOVFF 42,26
        MOVFF 43,27
        RETURN
D@VD
        CLRF 25
        CLRF 24
D@VD2
        MOVLW 16
        MOVWF 4083
DV@LP
        RLCF 17,W
        RLCF 24,F
        RLCF 25,F
        MOVF 20,W
        SUBWF 24,W
        MOVF 21,W
        SUBWFB 25,W
        BNC D@K
        MOVF 20,W
        SUBWF 24,F
        MOVF 21,W
        SUBWFB 25,F
        BSF 4056,0
D@K
        RLCF 16,F
        RLCF 17,F
        DECFSZ 4083,F
        BRA DV@LP
        MOVF 16,W
        RETURN
AL@MUL
        MOVFF 19,43
        MOVFF 18,42
        MOVFF 17,41
        MOVFF 16,40
        MOVF 42,W
        MULWF 24
        MOVFF 4083,18
        MOVFF 4084,19
        MOVF 41,W
        MULWF 25
        MOVF 4083,W
        ADDWF 18,F
        MOVF 4084,W
        ADDWFC 19,F
        MOVF 40,W
        MULWF 26
        MOVF 4083,W
        ADDWF 18,F
        MOVF 4084,W
        ADDWFC 19,F
        MOVF 43,W
        MULWF 24
        MOVF 4083,W
        ADDWF 19,F
        MOVF 42,W
        MULWF 25
        MOVF 4083,W
        ADDWF 19,F
        MOVF 41,W
        MULWF 26
        MOVF 4083,W
        ADDWF 19,F
        MOVF 40,W
        MULWF 27
        MOVF 4083,W
        ADDWF 19,F
        MOVF 40,W
        MULWF 24
        MOVFF 4083,16
        MOVFF 4084,17
        MOVF 41,W
        MULWF 24
        MOVF 4083,W
        ADDWF 17,F
        MOVF 4084,W
        ADDWFC 18,F
        MOVLW 0
        ADDWFC 19,F
        MOVF 40,W
        MULWF 25
        MOVF 4083,W
        ADDWF 17,F
        MOVF 4084,W
        ADDWFC 18,F
        MOVLW 0
        ADDWFC 19,F
        RETURN
LOAD@MSTR
LOAD@MSTRL
        CLRF 4006
        BSF 4006,PP_EEPGD
        TBLRD*+
        MOVF 4085,W
        BZ $ + 6
        MOVWF 4078
        BRA $ - 8
        RETURN
INT@3232
        MOVFF 13,48
        MOVLW 127
        SUBWF 12,W
        MOVWF 47
        BNC FTO@I_RES0
        BSF 13,7
        CLRF 12
        CLRF 40
        SUBLW 23
        MOVWF 47
        BC FTO@I_1
        MOVLW 8
        ADDWF 47,F
        BNC FTO@I_OVERFLOW
        MOVFF 13,12
        MOVFF 14,13
        MOVFF 15,14
        CLRF 15
        BRA FTO@I_3
FTO@I_1
        MOVLW 8
        SUBWF 47,F
        BNC FTO@I_2
        MOVFF 15,40
        MOVFF 14,15
        MOVFF 13,14
        CLRF 13
        BRA FTO@I_1
FTO@I_2
        ADDWF 47,F
FTO@I_3
        MOVF 47,F
        BZ FTO@I_5
FTO@I_4
        BCF 4056,0
        RRCF 12,F
        RRCF 13,F
        RRCF 14,F
        RRCF 15,F
        RRCF 40,F
        DECFSZ 47,F
        BRA FTO@I_4
FTO@I_5
        BTFSC 12,7
        BRA FTO@I_OVERFLOW
        BTFSS 46,6
        BRA FTO@I_6
        BTFSS 40,7
        BRA FTO@I_6
        INCFSZ 15,F
        BRA FTO@I_6
        INCFSZ 14,F
        BRA FTO@I_6
        INCFSZ 13,F
        BRA FTO@I_6
        INCF 13,F
        BTFSC 12,7
        BRA FTO@I_OVERFLOW
FTO@I_6
        BTFSS 48,7
        BRA FTO@I_RET
        BSF 4056,0
        MOVLW 0
        SUBFWB 15,F
        SUBFWB 14,F
        SUBFWB 13,F
        SUBFWB 12,F
        BRA FTO@I_RET
FTO@I_RES0
        MOVLW 0
        BRA FTO@I_ASSIGNW
FTO@I_OVERFLOW
        BSF 46,1
        MOVLW 255
FTO@I_ASSIGNW
        MOVWF 12
        MOVWF 13
        MOVWF 14
        MOVWF 15
        BCF 12,7
FTO@I_RET
        MOVF 15,W
        RETURN
STR@LB1
        DB 32,32,32,32,32,32,32,32,0
STR@LB2
        DB 68,101,116,101,99,116,101,100,33,0
STR@LB3
        DB 83,116,97,114,116,105,110,103,46,46,46,0
STR@LB4
        DB 67,104,101,99,107,105,110,103,0
STR@LB5
        DB 71,111,116,32,97,32,109,97,116,99,104,0
STR@LB6
        DB 78,111,32,77,97,116,99,104,0
STR@LB7
        DB 65,84,84,69,77,80,84,73,78,71,32,84,79,0
STR@LB8
        DB 82,69,65,68,32,84,65,71,46,46,46,46,0
STR@LB9
        DB 78,111,32,84,97,103,32,68,101,116,101,99,116,101,100,0
STR@LB10
        DB 70,105,108,101,32,110,111,116,32,102,111,117,110,100,0
STR@LB11
        DB 79,112,101,110,101,100,0
STR@LB12
        DB 78,111,32,53,69,32,40,94,41,0
STR@LB13
        DB 83,116,111,112,112,101,100,33,0
STR@LB14
        DB 94,32,80,114,111,98,108,101,109,46,46,0
STR@LB15
        DB 78,111,32,51,65,32,40,58,41,46,46,0
STR@LB16
        DB 83,116,111,112,112,101,100,33,0
STR@LB17
        DB 77,97,110,97,103,101,114,32,68,111,110,101,0
STR@LB18
        DB 70,105,108,101,32,110,111,116,32,102,111,117,110,100,0
STR@LB19
        DB 82,101,97,100,121,32,116,111,32,73,110,105,116,0
STR@LB20
        DB 73,110,105,116,32,71,111,111,100,0
STR@LB21
        DB 78,111,32,73,110,105,116,33,0
STR@LB22
        DB 78,111,32,85,115,101,114,115,0
STR@LB23
        DB 89,101,83,32,70,79,82,32,104,0
STR@LB24
        DB 77,32,70,105,108,101,32,69,120,105,115,116,115,0
STR@LB25
        DB 78,111,32,77,97,110,97,103,101,114,32,72,105,115,116,111,114,121,0
PROTON#MAIN#START
        CLRF 4088
        MOVLW 64
        MOVWF 46
        CLRF 0
        MOVLW 6
        MOVWF 4015
        MOVLW 32
        MOVWF 4012
        MOVLW 144
        MOVWF 4011
F2_SOF EQU $ ; V2.0 RFID 2ND GENERATION.PRP
F3_SOF EQU $ ; V2.0 RFID 2ND GENERATION_FWD.PBP
F3_EOF EQU $ ; V2.0 RFID 2ND GENERATION_FWD.PBP
F4_SOF EQU $ ; V2.0 RFID 2ND GENERATION_LIB.PBP
F4_000001 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO OVERLIBCODE
        F@JUMP OVERLIBCODE
SD_WRITE_SUB
F4_000109 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_BUFFER_IDX > $FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL2
F4_000110 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER1[SD_BUFFER_IDX - $100] = SD_BYTE_RW
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTE_RW,INDF0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL3
BC@LL2
F4_000111 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000112 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER0[SD_BUFFER_IDX] = SD_BYTE_RW
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTE_RW,INDF0
F4_000113 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL3
        MOVLB 0
RAM_BANK = 0
F4_000114 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IS_DIRTY = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_IS_DIRTY
F4_000115 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_BUFFER_IDX = $1FF THEN
        INCF SD_BUFFER_IDX,W
        MOVLW 1
        BTFSC STATUS,2,0
        XORWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL5
F4_000116 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] REPEAT
BC@LL6
F4_000117 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000118 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] UNTIL SD_RETURN = 0
        MOVF SD_RETURN,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL6
BC@LL7
F4_000119 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IS_DIRTY = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_IS_DIRTY
F4_000120 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_IDX = 0
        CLRF SD_BUFFER_IDXH
        CLRF SD_BUFFER_IDX
F4_000121 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_SECTOR_NUM
        INCF SD_SECTOR_NUM,F,0
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,F,0
        ADDWFC SD_SECTOR_NUMHH,F,0
        ADDWFC SD_SECTOR_NUMHHH,F,0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL8
BC@LL5
F4_000122 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000123 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_IDX = SD_BUFFER_IDX + 1
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_BUFFER_IDX,F
        INCF SD_BUFFER_IDXH,F
F4_000124 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL8
        MOVLB 0
RAM_BANK = 0
F4_000125 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_SECTOR_SUB
F4_000128 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_IDX = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_IDXH
        CLRF SD_BUFFER_IDX
F4_000129 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_RW_OPTION = 0 THEN
        MOVF SD_RW_OPTION,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL10
F4_000130 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB12
F4_000131 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER0[SD_IDX] = 0
        LFSR 0,SD_BUFFER0
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        CLRF INDF0,0
F4_000132 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER1[SD_IDX] = 0
        LFSR 0,SD_BUFFER1
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        CLRF INDF0,0
F4_000133 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB12
NX@LB13
        F@JUMP BC@LL13
BC@LL10
F4_000134 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000135 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_SECTOR
        F@CALL SD_READ_SECTOR
F4_000136 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL13
F4_000137 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_SEEK_RESPONSE
F4_000151 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] REPEAT
BC@LL14
F4_000152 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000153 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] DEC SD_SEEK_RESPONSE_IDX
        DECF SD_SEEK_RESPONSE_IDX,F,0
        MOVLW 0
        SUBWFB SD_SEEK_RESPONSE_IDXH,F,0
F4_000154 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] UNTIL SD_BYTER = SD_SEEK_RESPONSE_REQD OR SD_SEEK_RESPONSE_IDX = 0
        MOVFF SD_BYTER,PP0
        MOVF SD_SEEK_RESPONSE_REQD,W,0
        F@CALL T@EB
        MOVWF SP#P9,0
        MOVF SD_SEEK_RESPONSE_IDXH,W,0
        IORWF SD_SEEK_RESPONSE_IDX,W,0
        BTFSC STATUS,2,0
        GO@TO CP@LB4
        MOVLW 0
        BRA $ + 4
CP@LB4
        MOVLW 1
        IORWF SP#P9,F,0
        BTFSC STATUS,2,0
        GO@TO BC@LL14
BC@LL15
F4_000155 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEEK_RESPONSE_IDX = 0 THEN
        MOVF SD_SEEK_RESPONSE_IDXH,W,0
        IORWF SD_SEEK_RESPONSE_IDX,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL17
F4_000156 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_RETURN = 1
        MOVLW 1
        MOVWF SD_SEEK_RESPONSE_RETURN,0
        F@JUMP BC@LL18
BC@LL17
F4_000157 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000158 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_RETURN = 0
        CLRF SD_SEEK_RESPONSE_RETURN,0
F4_000159 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL18
F4_000160 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_WRITE_SECTOR
F4_000163 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TIMEOUT = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_TIMEOUT
F4_000164 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
SD_WRITE_SECTOR_START
        MOVLB 0
RAM_BANK = 0
F4_000166 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ADDRESS = SD_SECTOR_NUM << 9
        BCF STATUS,0,0
        CLRF SD_ADDRESS,0
        RLCF SD_SECTOR_NUM,W,0
        MOVWF SD_ADDRESSH,0
        RLCF SD_SECTOR_NUMH,W,0
        MOVWF SD_ADDRESSHH,0
        RLCF SD_SECTOR_NUMHH,W,0
        MOVWF SD_ADDRESSHHH,0
F4_000168 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] LOW SD_CS
        BCF TRISC,2,0
        BCF PORTC,2,0
F4_000169 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE0 = $58
        MOVLW 88
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000170 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE1 = SD_ADDRESS.BYTE3
        MOVFF SD_ADDRESSHHH,SD_BYTE1
F4_000171 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE2 = SD_ADDRESS.BYTE2
        MOVFF SD_ADDRESSHH,SD_BYTE2
F4_000172 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE3 = SD_ADDRESS.BYTE1
        MOVFF SD_ADDRESSH,SD_BYTE3
F4_000173 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE4 = SD_ADDRESS.BYTE0
        MOVFF SD_ADDRESS,SD_BYTE4
F4_000174 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000175 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_REQD = $00
        CLRF SD_SEEK_RESPONSE_REQD,0
F4_000176 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDXH,0
        SETF SD_SEEK_RESPONSE_IDX,0
F4_000177 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000178 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000179 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_WRITE_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL20
        F@JUMP SD_WRITE_SECTOR_ERROR
BC@LL20
F4_000181 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FE
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE5
F4_000182 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000184 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB22
F4_000185 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = SD_BUFFER0[SD_IDX]
        LFSR 0,SD_BUFFER0
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE5
F4_000186 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000187 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB22
NX@LB23
F4_000188 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB24
F4_000189 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = SD_BUFFER1[SD_IDX]
        LFSR 0,SD_BUFFER1
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE5
F4_000190 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000191 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB24
NX@LB25
F4_000193 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE5
F4_000194 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000195 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_BYTE
        F@CALL SD_SEND_BYTE
F4_000197 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_REQD = $FF
        SETF SD_SEEK_RESPONSE_REQD,0
F4_000198 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDXH,0
        SETF SD_SEEK_RESPONSE_IDX,0
F4_000199 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000200 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TEMP_BYTE = SD_BYTER
        MOVFF SD_BYTER,SD_TEMP_BYTE
F4_000201 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000202 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TEMP_BYTE = SD_TEMP_BYTE & $0F
        MOVLW 15
        MOVLB 2
RAM_BANK = 2
        ANDWF SD_TEMP_BYTE,F
F4_000203 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_TEMP_BYTE <> $05 THEN GOTO SD_WRITE_SECTOR_ERROR
        MOVLW 5
        SUBWF SD_TEMP_BYTE,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL26
        F@JUMP SD_WRITE_SECTOR_ERROR
BC@LL26
F4_000204 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_WRITE_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL28
        F@JUMP SD_WRITE_SECTOR_ERROR
BC@LL28
F4_000205 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN = 0
        CLRF SD_RETURN,0
F4_000206 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000207 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO SD_WRITE_SECTOR_END
        F@JUMP SD_WRITE_SECTOR_END
SD_WRITE_SECTOR_ERROR
F4_000209 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000210 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TIMEOUT = SD_TIMEOUT + 1
        MOVLB 2
RAM_BANK = 2
        INCF SD_TIMEOUT,F
F4_000211 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_TIMEOUT < $03 THEN
        MOVLW 3
        SUBWF SD_TIMEOUT,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL30
F4_000212 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO SD_WRITE_SECTOR_START
        F@JUMP SD_WRITE_SECTOR_START
F4_000213 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL30
SD_WRITE_SECTOR_END
F4_000215 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_READ_SECTOR
F4_000218 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TIMEOUT = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_TIMEOUT
F4_000219 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
SD_READ_SECTOR_START
        MOVLB 0
RAM_BANK = 0
F4_000221 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ADDRESS = SD_SECTOR_NUM << 9
        BCF STATUS,0,0
        CLRF SD_ADDRESS,0
        RLCF SD_SECTOR_NUM,W,0
        MOVWF SD_ADDRESSH,0
        RLCF SD_SECTOR_NUMH,W,0
        MOVWF SD_ADDRESSHH,0
        RLCF SD_SECTOR_NUMHH,W,0
        MOVWF SD_ADDRESSHHH,0
F4_000223 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] LOW SD_CS
        BCF TRISC,2,0
        BCF PORTC,2,0
F4_000224 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE0 = $51
        MOVLW 81
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000225 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE1 = SD_ADDRESS.BYTE3
        MOVFF SD_ADDRESSHHH,SD_BYTE1
F4_000226 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE2 = SD_ADDRESS.BYTE2
        MOVFF SD_ADDRESSHH,SD_BYTE2
F4_000227 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE3 = SD_ADDRESS.BYTE1
        MOVFF SD_ADDRESSH,SD_BYTE3
F4_000228 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE4 = SD_ADDRESS.BYTE0
        MOVFF SD_ADDRESS,SD_BYTE4
F4_000229 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000230 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000231 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_REQD = $00
        CLRF SD_SEEK_RESPONSE_REQD,0
F4_000232 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDXH,0
        SETF SD_SEEK_RESPONSE_IDX,0
F4_000233 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000234 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_READ_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL32
        F@JUMP SD_READ_SECTOR_ERROR
BC@LL32
F4_000236 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_REQD = $FE
        MOVLW 254
        MOVWF SD_SEEK_RESPONSE_REQD,0
F4_000237 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDXH,0
        SETF SD_SEEK_RESPONSE_IDX,0
F4_000238 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000239 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_READ_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL34
        F@JUMP SD_READ_SECTOR_ERROR
BC@LL34
F4_000241 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB36
F4_000242 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000243 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER0[SD_IDX] = SD_BYTER
        LFSR 0,SD_BUFFER0
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTER,INDF0
F4_000244 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB36
NX@LB37
F4_000245 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB38
F4_000246 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000247 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER1[SD_IDX] = SD_BYTER
        LFSR 0,SD_BUFFER1
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTER,INDF0
F4_000248 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB38
NX@LB39
F4_000250 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000251 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000252 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000253 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE5
F4_000254 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000255 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN = 0
        CLRF SD_RETURN,0
F4_000256 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO SD_READ_SECTOR_END
        F@JUMP SD_READ_SECTOR_END
SD_READ_SECTOR_ERROR
F4_000258 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000259 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TIMEOUT = SD_TIMEOUT + 1
        MOVLB 2
RAM_BANK = 2
        INCF SD_TIMEOUT,F
F4_000260 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_TIMEOUT < $03 THEN
        MOVLW 3
        SUBWF SD_TIMEOUT,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL40
F4_000261 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO SD_READ_SECTOR_START
        F@JUMP SD_READ_SECTOR_START
F4_000262 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL40
SD_READ_SECTOR_END
F4_000264 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_READ_FAT_ENTRY
F4_000267 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_BUFFER_POS > $0FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL42
F4_000268 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_ENTRY.BYTE0 = SD_BUFFER1[SD_BUFFER_POS - $100]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_POS,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRY
F4_000269 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_ENTRY.BYTE1 = SD_BUFFER1[SD_BUFFER_POS + 1 - $100]
        MOVLW 1
        ADDWF SD_BUFFER_POS,W
        MOVWF PP7,0
        MOVLW 0
        ADDWFC SD_BUFFER_POSH,W
        MOVWF PP7H,0
        MOVF PP7,W,0
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRYH
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL43
BC@LL42
F4_000270 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000271 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_ENTRY.BYTE0 = SD_BUFFER0[SD_BUFFER_POS]
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_POS,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRY
F4_000272 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_ENTRY.BYTE1 = SD_BUFFER0[SD_BUFFER_POS + 1]
        INCF SD_BUFFER_POS,W
        LFSR 0,SD_BUFFER0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRYH
F4_000273 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL43
        MOVLB 0
RAM_BANK = 0
F4_000274 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_FIND_FREE_CLUSTER
F4_000277 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TEMP_DWORD = SD_FAT1 + SD_SECS_PER_FAT - 1
        MOVLB 2
RAM_BANK = 2
        MOVF SD_SECS_PER_FAT,W
        ADDWF SD_FAT1,W
        MOVWF PP7,0
        MOVF SD_SECS_PER_FATH,W
        ADDWFC SD_FAT1H,W
        MOVWF PP7H,0
        MOVLW 0
        ADDWFC SD_FAT1HH,W
        MOVWF PP7HH,0
        MOVLW 0
        ADDWFC SD_FAT1HHH,W
        MOVWF PP7HHH,0
        DECF PP7,W,0
        MOVWF SD_TEMP_DWORD
        MOVLW 0
        SUBWFB PP7H,W,0
        MOVWF SD_TEMP_DWORDH
        MOVLW 0
        SUBWFB PP7HH,W,0
        MOVWF SD_TEMP_DWORDHH
        MOVLW 0
        SUBWFB PP7HHH,W,0
        MOVWF SD_TEMP_DWORDHHH
F4_000278 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_SEC_NUM = (SD_FAT_SEC + SD_FAT1) TO SD_TEMP_DWORD
        MOVF SD_FAT1,W
        ADDWF SD_FAT_SEC,W
        MOVWF SD_SEC_NUM
        MOVF SD_FAT1H,W
        ADDWFC SD_FAT_SECH,W
        MOVWF SD_SEC_NUMH
        MOVF SD_FAT1HH,W
        ADDWFC SD_FAT_SECHH,W
        MOVWF SD_SEC_NUMHH
        MOVF SD_FAT1HHH,W
        ADDWFC SD_FAT_SECHHH,W
        MOVWF SD_SEC_NUMHHH
FR@LB45
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_SEC_NUM,W
        SUBWF SD_TEMP_DWORD,W
        MOVF SD_SEC_NUMH,W
        SUBWFB SD_TEMP_DWORDH,W
        MOVF SD_SEC_NUMHH,W
        SUBWFB SD_TEMP_DWORDHH,W
        MOVF SD_SEC_NUMHHH,W
        SUBWFB SD_TEMP_DWORDHHH,W
        MOVF SD_SEC_NUMHHH,W
        XORWF SD_TEMP_DWORDHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO NX@LB46
F4_000279 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_SEC_NUM
        MOVFF SD_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_SEC_NUM,SD_SECTOR_NUM
F4_000280 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_000281 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000283 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_BUFFER_POS = $0000 TO $1FF STEP 2
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_POSH
        CLRF SD_BUFFER_POS
FR@LB47
        MOVLB 0
RAM_BANK = 0
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB48
F4_000284 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEC_NUM > (SD_FAT_SEC + SD_FAT1) OR SD_BUFFER_POS >= (SD_FAT_BUFFER_POS + (2 * SD_CLUSTER_SEQ_NUM)) THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        ADDWF SD_FAT_SEC,W
        MOVWF PBP#VAR0,0
        MOVF SD_FAT1H,W
        ADDWFC SD_FAT_SECH,W
        MOVWF PBP#VAR0H,0
        MOVF SD_FAT1HH,W
        ADDWFC SD_FAT_SECHH,W
        MOVWF PBP#VAR0HH,0
        MOVF SD_FAT1HHH,W
        ADDWFC SD_FAT_SECHHH,W
        MOVWF PBP#VAR0HHH,0
        MOVF SD_SEC_NUM,W
        SUBWF PBP#VAR0,W,0
        MOVF SD_SEC_NUMH,W
        SUBWFB PBP#VAR0H,W,0
        MOVF SD_SEC_NUMHH,W
        SUBWFB PBP#VAR0HH,W,0
        MOVF SD_SEC_NUMHHH,W
        SUBWFB PBP#VAR0HHH,W,0
        MOVF SD_SEC_NUMHHH,W
        XORWF PBP#VAR0HHH,W,0
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO CP@LB9
        MOVLW 0
        BRA $ + 4
CP@LB9
        MOVLW 1
        MOVWF SP#P9,0
        BCF STATUS,0,0
        MOVLB 2
RAM_BANK = 2
        RLCF SD_CLUSTER_SEQ_NUM,W
        MOVWF PP7,0
        RLCF SD_CLUSTER_SEQ_NUMH,W
        MOVWF PP7H,0
        MOVF PP7,W,0
        ADDWF SD_FAT_BUFFER_POS,W
        MOVWF PBP#VAR0,0
        MOVF PP7H,W,0
        ADDWFC SD_FAT_BUFFER_POSH,W
        MOVWF PBP#VAR0H,0
        MOVFF SD_BUFFER_POSH,PP0H
        MOVFF SD_BUFFER_POS,PP0
        MOVFF PBP#VAR0H,PP1H
        MOVF PBP#VAR0,W,0
        F@CALL T@GE
        IORWF SP#P9,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL49
F4_000285 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000286 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_FAT_ENTRY = $0000 THEN GOTO SD_STORE_FAT_POSITION
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_ENTRYH,W
        IORWF SD_FAT_ENTRY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL51
        F@JUMP SD_STORE_FAT_POSITION
BC@LL51
F4_000287 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL49
F4_000288 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_BUFFER_POS
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_BUFFER_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB47
        MOVLB 2
RAM_BANK = 2
        INCF SD_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB47
NX@LB48
F4_000289 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_SEC_NUM
        MOVLB 2
RAM_BANK = 2
        INCF SD_SEC_NUM,F
        MOVLW 0
        ADDWFC SD_SEC_NUMH,F
        ADDWFC SD_SEC_NUMHH,F
        ADDWFC SD_SEC_NUMHHH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB45
NX@LB46
F4_000290 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000291 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_STORE_FAT_POSITION
F4_000293 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = SD_SEC_NUM - SD_FAT1
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        SUBWF SD_SEC_NUM,W
        MOVWF SD_FAT_SEC
        MOVF SD_FAT1H,W
        SUBWFB SD_SEC_NUMH,W
        MOVWF SD_FAT_SECH
        MOVF SD_FAT1HH,W
        SUBWFB SD_SEC_NUMHH,W
        MOVWF SD_FAT_SECHH
        MOVF SD_FAT1HHH,W
        SUBWFB SD_SEC_NUMHHH,W
        MOVWF SD_FAT_SECHHH
F4_000294 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_BUFFER_POS
        MOVFF SD_BUFFER_POSH,SD_FAT_BUFFER_POSH
        MOVFF SD_BUFFER_POS,SD_FAT_BUFFER_POS
F4_000295 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_SEC * $100)
        MOVFF SD_FAT_SEC,SD_CLUSTER_NUMH
        CLRF SD_CLUSTER_NUM
F4_000296 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_BUFFER_POS / 2) + SD_CLUSTER_NUM
        BCF STATUS,0,0
        RRCF SD_FAT_BUFFER_POSH,W
        MOVWF PP7H,0
        RRCF SD_FAT_BUFFER_POS,W
        MOVWF PP7,0
        MOVF PP7,W,0
        ADDWF SD_CLUSTER_NUM,F
        MOVF PP7H,W,0
        ADDWFC SD_CLUSTER_NUMH,F
F4_000297 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_NUM = 0
        CLRF SD_CLUSTER_SEQ_NUMH
        CLRF SD_CLUSTER_SEQ_NUM
F4_000298 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_BUFFER_POS = SD_FAT_BUFFER_POS TO $1FF STEP 2
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
FR@LB53
        MOVLB 0
RAM_BANK = 0
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB54
F4_000299 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000300 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_FAT_ENTRY = $0000 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_ENTRYH,W
        IORWF SD_FAT_ENTRY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL55
F4_000301 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_CLUSTER_SEQ_NUM
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_CLUSTER_SEQ_NUM,F
        INCF SD_CLUSTER_SEQ_NUMH,F
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL56
BC@LL55
F4_000302 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000303 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO SD_STORE_CLUSTER_SEQ
        F@JUMP SD_STORE_CLUSTER_SEQ
F4_000304 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL56
F4_000305 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_BUFFER_POS
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_BUFFER_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB53
        MOVLB 2
RAM_BANK = 2
        INCF SD_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB53
NX@LB54
SD_STORE_CLUSTER_SEQ
F4_000307 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_IDX = 1
        MOVLB 2
RAM_BANK = 2
        CLRF SD_CLUSTER_SEQ_IDXH
        MOVLW 1
        MOVWF SD_CLUSTER_SEQ_IDX
F4_000308 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_000309 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_MODIFY_FILE_NAME
F4_000312 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NULL_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NULL_F
F4_000313 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB58
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB59
F4_000314 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_NULL_F = 1 OR SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] = 0 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_NULL_F,W
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 1
        MOVF PBP#VAR0,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL60
F4_000315 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] = $20
        MOVLW 32
        MOVWF PRODL,0
        LFSR 0,SD_FILE_NAME
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PRODL,PLUSW0
F4_000316 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVWF SD_NULL_F
F4_000317 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL60
        MOVLB 0
RAM_BANK = 0
F4_000318 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB58
NX@LB59
F4_000319 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NULL_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NULL_F
F4_000320 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB62
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB63
F4_000321 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_NULL_F = 1 OR SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] = 0 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_NULL_F,W
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVLW 8
        SUBWF SD_ROOT_DIR_FILE_POS,W
        LFSR 0,SD_FILE_EXT
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 1
        MOVF PBP#VAR0,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL64
F4_000322 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] = $20
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        ADDLW SD_FILE_EXT
        MOVWF FSR0L,0
        MOVLW SD_FILE_EXT >> 8
        CLRF FSR0H,0
        ADDWFC FSR0H,F,0
        MOVLW 32
        MOVWF INDF0,0
F4_000323 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVWF SD_NULL_F
F4_000324 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL64
        MOVLB 0
RAM_BANK = 0
F4_000325 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB62
NX@LB63
F4_000326 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_FIND_ROOT_DIR_ENTRY
F4_000329 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_MODIFY_FILE_NAME
        F@CALL SD_MODIFY_FILE_NAME
F4_000330 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_ROOT_ENTRIES = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NUM_OF_ROOT_ENTRIESH
        CLRF SD_NUM_OF_ROOT_ENTRIES
F4_000331 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TEMP_DWORD = SD_ROOT_DIR + SD_SECS_IN_ROOT - 1
        MOVF SD_SECS_IN_ROOT,W
        ADDWF SD_ROOT_DIR,W
        MOVWF PP7,0
        MOVF SD_SECS_IN_ROOTH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF PP7H,0
        MOVLW 0
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF PP7HH,0
        MOVLW 0
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF PP7HHH,0
        DECF PP7,W,0
        MOVWF SD_TEMP_DWORD
        MOVLW 0
        SUBWFB PP7H,W,0
        MOVWF SD_TEMP_DWORDH
        MOVLW 0
        SUBWFB PP7HH,W,0
        MOVWF SD_TEMP_DWORDHH
        MOVLW 0
        SUBWFB PP7HHH,W,0
        MOVWF SD_TEMP_DWORDHHH
F4_000332 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_SEC_NUM = SD_ROOT_DIR TO SD_TEMP_DWORD
        MOVFF SD_ROOT_DIRHHH,SD_SEC_NUMHHH
        MOVFF SD_ROOT_DIRHH,SD_SEC_NUMHH
        MOVFF SD_ROOT_DIRH,SD_SEC_NUMH
        MOVFF SD_ROOT_DIR,SD_SEC_NUM
FR@LB66
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_SEC_NUM,W
        SUBWF SD_TEMP_DWORD,W
        MOVF SD_SEC_NUMH,W
        SUBWFB SD_TEMP_DWORDH,W
        MOVF SD_SEC_NUMHH,W
        SUBWFB SD_TEMP_DWORDHH,W
        MOVF SD_SEC_NUMHHH,W
        SUBWFB SD_TEMP_DWORDHHH,W
        MOVF SD_SEC_NUMHHH,W
        XORWF SD_TEMP_DWORDHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO NX@LB67
F4_000333 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_SEC_NUM
        MOVFF SD_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_SEC_NUM,SD_SECTOR_NUM
F4_000334 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_000335 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000337 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_BUFFER_POS = $000 TO $1FF STEP 32
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_POSH
        CLRF SD_BUFFER_POS
FR@LB68
        MOVLB 0
RAM_BANK = 0
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB69
F4_000338 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = 0 TO 31
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB70
        MOVLB 0
RAM_BANK = 0
        MOVLW 32
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB71
F4_000339 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_TEMP = SD_BUFFER_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_BUFFER_POS,W
        MOVWF SD_TEMP
        MOVLW 0
        ADDWFC SD_BUFFER_POSH,W
        MOVWF SD_TEMPH
F4_000340 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_TEMP > $0FF THEN
        MOVLW 1
        SUBWF SD_TEMPH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL72
F4_000341 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] = SD_BUFFER1[SD_TEMP - $100]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_TEMP,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF INDF0,PBP#VAR0
        LFSR 0,SD_ROOT_DIR_FILE
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PBP#VAR0,PLUSW0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL73
BC@LL72
F4_000342 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000343 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] = SD_BUFFER0[SD_TEMP]
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_TEMP,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF INDF0,PBP#VAR0
        LFSR 0,SD_ROOT_DIR_FILE
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PBP#VAR0,PLUSW0
F4_000344 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL73
        MOVLB 0
RAM_BANK = 0
F4_000345 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB70
NX@LB71
F4_000346 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SELECT SD_FIND_ROOT_DIR_ENTRY_F
F4_000347 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] CASE 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FIND_ROOT_DIR_ENTRY_F,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL75
F4_000348 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_ROOT_DIR_FILE[0] = $00 OR SD_ROOT_DIR_FILE[0] = $E5 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVLW 1
        MOVF PBP#VAR0,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVLW 229
        SUBWF PBP#VAR0,W,0
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL78
F4_000349 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO SD_STORE_ROOT_DIRECT_POSITION
        F@JUMP SD_STORE_ROOT_DIRECT_POSITION
F4_000350 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL78
        F@JUMP BC@LL74
BC@LL75
F4_000351 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] CASE 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_FIND_ROOT_DIR_ENTRY_F,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL80
F4_000352 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NULL_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NULL_F
F4_000353 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB82
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB83
F4_000354 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] <> SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] THEN
        LFSR 0,SD_ROOT_DIR_FILE
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
        MOVF PBP#VAR0,W,0
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL84
F4_000355 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_NULL_F
F4_000356 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BREAK
        MOVLB 0
RAM_BANK = 0
        F@JUMP NX@LB83
F4_000357 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL84
F4_000358 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB82
NX@LB83
F4_000359 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB86
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB87
F4_000360 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] <> SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] THEN
        LFSR 0,SD_ROOT_DIR_FILE
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 8
        SUBWF SD_ROOT_DIR_FILE_POS,W
        LFSR 0,SD_FILE_EXT
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
        MOVF PBP#VAR0,W,0
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL88
F4_000361 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_NULL_F
F4_000362 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BREAK
        MOVLB 0
RAM_BANK = 0
        F@JUMP NX@LB87
F4_000363 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL88
F4_000364 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB86
NX@LB87
F4_000365 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_NULL_F = 0 THEN GOTO SD_STORE_ROOT_DIRECT_POSITION
        MOVLB 2
RAM_BANK = 2
        MOVF SD_NULL_F,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL90
        F@JUMP SD_STORE_ROOT_DIRECT_POSITION
BC@LL90
        F@JUMP BC@LL74
BC@LL80
F4_000366 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] CASE 2
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_FIND_ROOT_DIR_ENTRY_F,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL92
F4_000367 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_ROOT_DIR_FILE[$0B] | %11110000 <> $FF THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#11,W
        MOVWF PBP#VAR1,0
        MOVLW 240
        IORWF PBP#VAR1,W,0
        MOVWF PBP#VAR0,0
        CLRF PBP#VAR0H,0
        INCF PBP#VAR0,W,0
        IORWF PBP#VAR0H,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL94
F4_000368 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_ROOT_DIR_FILE[$00] <> $00 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVF PBP#VAR0,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL96
F4_000369 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_ROOT_DIR_FILE[$00] <> $E5 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVLW 229
        SUBWF PBP#VAR0,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL98
F4_000370 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_ROOT_DIR_FILE[$0B] & %00011110 = 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#11,W
        MOVWF PBP#VAR1,0
        MOVLW 30
        ANDWF PBP#VAR1,W,0
        CLRF PBP#VAR0H,0
        MOVWF PBP#VAR0,0
        MOVF PBP#VAR0H,W,0
        IORWF PBP#VAR0,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL100
F4_000371 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_NUM_OF_ROOT_ENTRIES
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_NUM_OF_ROOT_ENTRIES,F
        INCF SD_NUM_OF_ROOT_ENTRIESH,F
F4_000372 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_NUM_OF_ROOT_ENTRIES = SD_FILE_NUM THEN
        MOVF SD_FILE_NUMH,W
        SUBWF SD_NUM_OF_ROOT_ENTRIESH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL102
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_NUM,W
        SUBWF SD_NUM_OF_ROOT_ENTRIES,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL102
F4_000373 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB104
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB105
F4_000374 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] = SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS]
        LFSR 0,SD_ROOT_DIR_FILE
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PLUSW0,PBP#VAR0
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PBP#VAR0,PLUSW0
F4_000375 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB104
NX@LB105
F4_000376 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB106
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB107
F4_000377 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] = SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS]
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVWF PBP#VAR0,0
        LFSR 0,SD_ROOT_DIR_FILE
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PLUSW0,PBP#VAR1
        LFSR 0,SD_FILE_EXT
        MOVF PBP#VAR0,W,0
        MOVFF PBP#VAR1,PLUSW0
F4_000378 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB106
NX@LB107
F4_000379 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOTO SD_STORE_ROOT_DIRECT_POSITION
        F@JUMP SD_STORE_ROOT_DIRECT_POSITION
F4_000380 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL102
F4_000381 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL100
F4_000382 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL98
F4_000383 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL96
F4_000384 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL94
F4_000385 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDSELECT
BC@LL92
BC@LL74
F4_000386 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_BUFFER_POS
        MOVLW 32
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_BUFFER_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB68
        MOVLB 2
RAM_BANK = 2
        INCF SD_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB68
NX@LB69
F4_000387 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_SEC_NUM
        MOVLB 2
RAM_BANK = 2
        INCF SD_SEC_NUM,F
        MOVLW 0
        ADDWFC SD_SEC_NUMH,F
        ADDWFC SD_SEC_NUMHH,F
        ADDWFC SD_SEC_NUMHHH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB66
NX@LB67
F4_000388 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN_ROOT_DIR = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN_ROOT_DIR
F4_000389 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_STORE_ROOT_DIRECT_POSITION
F4_000391 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ROOT_DIR_SEC = SD_SEC_NUM - SD_ROOT_DIR
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR,W
        SUBWF SD_SEC_NUM,W
        MOVWF SD_ROOT_DIR_SEC
        MOVF SD_ROOT_DIRH,W
        SUBWFB SD_SEC_NUMH,W
        MOVWF SD_ROOT_DIR_SECH
        MOVF SD_ROOT_DIRHH,W
        SUBWFB SD_SEC_NUMHH,W
        MOVWF SD_ROOT_DIR_SECHH
        MOVF SD_ROOT_DIRHHH,W
        SUBWFB SD_SEC_NUMHHH,W
        MOVWF SD_ROOT_DIR_SECHHH
F4_000392 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ROOT_DIR_POS = SD_BUFFER_POS
        MOVFF SD_BUFFER_POSH,SD_ROOT_DIR_POSH
        MOVFF SD_BUFFER_POS,SD_ROOT_DIR_POS
F4_000393 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN_ROOT_DIR = 0
        CLRF SD_EXTENDED_RETURN_ROOT_DIR
F4_000394 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_INSERT_BYTE_INTO_BUFFER
F4_000397 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_WRITE_BUFFER_POS > $0FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_WRITE_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL108
F4_000398 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER1[SD_WRITE_BUFFER_POS - $100] = SD_DATA_IO
        MOVLB 2
RAM_BANK = 2
        MOVF SD_WRITE_BUFFER_POS,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_DATA_IO,INDF0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL109
BC@LL108
F4_000399 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000400 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER0[SD_WRITE_BUFFER_POS] = SD_DATA_IO
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_WRITE_BUFFER_POS,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_DATA_IO,INDF0
F4_000401 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL109
        MOVLB 0
RAM_BANK = 0
F4_000402 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_ASSEMBLE_FAT_SECTOR
F4_000405 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_FAT_BUFFER_POS_PREV
        MOVFF SD_FAT_BUFFER_POS_PREVH,SD_WRITE_BUFFER_POSH
        MOVFF SD_FAT_BUFFER_POS_PREV,SD_WRITE_BUFFER_POS
F4_000406 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_SEC_PREV * $100)
        MOVFF SD_FAT_SEC_PREV,SD_CLUSTER_NUMH
        MOVLB 2
RAM_BANK = 2
        CLRF SD_CLUSTER_NUM
F4_000407 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_BUFFER_POS_PREV / 2) + SD_CLUSTER_NUM
        BCF STATUS,0,0
        RRCF SD_FAT_BUFFER_POS_PREVH,W
        MOVWF PP7H,0
        RRCF SD_FAT_BUFFER_POS_PREV,W
        MOVWF PP7,0
        MOVF PP7,W,0
        ADDWF SD_CLUSTER_NUM,F
        MOVF PP7H,W,0
        ADDWFC SD_CLUSTER_NUMH,F
F4_000408 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_CLUSTER_NUM
        INFSNZ SD_CLUSTER_NUM,F
        INCF SD_CLUSTER_NUMH,F
F4_000409 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] WHILE SD_CLUSTER_SEQ_NUM_PREV > 1
BC@LL110
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_CLUSTER_SEQ_NUM_PREVH,F
        BNZ CP@LB18
        MOVLW 2
        SUBWF SD_CLUSTER_SEQ_NUM_PREV,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL111
CP@LB18
F4_000410 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE0
        MOVFF SD_CLUSTER_NUM,SD_DATA_IO
F4_000411 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000412 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000413 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE1
        MOVFF SD_CLUSTER_NUMH,SD_DATA_IO
F4_000414 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000415 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000416 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_CLUSTER_NUM
        INFSNZ SD_CLUSTER_NUM,F
        INCF SD_CLUSTER_NUMH,F
F4_000417 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] DEC SD_CLUSTER_SEQ_NUM_PREV
        DECF SD_CLUSTER_SEQ_NUM_PREV,F
        MOVLW 0
        SUBWFB SD_CLUSTER_SEQ_NUM_PREVH,F
F4_000418 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] WEND
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL110
BC@LL111
F4_000419 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_ASSEMBLE_FAT_SECTOR_END_CONT
F4_000422 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_SEC * $100)
        MOVFF SD_FAT_SEC,SD_CLUSTER_NUMH
        MOVLB 2
RAM_BANK = 2
        CLRF SD_CLUSTER_NUM
F4_000423 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_BUFFER_POS / 2) + SD_CLUSTER_NUM
        BCF STATUS,0,0
        RRCF SD_FAT_BUFFER_POSH,W
        MOVWF PP7H,0
        RRCF SD_FAT_BUFFER_POS,W
        MOVWF PP7,0
        MOVF PP7,W,0
        ADDWF SD_CLUSTER_NUM,F
        MOVF PP7H,W,0
        ADDWFC SD_CLUSTER_NUMH,F
F4_000424 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE0
        MOVFF SD_CLUSTER_NUM,SD_DATA_IO
F4_000425 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000426 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000427 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE1
        MOVFF SD_CLUSTER_NUMH,SD_DATA_IO
F4_000428 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000429 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
F4_000432 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_DATA_IO
F4_000433 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000434 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000435 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000436 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_WRITE_BYTE_TO_FILE_SUB
F4_000439 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_RW_PTR
        MOVLB 2
RAM_BANK = 2
        INCF SD_BYTES_READ,F
        MOVLW 0
        ADDWFC SD_BYTES_READH,F
        ADDWFC SD_BYTES_READHH,F
        ADDWFC SD_BYTES_READHHH,F
F4_000440 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_RW_PTR > SD_FILE_SIZE THEN
        MOVF SD_BYTES_READ,W
        SUBWF SD_FILE_SIZE,W
        MOVF SD_BYTES_READH,W
        SUBWFB SD_FILE_SIZEH,W
        MOVF SD_BYTES_READHH,W
        SUBWFB SD_FILE_SIZEHH,W
        MOVF SD_BYTES_READHHH,W
        SUBWFB SD_FILE_SIZEHHH,W
        MOVF SD_BYTES_READHHH,W
        XORWF SD_FILE_SIZEHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,4,0
        GO@TO BC@LL113
F4_000441 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_FILE_SIZE
        MOVLB 2
RAM_BANK = 2
        INCF SD_FILE_SIZE,F
        MOVLW 0
        ADDWFC SD_FILE_SIZEH,F
        ADDWFC SD_FILE_SIZEHH,F
        ADDWFC SD_FILE_SIZEHHH,F
F4_000442 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
        BSF _B#VR1,0
F4_000443 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL113
        MOVLB 0
RAM_BANK = 0
F4_000444 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_DATA_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_DATA_BUFFER_POS,F
        INCF SD_DATA_BUFFER_POSH,F
F4_000445 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_DATA_BUFFER_POS > SD_BYTES_PER_SEC THEN
        MOVF SD_DATA_BUFFER_POS,W
        SUBWF SD_BYTES_PER_SEC,W
        MOVF SD_DATA_BUFFER_POSH,W
        SUBWFB SD_BYTES_PER_SECH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL115
F4_000446 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_DATA_SEC
        MOVLB 2
RAM_BANK = 2
        INCF SD_DATA_SEC,F
        MOVLW 0
        ADDWFC SD_DATA_SECH,F
        ADDWFC SD_DATA_SECHH,F
        ADDWFC SD_DATA_SECHHH,F
F4_000447 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_SEC_IN_CLUSTER
        INCF SD_SEC_IN_CLUSTER,F
F4_000448 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEC_IN_CLUSTER > SD_SECS_PER_CLUSTER THEN
        MOVF SD_SEC_IN_CLUSTER,W
        SUBWF SD_SECS_PER_CLUSTER,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL117
F4_000449 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EOF = 0 THEN
        MOVLB 2
RAM_BANK = 2
        RRCF _B#VR1,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL119
F4_000450 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_CLUSTER_NUMH,PP0H
        MOVFF SD_CLUSTER_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_000451 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_000452 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_000453 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_000454 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000455 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000456 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_000457 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000458 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_000459 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000460 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000461 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000462 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000463 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000464 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_SEC_IN_CLUSTER
F4_000466 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_CLUSTER_NUMH,PP0H
        MOVFF SD_CLUSTER_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_000467 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        CLRF SD_FAT_BUFFER_POSH
F4_000468 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL120
BC@LL119
F4_000470 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000471 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_CLUSTER_SEQ_IDX
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_CLUSTER_SEQ_IDX,F
        INCF SD_CLUSTER_SEQ_IDXH,F
F4_000472 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_CLUSTER_SEQ_IDX > SD_CLUSTER_SEQ_NUM THEN
        MOVF SD_CLUSTER_SEQ_IDX,W
        SUBWF SD_CLUSTER_SEQ_NUM,W
        MOVF SD_CLUSTER_SEQ_IDXH,W
        SUBWFB SD_CLUSTER_SEQ_NUMH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL122
F4_000473 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS_PREV = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_FAT_BUFFER_POS_PREVH
        MOVFF SD_FAT_BUFFER_POS,SD_FAT_BUFFER_POS_PREV
F4_000474 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC_PREV = SD_FAT_SEC
        MOVFF SD_FAT_SECHHH,SD_FAT_SEC_PREVHHH
        MOVFF SD_FAT_SECHH,SD_FAT_SEC_PREVHH
        MOVFF SD_FAT_SECH,SD_FAT_SEC_PREVH
        MOVFF SD_FAT_SEC,SD_FAT_SEC_PREV
F4_000475 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_IDX_PREV = SD_CLUSTER_SEQ_IDX
        MOVFF SD_CLUSTER_SEQ_IDXH,SD_CLUSTER_SEQ_IDX_PREVH
        MOVFF SD_CLUSTER_SEQ_IDX,SD_CLUSTER_SEQ_IDX_PREV
F4_000476 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_NUM_PREV = SD_CLUSTER_SEQ_NUM
        MOVFF SD_CLUSTER_SEQ_NUMH,SD_CLUSTER_SEQ_NUM_PREVH
        MOVFF SD_CLUSTER_SEQ_NUM,SD_CLUSTER_SEQ_NUM_PREV
F4_000478 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_FIND_FREE_CLUSTER
        F@CALL SD_FIND_FREE_CLUSTER
F4_000479 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN = 1 THEN RETURN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL124
        RETURN 0
BC@LL124
F4_000480 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_SEC_NUM = SD_FAT1 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT1,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_000481 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000482 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000483 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000485 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR
        F@CALL SD_ASSEMBLE_FAT_SECTOR
F4_000486 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR_END_CONT
        F@CALL SD_ASSEMBLE_FAT_SECTOR_END_CONT
F4_000487 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000488 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_FAT2 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT2,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT2H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT2HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT2HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_000489 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_000490 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000491 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000492 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000493 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 0
        CLRF SD_RW_OPTION
F4_000494 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
        F@JUMP BC@LL125
BC@LL122
F4_000496 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000497 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_CLUSTER_NUM
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_CLUSTER_NUM,F
        INCF SD_CLUSTER_NUMH,F
F4_000498 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL125
        MOVLB 0
RAM_BANK = 0
F4_000499 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_SEC_IN_CLUSTER
F4_000500 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL120
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL126
BC@LL117
F4_000501 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000502 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_SECTOR
        F@CALL SD_READ_SECTOR
F4_000503 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL126
F4_000504 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_BUFFER_POS = 1
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_BUFFER_POSH
        MOVLW 1
        MOVWF SD_DATA_BUFFER_POS
F4_000505 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL115
        MOVLB 0
RAM_BANK = 0
F4_000506 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE_RW = SD_IO_BYTE
        MOVFF SD_IO_BYTE,SD_BYTE_RW
F4_000507 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SUB
        F@CALL SD_WRITE_SUB
F4_000508 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_EXTENDED_RETURN
F4_000509 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_CHECK_FOR_FILE_SUB
F4_000512 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FIND_ROOT_DIR_ENTRY_F = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_FIND_ROOT_DIR_ENTRY_F
F4_000513 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_FIND_ROOT_DIR_ENTRY
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_FIND_ROOT_DIR_ENTRY
F4_000514 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_READ_SUB
F4_000517 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_BUFFER_IDX > $1FF THEN
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL128
F4_000524 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_IDX = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_IDXH
        CLRF SD_BUFFER_IDX
F4_000525 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_SECTOR_NUM
        INCF SD_SECTOR_NUM,F,0
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,F,0
        ADDWFC SD_SECTOR_NUMHH,F,0
        ADDWFC SD_SECTOR_NUMHHH,F,0
F4_000526 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000527 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000528 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL128
F4_000529 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_BUFFER_IDX > $0FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL130
F4_000530 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE_RW = SD_BUFFER1[SD_BUFFER_IDX - $100]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_BYTE_RW
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL131
BC@LL130
F4_000531 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000532 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE_RW = SD_BUFFER0[SD_BUFFER_IDX]
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_BYTE_RW
F4_000533 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL131
        MOVLB 0
RAM_BANK = 0
F4_000534 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_BUFFER_IDX
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_BUFFER_IDX,F
        INCF SD_BUFFER_IDXH,F
F4_000535 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000541 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_INIT_MSSP MACRO P1
SD_INIT_MSSP    MACRO P1,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT > 1)
        ERROR "(IN ASM) SD_INIT_MSSP - TOO MANY PARAMETERS"
 ELSE
 IF (PRM_COUNT == 0)
        MOVLW 32
        MOVWF SSPCON1,0
 ELSE
 IF (PRM_1 != BYTE) && (PRM_1 != NUM8)
        ERROR "(IN ASM) SD_INIT_MSSP - SPEED(PARAM1) SHOULD BE A BYTE VARIABLE OR NUMBER"
 ENDIF
 IF (PRM_1 == BYTE)
        BYTE_BYTE P1, SSPCON1
        BSF SSPCON1,5,0
 ENDIF
 IF (PRM_1 == NUM8)
        NUM_DWORD P1, SSPCON1
RAM_BANK = 0
        BSF SSPCON1,5,0
 ENDIF
 ENDIF
 ENDIF
        F@CALL SD_INIT_MSSP_SUB
 IF (SD_INIT_MSSP_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_INIT_MSSP - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
SD_SEND_CMD
F4_000580 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_BYTE0
        MOVFF SD_BYTE0,SSPBUF
F4_000581 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000582 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000583 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000584 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_BYTE1
        MOVFF SD_BYTE1,SSPBUF
F4_000585 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000586 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000587 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000588 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_BYTE2
        MOVFF SD_BYTE2,SSPBUF
F4_000589 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000590 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000591 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000592 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_BYTE3
        MOVFF SD_BYTE3,SSPBUF
F4_000593 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000594 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000595 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000596 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_BYTE4
        MOVFF SD_BYTE4,SSPBUF
F4_000597 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000598 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000599 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
SD_SEND_BYTE
F4_000601 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_BYTE5
        MOVFF SD_BYTE5,SSPBUF
F4_000602 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000603 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000604 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000605 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_RECEIVE_BYTE
F4_000608 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = $FF
        SETF SSPBUF,0
F4_000609 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000610 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000611 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000612 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_INIT_MSSP_SUB
F4_000616 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SSPSTAT = %01000000
        MOVLW 64
        MOVWF SSPSTAT,0
F4_000617 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] OUTPUT SD_CS : OUTPUT SD_DI : OUTPUT SD_CLK : INPUT SD_DO
        BCF TRISC,2,0
        BCF TRISC,5,0
        BCF TRISC,3,0
        BSF TRISC,4,0
F4_000618 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000619 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE0 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE0
F4_000620 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE1 = $FF
        SETF SD_BYTE1
F4_000621 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE2 = $FF
        SETF SD_BYTE2
F4_000622 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE3 = $FF
        SETF SD_BYTE3
F4_000623 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE4 = $FF
        SETF SD_BYTE4
F4_000624 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000625 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000626 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_CMD
        F@CALL SD_SEND_CMD
F4_000628 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] DELAYMS 100
        MOVLW 100
        F@CALL DL@MS
F4_000629 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] LOW SD_CS
        BCF TRISC,2,0
        BCF PORTC,2,0
F4_000630 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE0 = $40
        MOVLW 64
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000631 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE1 = $00
        CLRF SD_BYTE1
F4_000632 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE2 = $00
        CLRF SD_BYTE2
F4_000633 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE3 = $00
        CLRF SD_BYTE3
F4_000634 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE4 = $00
        CLRF SD_BYTE4
F4_000635 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $95
        MOVLW 149
        MOVWF SD_BYTE5
F4_000636 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000637 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_REQD = $01
        MOVLW 1
        MOVWF SD_SEEK_RESPONSE_REQD,0
F4_000638 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FF
        CLRF SD_SEEK_RESPONSE_IDXH,0
        SETF SD_SEEK_RESPONSE_IDX,0
F4_000639 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000640 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL133
F4_000641 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000642 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
F4_000643 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
F4_000644 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL133
F4_000646 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IDX = $FF
        SETF SD_IDX,0
F4_000647 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] REPEAT
BC@LL134
F4_000648 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE0 = $41
        MOVLW 65
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000649 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE1 = $00
        CLRF SD_BYTE1
F4_000650 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE2 = $00
        CLRF SD_BYTE2
F4_000651 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE3 = $00
        CLRF SD_BYTE3
F4_000652 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE4 = $00
        CLRF SD_BYTE4
F4_000653 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000654 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000655 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_REQD = $00
        CLRF SD_SEEK_RESPONSE_REQD,0
F4_000656 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FF
        CLRF SD_SEEK_RESPONSE_IDXH,0
        SETF SD_SEEK_RESPONSE_IDX,0
F4_000657 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000658 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] DEC SD_IDX
        DECF SD_IDX,F,0
F4_000659 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] UNTIL SD_SEEK_RESPONSE_RETURN = 0 OR SD_IDX = 0
        MOVLW 1
        MOVF SD_SEEK_RESPONSE_RETURN,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVLW 1
        MOVF SD_IDX,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        BTFSC STATUS,2,0
        GO@TO BC@LL134
BC@LL135
F4_000660 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_IDX = 0 THEN
        MOVF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL137
F4_000661 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000662 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
F4_000663 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
F4_000664 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL137
F4_000665 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF PORTC,2,0
F4_000666 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTE5 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE5
F4_000667 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000668 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_IDX = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_IDXH
        CLRF SD_BUFFER_IDX
F4_000669 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN = 0
        CLRF SD_RETURN,0
F4_000670 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000676 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLOSE_FILE MACRO
SD_CLOSE_FILE   MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT != 0)
        ERROR "(IN ASM) NO PARAMETERS REQUIRED FOR SD_CLOSE_FILE"
        EXITM
 ENDIF
        F@CALL SD_CLOSE_FILE_SUB
        ENDM
SD_CLOSE_FILE_SUB
F4_000698 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_IS_DIRTY = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_IS_DIRTY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL139
F4_000699 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] REPEAT
BC@LL140
F4_000700 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000701 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] UNTIL SD_RETURN = 0
        MOVF SD_RETURN,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL140
BC@LL141
F4_000702 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL139
F4_000703 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_SEC_NUM = SD_ROOT_DIR + SD_ROOT_DIR_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_SEC,W
        ADDWF SD_ROOT_DIR,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_ROOT_DIR_SECH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_ROOT_DIR_SECHH,W
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_ROOT_DIR_SECHHH,W
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_000704 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000705 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000706 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000708 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $1C
        MOVLW 28
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000709 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE0
        MOVFF SD_FILE_SIZE,SD_DATA_IO
F4_000710 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000711 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000712 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE1
        MOVFF SD_FILE_SIZEH,SD_DATA_IO
F4_000713 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000714 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000715 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE2
        MOVFF SD_FILE_SIZEHH,SD_DATA_IO
F4_000716 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000717 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000718 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE3
        MOVFF SD_FILE_SIZEHHH,SD_DATA_IO
F4_000719 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000720 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $16
        MOVLW 22
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000721 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SET_FILE_TIME_MODIFIED
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SET_FILE_TIME_MODIFIED
F4_000722 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000723 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EOF = 1 THEN
        MOVLB 2
RAM_BANK = 2
        RRCF _B#VR1,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL143
        BCF STATUS,3,0
        MOVLB 2
RAM_BANK = 2
        BTFSS _B#VR1,0
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL143
F4_000724 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS_PREV = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_FAT_BUFFER_POS_PREVH
        MOVFF SD_FAT_BUFFER_POS,SD_FAT_BUFFER_POS_PREV
F4_000725 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC_PREV = SD_FAT_SEC
        MOVFF SD_FAT_SECHHH,SD_FAT_SEC_PREVHHH
        MOVFF SD_FAT_SECHH,SD_FAT_SEC_PREVHH
        MOVFF SD_FAT_SECH,SD_FAT_SEC_PREVH
        MOVFF SD_FAT_SEC,SD_FAT_SEC_PREV
F4_000726 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_SEC_NUM = SD_FAT1 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT1,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_000727 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000728 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000729 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000731 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_NUM_PREV = SD_CLUSTER_SEQ_IDX
        MOVFF SD_CLUSTER_SEQ_IDXH,SD_CLUSTER_SEQ_NUM_PREVH
        MOVFF SD_CLUSTER_SEQ_IDX,SD_CLUSTER_SEQ_NUM_PREV
F4_000732 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR
        F@CALL SD_ASSEMBLE_FAT_SECTOR
F4_000733 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
        F@CALL SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
F4_000734 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000735 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_FAT2 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT2,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT2H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT2HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT2HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_000736 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_000737 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL143
F4_000738 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
SD_SET_FILE_TIME_CREATE
F4_000742 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_MSECONDS + ((SD_SECONDS // 2) * 100)
        CLRF PP7H,0
        MOVFF SD_MSECONDS,PP7
        CLRF PP8H,0
        MOVFF SD_SECONDS,PP8
        MOVLW 1
        ANDWF PP8,F,0
        CLRF PP8H,0
        MOVF PP8H,W,0
        MULLW 100
        MOVFF PRODL,PP8H
        MOVF PP8,W,0
        MULLW 100
        MOVFF PRODL,PP8
        MOVF PRODH,W,0
        ADDWF PP8H,F,0
        MOVF PP7,W,0
        ADDWF PP8,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_DATA_IO
F4_000743 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000744 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
SD_SET_FILE_TIME_MODIFIED
        MOVLB 0
RAM_BANK = 0
F4_000746 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = (SD_SECONDS / 2) | (SD_MINUTES << 5)
        CLRF PP7H,0
        MOVFF SD_SECONDS,PP7
        BCF STATUS,0,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        CLRF PP8H,0
        MOVFF SD_MINUTES,PP8
        MOVLW 5
SL@LB32
        BCF STATUS,0,0
        RLCF PP8,F,0
        RLCF PP8H,F,0
        DECFSZ WREG,F,0
        BRA SL@LB32
        MOVF PP7,W,0
        IORWF PP8,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_DATA_IO
F4_000747 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000748 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000749 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = (SD_MINUTES >> 3) | (SD_HOURS << 3)
        CLRF PP7H,0
        MOVFF SD_MINUTES,PP7
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        MOVLW 31
        ANDWF PP7H,F,0
        CLRF PP8H,0
        MOVFF SD_HOURS,PP8
        MOVLW 3
SL@LB33
        BCF STATUS,0,0
        RLCF PP8,F,0
        RLCF PP8H,F,0
        DECFSZ WREG,F,0
        BRA SL@LB33
        MOVF PP7,W,0
        IORWF PP8,W,0
        MOVWF SD_DATA_IO
F4_000750 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000751 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000752 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_DAY | (SD_MONTH << 5)
        MOVFF SD_MONTH,PP7H
        CLRF PP7,0
        BCF STATUS,0,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        MOVF SD_DAY,W
        IORWF PP7,W,0
        MOVWF SD_DATA_IO
F4_000753 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000754 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000755 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = (SD_MONTH >> 3) | ((SD_YEAR + 20) << 1)
        CLRF PP7H,0
        MOVFF SD_MONTH,PP7
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        MOVLW 31
        ANDWF PP7H,F,0
        CLRF PP8H,0
        MOVFF SD_YEAR,PP8
        MOVLW 20
        ADDWF PP8,F,0
        MOVLW 0
        ADDWFC PP8H,F,0
        BCF STATUS,0,0
        RLCF PP8,F,0
        RLCF PP8H,F,0
        MOVF PP7,W,0
        IORWF PP8,W,0
        MOVWF SD_DATA_IO
F4_000756 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000757 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
F4_000763 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_OPEN_FILE MACRO
SD_OPEN_FILE    MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_OPEN_FILE_SUB
 IF (RETURN_TYPE !=BYTE) && (RETURN_TYPE !=WORD) && (RETURN_TYPE !=DWORD)
        ERROR "(IN ASM) SD_OPEN_FILE - RETURN VARIABLE SHOULD BE A BYTE, WORD, OR DWORD VARIABLE"
 ELSE
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 IF (RETURN_TYPE == WORD)
        BYTE_WORD SD_EXTENDED_RETURN, RETURN_VAR
RAM_BANK = 0
 ENDIF
 IF (RETURN_TYPE == DWORD)
        BYTE_DWORD SD_EXTENDED_RETURN, RETURN_VAR
RAM_BANK = 0
 ENDIF
 ENDIF
        ENDM
SD_OPEN_FILE_SUB
F4_000787 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_CHECK_FOR_FILE_SUB
        F@CALL SD_CHECK_FOR_FILE_SUB
F4_000788 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR <> 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_EXTENDED_RETURN_ROOT_DIR,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL145
F4_000789 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000790 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000791 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL145
F4_000792 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM.BYTE0 = SD_ROOT_DIR_FILE[$1A]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#26,W
        MOVWF SD_CLUSTER_NUM
F4_000793 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM.BYTE1 = SD_ROOT_DIR_FILE[$1B]
        MOVF SD_ROOT_DIR_FILE#27,W
        MOVWF SD_CLUSTER_NUMH
F4_000794 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE0 = SD_ROOT_DIR_FILE[$1C]
        MOVF SD_ROOT_DIR_FILE#28,W
        MOVWF SD_FILE_SIZE
F4_000795 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE1 = SD_ROOT_DIR_FILE[$1D]
        MOVF SD_ROOT_DIR_FILE#29,W
        MOVWF SD_FILE_SIZEH
F4_000796 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE2 = SD_ROOT_DIR_FILE[$1E]
        MOVF SD_ROOT_DIR_FILE#30,W
        MOVWF SD_FILE_SIZEHH
F4_000797 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE3 = SD_ROOT_DIR_FILE[$1F]
        MOVF SD_ROOT_DIR_FILE#31,W
        MOVWF SD_FILE_SIZEHHH
F4_000798 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000799 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000800 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVWF SD_SEC_IN_CLUSTER
F4_000801 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000802 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVWF SD_RW_OPTION
F4_000803 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000805 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_RETURN = 1 THEN
        MOVLW 1
        SUBWF SD_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL147
F4_000806 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000807 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000808 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL147
F4_000809 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_BUFFER_POS = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_BUFFER_POSH
        CLRF SD_DATA_BUFFER_POS
F4_000810 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTES_READ = 0
        CLRF SD_BYTES_READHHH
        CLRF SD_BYTES_READHH
        CLRF SD_BYTES_READH
        CLRF SD_BYTES_READ
F4_000811 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_FILE_SIZE > 0 THEN
        BCF STATUS,3,0
        BTFSC SD_FILE_SIZEHHH,7
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL149
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_SIZE,W
        IORWF SD_FILE_SIZEH,W
        IORWF SD_FILE_SIZEHH,W
        IORWF SD_FILE_SIZEHHH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL149
F4_000812 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 0
        MOVLB 2
RAM_BANK = 2
        BCF _B#VR1,0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL150
BC@LL149
F4_000813 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_000814 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
        MOVLB 2
RAM_BANK = 2
        BSF _B#VR1,0
F4_000815 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL150
        MOVLB 0
RAM_BANK = 0
F4_000816 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IS_DIRTY = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_IS_DIRTY
F4_000817 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_NUM = 1
        CLRF SD_CLUSTER_SEQ_NUMH
        MOVLW 1
        MOVWF SD_CLUSTER_SEQ_NUM
F4_000818 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_000819 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000825 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_READ_BYTE_FROM_FILE MACRO
SD_READ_BYTE_FROM_FILE  MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_READ_BYTE_FROM_FILE_SUB
 IF (SD_READ_BYTE_FROM_FILE_RETURN != 1)
        ERROR "(IN ASM) SD_READ_BYTE_FROM_FILE -  MANDATORY RETURN PARAMETER MISSING"
 ELSE
 IF (RETURN_TYPE !=BYTE) && (RETURN_TYPE !=WORD) && (RETURN_TYPE !=DWORD)
        ERROR "(IN ASM) SD_READ_BYTE_FROM_FILE - RETURN VARIABLE SHOULD BE A BYTE, WORD OR DWORD VARIABLE"
 ELSE
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_BYTE_RW, RETURN_VAR
 ENDIF
 IF (RETURN_TYPE == WORD)
        BYTE_WORD SD_BYTE_RW, RETURN_VAR
RAM_BANK = 0
 ENDIF
 IF (RETURN_TYPE == DWORD)
        BYTE_DWORD SD_BYTE_RW, RETURN_VAR
RAM_BANK = 0
 ENDIF
 ENDIF
 ENDIF
        ENDM
SD_READ_BYTE_FROM_FILE_SUB
F4_000853 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EOF = 0 THEN
        MOVLB 2
RAM_BANK = 2
        RRCF _B#VR1,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL152
F4_000854 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_DATA_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_DATA_BUFFER_POS,F
        INCF SD_DATA_BUFFER_POSH,F
F4_000855 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_DATA_BUFFER_POS > SD_BYTES_PER_SEC THEN
        MOVF SD_DATA_BUFFER_POS,W
        SUBWF SD_BYTES_PER_SEC,W
        MOVF SD_DATA_BUFFER_POSH,W
        SUBWFB SD_BYTES_PER_SECH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL154
F4_000856 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_IS_DIRTY = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_IS_DIRTY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL156
F4_000857 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] REPEAT
BC@LL157
F4_000858 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000859 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] UNTIL SD_RETURN = 0
        MOVF SD_RETURN,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL157
BC@LL158
F4_000860 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IS_DIRTY = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_IS_DIRTY
F4_000861 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL156
        MOVLB 0
RAM_BANK = 0
F4_000862 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_DATA_SEC
        MOVLB 2
RAM_BANK = 2
        INCF SD_DATA_SEC,F
        MOVLW 0
        ADDWFC SD_DATA_SECH,F
        ADDWFC SD_DATA_SECHH,F
        ADDWFC SD_DATA_SECHHH,F
F4_000863 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_SEC_IN_CLUSTER
        INCF SD_SEC_IN_CLUSTER,F
F4_000864 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SEC_IN_CLUSTER > SD_SECS_PER_CLUSTER THEN
        MOVF SD_SEC_IN_CLUSTER,W
        SUBWF SD_SECS_PER_CLUSTER,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL160
F4_000865 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_CLUSTER_NUMH,PP0H
        MOVFF SD_CLUSTER_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_000866 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_000867 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_000868 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_000869 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000870 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000872 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_000873 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000874 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_000875 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000876 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000877 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000878 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000879 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000881 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_SEC_IN_CLUSTER
F4_000882 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL160
        MOVLB 0
RAM_BANK = 0
F4_000883 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_BUFFER_POS = 1
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_BUFFER_POSH
        MOVLW 1
        MOVWF SD_DATA_BUFFER_POS
F4_000884 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL154
        MOVLB 0
RAM_BANK = 0
F4_000885 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_SUB
        F@CALL SD_READ_SUB
F4_000886 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_BYTES_READ
        MOVLB 2
RAM_BANK = 2
        INCF SD_BYTES_READ,F
        MOVLW 0
        ADDWFC SD_BYTES_READH,F
        ADDWFC SD_BYTES_READHH,F
        ADDWFC SD_BYTES_READHHH,F
F4_000887 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_BYTES_READ >= SD_FILE_SIZE THEN SD_EOF = 1
        MOVF SD_FILE_SIZE,W
        SUBWF SD_BYTES_READ,W
        MOVF SD_FILE_SIZEH,W
        SUBWFB SD_BYTES_READH,W
        MOVF SD_FILE_SIZEHH,W
        SUBWFB SD_BYTES_READHH,W
        MOVF SD_FILE_SIZEHHH,W
        SUBWFB SD_BYTES_READHHH,W
        MOVF SD_BYTES_READHHH,W
        XORWF SD_FILE_SIZEHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO BC@LL162
        MOVLB 2
RAM_BANK = 2
        BSF _B#VR1,0
BC@LL162
        MOVLB 0
RAM_BANK = 0
F4_000888 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL152
F4_000889 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
F4_000895 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CHECK_FOR_FILE MACRO
SD_CHECK_FOR_FILE       MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_CHECK_FOR_FILE_SUB
 IF (SD_CHECK_FOR_FILE_RETURN != 1)
        ERROR "(IN ASM) SD_CHECK_FOR_FILE -  MANDATORY RETURN PARAMETER MISSING"
 ELSE
 IF (RETURN_TYPE != BYTE) && (RETURN_TYPE != WORD) && (RETURN_TYPE != DWORD)
        ERROR "(IN ASM) SD_CHECK_FOR_FILE - RETURN VARIABLE SHOULD BE A BYTE, WORD OR DWORD VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN_ROOT_DIR, RETURN_VAR
 ENDIF
 IF (RETURN_TYPE == WORD)
        BYTE_WORD SD_EXTENDED_RETURN_ROOT_DIR, RETURN_VAR
RAM_BANK = 0
 ENDIF
 IF (RETURN_TYPE == DWORD)
        BYTE_DWORD SD_EXTENDED_RETURN_ROOT_DIR, RETURN_VAR
RAM_BANK = 0
 ENDIF
 ENDIF
        ENDM
F4_000924 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NEW_FILE MACRO
SD_NEW_FILE     MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT != 0)
        ERROR "(IN ASM) NO PARAMETERS REQUIRED FOR SD_NEW_FILE"
        EXITM
 ENDIF
        F@CALL SD_NEW_FILE_SUB
 IF (SD_NEW_FILE_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_NEW_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
SD_NEW_FILE_SUB
F4_000949 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_RETURN_F
F4_000950 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = 0
        CLRF SD_FAT_SECHHH
        CLRF SD_FAT_SECHH
        CLRF SD_FAT_SECH
        CLRF SD_FAT_SEC
F4_000951 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = 0
        CLRF SD_FAT_BUFFER_POSH
        CLRF SD_FAT_BUFFER_POS
F4_000952 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_NUM = 0
        CLRF SD_CLUSTER_SEQ_NUMH
        CLRF SD_CLUSTER_SEQ_NUM
F4_000953 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_FIND_FREE_CLUSTER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_FIND_FREE_CLUSTER
F4_000954 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN = 1 THEN RETURN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL164
        RETURN 0
BC@LL164
F4_000955 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FIND_ROOT_DIR_ENTRY_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FIND_ROOT_DIR_ENTRY_F
F4_000956 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_FIND_ROOT_DIR_ENTRY
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_FIND_ROOT_DIR_ENTRY
F4_000957 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN_ROOT_DIR,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL166
F4_000958 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000959 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000960 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL166
F4_000961 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_SEC_NUM = SD_ROOT_DIR + SD_ROOT_DIR_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_SEC,W
        ADDWF SD_ROOT_DIR,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_ROOT_DIR_SECH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_ROOT_DIR_SECHH,W
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_ROOT_DIR_SECHHH,W
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_000962 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000963 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000964 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000966 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $1F
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB168
        MOVLB 0
RAM_BANK = 0
        MOVLW 32
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB169
F4_000967 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000968 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = 0
        CLRF SD_DATA_IO
F4_000969 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000970 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB168
NX@LB169
F4_000971 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_MODIFY_FILE_NAME
        F@CALL SD_MODIFY_FILE_NAME
F4_000972 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB170
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB171
F4_000973 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000974 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_FILE_NAME[SD_ROOT_DIR_FILE_POS]
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF SD_DATA_IO
F4_000975 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000976 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB170
NX@LB171
F4_000977 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB172
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB173
F4_000978 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000979 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08]
        MOVLW 8
        SUBWF SD_ROOT_DIR_FILE_POS,W
        LFSR 0,SD_FILE_EXT
        MOVF PLUSW0,W,0
        MOVWF SD_DATA_IO
F4_000980 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000981 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB172
NX@LB173
F4_000982 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $0B
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000983 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = %00100000
        MOVLW 32
        MOVWF SD_DATA_IO
F4_000984 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000985 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $0D
        MOVLW 13
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000986 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SET_FILE_TIME_CREATE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SET_FILE_TIME_CREATE
F4_000987 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $1A
        MOVLW 26
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000988 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE0
        MOVFF SD_CLUSTER_NUM,SD_DATA_IO
F4_000989 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000990 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000991 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE1
        MOVFF SD_CLUSTER_NUMH,SD_DATA_IO
F4_000992 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000993 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000994 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000995 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000996 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVWF SD_SEC_IN_CLUSTER
F4_000997 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000998 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 0
        CLRF SD_RW_OPTION
F4_000999 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001001 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_BUFFER_POS = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_BUFFER_POSH
        CLRF SD_DATA_BUFFER_POS
F4_001002 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE = 0
        CLRF SD_FILE_SIZEHHH
        CLRF SD_FILE_SIZEHH
        CLRF SD_FILE_SIZEH
        CLRF SD_FILE_SIZE
F4_001003 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_PTR = 0
        CLRF SD_BYTES_READHHH
        CLRF SD_BYTES_READHH
        CLRF SD_BYTES_READH
        CLRF SD_BYTES_READ
F4_001004 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
        BSF _B#VR1,0
F4_001005 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RETURN_F = 1
        MOVLW 1
        MOVWF SD_RETURN_F
F4_001006 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001012 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_APPEND_FILE MACRO
SD_APPEND_FILE  MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_APPEND_FILE_SUB
 IF (RETURN_TYPE !=BYTE)
        ERROR "(IN ASM) SD_APPEND_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ELSE
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
SD_APPEND_FILE_SUB
F4_001030 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_CHECK_FOR_FILE_SUB
        F@CALL SD_CHECK_FOR_FILE_SUB
F4_001031 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR <> 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_EXTENDED_RETURN_ROOT_DIR,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL174
F4_001032 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001033 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001034 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL174
F4_001035 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM.BYTE0 = SD_ROOT_DIR_FILE[$1A]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#26,W
        MOVWF SD_CLUSTER_NUM
F4_001036 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM.BYTE1 = SD_ROOT_DIR_FILE[$1B]
        MOVF SD_ROOT_DIR_FILE#27,W
        MOVWF SD_CLUSTER_NUMH
F4_001037 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE0 = SD_ROOT_DIR_FILE[$1C]
        MOVF SD_ROOT_DIR_FILE#28,W
        MOVWF SD_FILE_SIZE
F4_001038 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE1 = SD_ROOT_DIR_FILE[$1D]
        MOVF SD_ROOT_DIR_FILE#29,W
        MOVWF SD_FILE_SIZEH
F4_001039 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE2 = SD_ROOT_DIR_FILE[$1E]
        MOVF SD_ROOT_DIR_FILE#30,W
        MOVWF SD_FILE_SIZEHH
F4_001040 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE.BYTE3 = SD_ROOT_DIR_FILE[$1F]
        MOVF SD_ROOT_DIR_FILE#31,W
        MOVWF SD_FILE_SIZEHHH
F4_001041 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE_LEFT = SD_FILE_SIZE
        MOVFF SD_FILE_SIZEHHH,SD_FILE_SIZE_LEFTHHH
        MOVFF SD_FILE_SIZEHH,SD_FILE_SIZE_LEFTHH
        MOVFF SD_FILE_SIZEH,SD_FILE_SIZE_LEFTH
        MOVFF SD_FILE_SIZE,SD_FILE_SIZE_LEFT
F4_001042 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = 0
        CLRF SD_SECTOR_NUMHHH,0
        CLRF SD_SECTOR_NUMHH,0
        CLRF SD_SECTOR_NUMH,0
        CLRF SD_SECTOR_NUM,0
F4_001043 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] WHILE SD_FILE_SIZE_LEFT > (SD_BYTES_PER_SEC * SD_SECS_PER_CLUSTER)
BC@LL175
        MOVLB 0
RAM_BANK = 0
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_BYTES_PER_SECH,PP0H
        MOVFF SD_BYTES_PER_SEC,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,PBP#VAR0HHH
        MOVFF PP0HH,PBP#VAR0HH
        MOVFF PP0H,PBP#VAR0H
        MOVFF PP0,PBP#VAR0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_SIZE_LEFT,W
        SUBWF PBP#VAR0,W,0
        MOVF SD_FILE_SIZE_LEFTH,W
        SUBWFB PBP#VAR0H,W,0
        MOVF SD_FILE_SIZE_LEFTHH,W
        SUBWFB PBP#VAR0HH,W,0
        MOVF SD_FILE_SIZE_LEFTHHH,W
        SUBWFB PBP#VAR0HHH,W,0
        MOVF SD_FILE_SIZE_LEFTHHH,W
        XORWF PBP#VAR0HHH,W,0
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,4,0
        GO@TO BC@LL176
F4_001044 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_CLUSTER_NUMH,PP0H
        MOVFF SD_CLUSTER_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_001045 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_001046 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_001047 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SECTOR_NUM <> (SD_FAT1 + SD_FAT_SEC) THEN
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF PBP#VAR0,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF PBP#VAR0H,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF PBP#VAR0HH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF PBP#VAR0HHH,0
        MOVF PBP#VAR0,W,0
        SUBWF SD_SECTOR_NUM,W,0
        BNZ CP@LB24
        MOVF PBP#VAR0H,W,0
        SUBWF SD_SECTOR_NUMH,W,0
        BNZ CP@LB24
        MOVF PBP#VAR0HH,W,0
        SUBWF SD_SECTOR_NUMHH,W,0
        BNZ CP@LB24
        MOVF PBP#VAR0HHH,W,0
        SUBWF SD_SECTOR_NUMHHH,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL178
CP@LB24
F4_001048 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_001049 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_001050 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001052 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL178
F4_001053 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_001054 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_001055 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_001056 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_SIZE_LEFT = SD_FILE_SIZE_LEFT - (SD_BYTES_PER_SEC * SD_SECS_PER_CLUSTER)
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_BYTES_PER_SECH,PP0H
        MOVFF SD_BYTES_PER_SEC,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,PP7HHH
        MOVFF PP0HH,PP7HH
        MOVFF PP0H,PP7H
        MOVFF PP0,PP7
        MOVF PP7,W,0
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_FILE_SIZE_LEFT,F
        MOVF PP7H,W,0
        SUBWFB SD_FILE_SIZE_LEFTH,F
        MOVF PP7HH,W,0
        SUBWFB SD_FILE_SIZE_LEFTHH,F
        MOVF PP7HHH,W,0
        SUBWFB SD_FILE_SIZE_LEFTHHH,F
F4_001057 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] WEND
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL175
BC@LL176
F4_001058 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_CLUSTER_NUMH,PP0H
        MOVFF SD_CLUSTER_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_001059 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_001060 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_001061 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_FILE_SIZE_LEFT = 0 THEN
        MOVF SD_FILE_SIZE_LEFTHHH,W
        IORWF SD_FILE_SIZE_LEFTHH,W
        IORWF SD_FILE_SIZE_LEFTH,W
        IORWF SD_FILE_SIZE_LEFT,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL180
F4_001062 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_SEC_IN_CLUSTER
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL181
BC@LL180
F4_001063 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_001064 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = (SD_FILE_SIZE_LEFT - 1) / SD_BYTES_PER_SEC
        MOVLB 2
RAM_BANK = 2
        DECF SD_FILE_SIZE_LEFT,W
        MOVWF PP7,0
        MOVLW 0
        SUBWFB SD_FILE_SIZE_LEFTH,W
        MOVWF PP7H,0
        MOVLW 0
        SUBWFB SD_FILE_SIZE_LEFTHH,W
        MOVWF PP7HH,0
        MOVLW 0
        SUBWFB SD_FILE_SIZE_LEFTHHH,W
        MOVWF PP7HHH,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVFF SD_BYTES_PER_SECH,PP2H
        MOVFF SD_BYTES_PER_SEC,PP2
        F@CALL L@DIV
        MOVFF PP0,SD_SEC_IN_CLUSTER
F4_001065 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL181
        MOVLB 0
RAM_BANK = 0
F4_001066 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_001067 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_SEC_IN_CLUSTER
        MOVF SD_SEC_IN_CLUSTER,W
        ADDWF SD_DATA_SEC,W
        MOVWF SD_DATA_SEC
        MOVLW 0
        ADDWFC SD_DATA_SECH,W
        MOVWF SD_DATA_SECH
        MOVLW 0
        ADDWFC SD_DATA_SECHH,W
        MOVWF SD_DATA_SECHH
        MOVLW 0
        ADDWFC SD_DATA_SECHHH,W
        MOVWF SD_DATA_SECHHH
F4_001068 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_001069 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SEC_IN_CLUSTER = SD_SEC_IN_CLUSTER + 1
        INCF SD_SEC_IN_CLUSTER,F
F4_001070 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_001071 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_001072 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001074 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_RETURN = 1 THEN
        MOVLW 1
        SUBWF SD_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL183
F4_001075 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001076 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001077 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL183
F4_001078 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_BUFFER_POS = SD_FILE_SIZE_LEFT // SD_BYTES_PER_SEC
        MOVFF SD_FILE_SIZE_LEFTHHH,PP0HHH
        MOVFF SD_FILE_SIZE_LEFTHH,PP0HH
        MOVFF SD_FILE_SIZE_LEFTH,PP0H
        MOVFF SD_FILE_SIZE_LEFT,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVFF SD_BYTES_PER_SECH,PP2H
        MOVFF SD_BYTES_PER_SEC,PP2
        F@CALL L@MOD
        MOVFF PP2H,SD_DATA_BUFFER_POSH
        MOVFF PP2,SD_DATA_BUFFER_POS
F4_001079 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_IDX = SD_DATA_BUFFER_POS
        MOVFF SD_DATA_BUFFER_POSH,SD_BUFFER_IDXH
        MOVFF SD_DATA_BUFFER_POS,SD_BUFFER_IDX
F4_001080 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_DATA_BUFFER_POS = 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_DATA_BUFFER_POSH,W
        IORWF SD_DATA_BUFFER_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL185
F4_001081 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_FILE_SIZE_LEFT > 0 THEN
        BCF STATUS,3,0
        MOVLB 2
RAM_BANK = 2
        BTFSC SD_FILE_SIZE_LEFTHHH,7
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL187
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_SIZE_LEFT,W
        IORWF SD_FILE_SIZE_LEFTH,W
        IORWF SD_FILE_SIZE_LEFTHH,W
        IORWF SD_FILE_SIZE_LEFTHHH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL187
F4_001082 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_BUFFER_POS = SD_BYTES_PER_SEC
        MOVFF SD_BYTES_PER_SECH,SD_DATA_BUFFER_POSH
        MOVFF SD_BYTES_PER_SEC,SD_DATA_BUFFER_POS
F4_001083 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] INC SD_SECTOR_NUM
        INCF SD_SECTOR_NUM,F,0
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,F,0
        ADDWFC SD_SECTOR_NUMHH,F,0
        ADDWFC SD_SECTOR_NUMHHH,F,0
F4_001084 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL187
F4_001085 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL185
F4_001086 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_IDX = 1
        MOVLB 2
RAM_BANK = 2
        CLRF SD_CLUSTER_SEQ_IDXH
        MOVLW 1
        MOVWF SD_CLUSTER_SEQ_IDX
F4_001087 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_SEQ_NUM = 1
        CLRF SD_CLUSTER_SEQ_NUMH
        MOVWF SD_CLUSTER_SEQ_NUM
F4_001088 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
        BSF _B#VR1,0
F4_001089 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_PTR = SD_FILE_SIZE
        MOVFF SD_FILE_SIZEHHH,SD_BYTES_READHHH
        MOVFF SD_FILE_SIZEHH,SD_BYTES_READHH
        MOVFF SD_FILE_SIZEH,SD_BYTES_READH
        MOVFF SD_FILE_SIZE,SD_BYTES_READ
F4_001090 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_001091 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001097 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DELETE_FILE MACRO
SD_DELETE_FILE  MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_DELETE_FILE_SUB
        ENDM
SD_DELETE_FILE_SUB
F4_001108 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_CHECK_FOR_FILE_SUB
        F@CALL SD_CHECK_FOR_FILE_SUB
F4_001109 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR <> 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_EXTENDED_RETURN_ROOT_DIR,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL189
F4_001110 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001111 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001112 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL189
F4_001113 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM.BYTE0 = SD_ROOT_DIR_FILE[$1A]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#26,W
        MOVWF SD_CLUSTER_NUM
F4_001114 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM.BYTE1 = SD_ROOT_DIR_FILE[$1B]
        MOVF SD_ROOT_DIR_FILE#27,W
        MOVWF SD_CLUSTER_NUMH
F4_001115 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS
        MOVFF SD_ROOT_DIR_POSH,SD_WRITE_BUFFER_POSH
        MOVFF SD_ROOT_DIR_POS,SD_WRITE_BUFFER_POS
F4_001116 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = $E5
        MOVLW 229
        MOVWF SD_DATA_IO
F4_001117 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001118 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001119 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_RW_OPTION
F4_001120 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] REPEAT
BC@LL190
        MOVLB 0
RAM_BANK = 0
F4_001121 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        CLRF PP0HHH,0
        CLRF PP0HH,0
        MOVFF SD_CLUSTER_NUMH,PP0H
        MOVFF SD_CLUSTER_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_001122 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_001123 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_001124 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_SECTOR_NUM <> (SD_FAT1 + SD_FAT_SEC) THEN
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF PBP#VAR0,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF PBP#VAR0H,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF PBP#VAR0HH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF PBP#VAR0HHH,0
        MOVF PBP#VAR0,W,0
        SUBWF SD_SECTOR_NUM,W,0
        BNZ CP@LB26
        MOVF PBP#VAR0H,W,0
        SUBWF SD_SECTOR_NUMH,W,0
        BNZ CP@LB26
        MOVF PBP#VAR0HH,W,0
        SUBWF SD_SECTOR_NUMHH,W,0
        BNZ CP@LB26
        MOVF PBP#VAR0HHH,W,0
        SUBWF SD_SECTOR_NUMHHH,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL193
CP@LB26
F4_001125 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_RW_OPTION > 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_RW_OPTION,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL195
F4_001126 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001127 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM - SD_FAT1 + SD_FAT2
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        SUBWF SD_SECTOR_NUM,W,0
        MOVWF PP7,0
        MOVF SD_FAT1H,W
        SUBWFB SD_SECTOR_NUMH,W,0
        MOVWF PP7H,0
        MOVF SD_FAT1HH,W
        SUBWFB SD_SECTOR_NUMHH,W,0
        MOVWF PP7HH,0
        MOVF SD_FAT1HHH,W
        SUBWFB SD_SECTOR_NUMHHH,W,0
        MOVWF PP7HHH,0
        MOVF SD_FAT2,W
        ADDWF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT2H,W
        ADDWFC PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT2HH,W
        ADDWFC PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT2HHH,W
        ADDWFC PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_001128 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_001129 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL195
F4_001130 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_001131 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_001132 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001134 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL193
F4_001135 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_001136 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_001137 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_001138 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_WRITE_BUFFER_POSH
        MOVFF SD_FAT_BUFFER_POS,SD_WRITE_BUFFER_POS
F4_001139 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_IO = $00
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_IO
F4_001140 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001141 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BUFFER_POS = SD_FAT_BUFFER_POS + 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_FAT_BUFFER_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_FAT_BUFFER_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001142 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001143 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] UNTIL SD_CLUSTER_NUM = $FFFF
        MOVLB 2
RAM_BANK = 2
        INCF SD_CLUSTER_NUM,W
        BNZ CP@LB27
        INCF SD_CLUSTER_NUMH,W
CP@LB27
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL190
BC@LL191
F4_001144 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001145 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM - SD_FAT1 + SD_FAT2
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        SUBWF SD_SECTOR_NUM,W,0
        MOVWF PP7,0
        MOVF SD_FAT1H,W
        SUBWFB SD_SECTOR_NUMH,W,0
        MOVWF PP7H,0
        MOVF SD_FAT1HH,W
        SUBWFB SD_SECTOR_NUMHH,W,0
        MOVWF PP7HH,0
        MOVF SD_FAT1HHH,W
        SUBWFB SD_SECTOR_NUMHHH,W,0
        MOVWF PP7HHH,0
        MOVF SD_FAT2,W
        ADDWF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT2H,W
        ADDWFC PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT2HH,W
        ADDWFC PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT2HHH,W
        ADDWFC PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_001146 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_001147 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_EXTENDED_RETURN
F4_001148 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001154 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_INIT_FS_MSSP MACRO P1
SD_INIT_FS_MSSP MACRO P1,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT > 1)
        ERROR "(IN ASM) SD_INIT_FS_MSSP - TOO MANY PARAMETERS"
 ELSE
 IF (PRM_COUNT == 0)
        MOVLW 32
        MOVWF SSPCON1,0
 ELSE
 IF (PRM_1 != BYTE) && (PRM_1 != NUM8)
        ERROR "(IN ASM) SD_INIT_FS_MSSP - SPEED(PARAM1) SHOULD BE A BYTE VARIABLE OR NUMBER"
 ENDIF
 IF (PRM_1 == BYTE)
        BYTE_BYTE P1, SSPCON1
        BSF SSPCON1,5,0
 ENDIF
 IF (PRM_1 == NUM8)
        NUM_DWORD P1, SSPCON1
RAM_BANK = 0
        BSF SSPCON1,5,0
 ENDIF
 ENDIF
 ENDIF
        F@CALL SD_INIT_FS_MSSP_SUB
 IF (SD_INIT_FS_MSSP_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_INIT_FS_MSSP - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
SD_INIT_FS_MSSP_SUB
F4_001193 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN_INT = SD_INIT_MSSP SSPCON1
VARIABLE PRM_1=2
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_INIT_MSSP_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=SSPCON1
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=SD_EXTENDED_RETURN_INT,SD_INIT_MSSP_RETURN=1,PRM_COUNT=1
        SD_INIT_MSSP SSPCON1,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=SD_EXTENDED_RETURN_INT,SD_INIT_MSSP_RETURN=1,PRM_COUNT=1
VARIABLE PRM_1=2
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_INIT_MSSP_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=SSPCON1
F4_001194 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN_INT = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN_INT,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL197
F4_001195 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001196 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001197 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL197
F4_001198 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = $00
        CLRF SD_SECTOR_NUMHHH,0
        CLRF SD_SECTOR_NUMHH,0
        CLRF SD_SECTOR_NUMH,0
        CLRF SD_SECTOR_NUM,0
F4_001199 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_001200 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001202 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_BUFFER0[0] = $EB AND SD_BUFFER0[2] = $90 THEN
        MOVF SD_BUFFER0#0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 235
        SUBWF PBP#VAR0,W,0
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVF SD_BUFFER0#2,W,0
        MOVWF PBP#VAR0,0
        MOVLW 144
        SUBWF PBP#VAR0,W,0
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        ANDWF SP#P9,F,0
        BTFSC STATUS,2,0
        GO@TO BC@LL199
F4_001204 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BOOT_RECORD = $0000
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BOOT_RECORDH
        CLRF SD_BOOT_RECORD
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL198
F4_001205 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSEIF SD_BUFFER0[0] = $E9 THEN
BC@LL199
        MOVF SD_BUFFER0#0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 233
        SUBWF PBP#VAR0,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL200
F4_001207 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BOOT_RECORD = $0000
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BOOT_RECORDH
        CLRF SD_BOOT_RECORD
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL201
BC@LL200
F4_001208 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ELSE
F4_001210 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BOOT_RECORD = SD_BUFFER1[$0C6] + 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER1#198,W
        MOVWF PBP#VAR1,0
        CLRF SD_BOOT_RECORDH
        MOVFF PBP#VAR1,SD_BOOT_RECORD
F4_001211 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] ENDIF
BC@LL201
        MOVLB 0
RAM_BANK = 0
BC@LL198
F4_001212 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_BOOT_RECORD
        CLRF SD_SECTOR_NUMHHH,0
        CLRF SD_SECTOR_NUMHH,0
        MOVFF SD_BOOT_RECORDH,SD_SECTOR_NUMH
        MOVFF SD_BOOT_RECORD,SD_SECTOR_NUM
F4_001213 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_001214 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001216 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTES_PER_SEC.BYTE0 = SD_BUFFER0[$0B]
        MOVF SD_BUFFER0#11,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTES_PER_SEC
F4_001217 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_BYTES_PER_SEC.BYTE1 = SD_BUFFER0[$0C]
        MOVF SD_BUFFER0#12,W,0
        MOVWF SD_BYTES_PER_SECH
F4_001218 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECS_PER_CLUSTER = SD_BUFFER0[$0D]
        MOVF SD_BUFFER0#13,W,0
        MOVWF SD_SECS_PER_CLUSTER
F4_001219 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RESERVED_SECS.BYTE0 = SD_BUFFER0[$0E]
        MOVF SD_BUFFER0#14,W,0
        MOVWF SD_RESERVED_SECS
F4_001220 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_RESERVED_SECS.BYTE1 = SD_BUFFER0[$0F]
        MOVF SD_BUFFER0#15,W,0
        MOVWF SD_RESERVED_SECSH
F4_001221 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_FATS = SD_BUFFER0[$10]
        MOVF SD_BUFFER0#16,W,0
        MOVWF SD_NUM_OF_FATS
F4_001222 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_ROOT_ENTRIES.BYTE0 = SD_BUFFER0[$11]
        MOVF SD_BUFFER0#17,W,0
        MOVWF SD_NUM_OF_ROOT_ENTRIES
F4_001223 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_ROOT_ENTRIES.BYTE1 = SD_BUFFER0[$12]
        MOVF SD_BUFFER0#18,W,0
        MOVWF SD_NUM_OF_ROOT_ENTRIESH
F4_001224 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECS_PER_FAT.BYTE0 = SD_BUFFER0[$16]
        MOVF SD_BUFFER0#22,W,0
        MOVWF SD_SECS_PER_FAT
F4_001225 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECS_PER_FAT.BYTE1 = SD_BUFFER0[$17]
        MOVF SD_BUFFER0#23,W,0
        MOVWF SD_SECS_PER_FATH
F4_001226 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_SECS.BYTE0 = SD_BUFFER0[$20]
        MOVF SD_BUFFER0#32,W,0
        MOVWF SD_NUM_OF_SECS
F4_001227 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_SECS.BYTE1 = SD_BUFFER0[$21]
        MOVF SD_BUFFER0#33,W,0
        MOVWF SD_NUM_OF_SECSH
F4_001228 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_SECS.BYTE2 = SD_BUFFER0[$22]
        MOVF SD_BUFFER0#34,W,0
        MOVWF SD_NUM_OF_SECSHH
F4_001229 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_NUM_OF_SECS.BYTE3 = SD_BUFFER0[$23]
        MOVF SD_BUFFER0#35,W,0
        MOVWF SD_NUM_OF_SECSHHH
F4_001230 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT1 = SD_BOOT_RECORD + SD_RESERVED_SECS
        MOVF SD_RESERVED_SECS,W
        ADDWF SD_BOOT_RECORD,W
        MOVWF SD_FAT1
        MOVF SD_RESERVED_SECSH,W
        ADDWFC SD_BOOT_RECORDH,W
        MOVWF SD_FAT1H
        MOVLW 0
        CLRF SD_FAT1HH
        ADDWFC SD_FAT1HH,F
        CLRF SD_FAT1HHH
F4_001231 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT2 = SD_BOOT_RECORD + SD_RESERVED_SECS + SD_SECS_PER_FAT
        MOVF SD_RESERVED_SECS,W
        ADDWF SD_BOOT_RECORD,W
        MOVWF PP7,0
        MOVF SD_RESERVED_SECSH,W
        ADDWFC SD_BOOT_RECORDH,W
        MOVWF PP7H,0
        MOVLW 0
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        MOVF SD_SECS_PER_FAT,W
        ADDWF PP7,W,0
        MOVWF SD_FAT2
        MOVF SD_SECS_PER_FATH,W
        ADDWFC PP7H,W,0
        MOVWF SD_FAT2H
        MOVLW 0
        ADDWFC PP7HH,W,0
        MOVWF SD_FAT2HH
        MOVLW 0
        ADDWFC PP7HHH,W,0
        MOVWF SD_FAT2HHH
F4_001232 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ROOT_DIR = SD_NUM_OF_FATS * SD_SECS_PER_FAT
        CLRF PP0HHH,0
        CLRF PP0HH,0
        CLRF PP0H,0
        MOVFF SD_NUM_OF_FATS,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVFF SD_SECS_PER_FATH,PP2H
        MOVFF SD_SECS_PER_FAT,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_ROOT_DIRHHH
        MOVFF PP0HH,SD_ROOT_DIRHH
        MOVFF PP0H,SD_ROOT_DIRH
        MOVFF PP0,SD_ROOT_DIR
F4_001233 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_ROOT_DIR = SD_BOOT_RECORD + SD_RESERVED_SECS + SD_ROOT_DIR
        MOVF SD_RESERVED_SECS,W
        ADDWF SD_BOOT_RECORD,W
        MOVWF PP7,0
        MOVF SD_RESERVED_SECSH,W
        ADDWFC SD_BOOT_RECORDH,W
        MOVWF PP7H,0
        MOVLW 0
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        MOVF PP7,W,0
        ADDWF SD_ROOT_DIR,F
        MOVF PP7H,W,0
        ADDWFC SD_ROOT_DIRH,F
        MOVF PP7HH,W,0
        ADDWFC SD_ROOT_DIRHH,F
        MOVF PP7HHH,W,0
        ADDWFC SD_ROOT_DIRHHH,F
F4_001234 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECS_IN_ROOT = SD_NUM_OF_ROOT_ENTRIES * 32
        MOVF SD_NUM_OF_ROOT_ENTRIESH,W
        MULLW 32
        MOVFF PRODL,SD_SECS_IN_ROOTH
        MOVF SD_NUM_OF_ROOT_ENTRIES,W
        MULLW 32
        MOVFF PRODL,SD_SECS_IN_ROOT
        MOVF PRODH,W,0
        ADDWF SD_SECS_IN_ROOTH,F
F4_001235 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECS_IN_ROOT = SD_SECS_IN_ROOT / SD_BYTES_PER_SEC
        MOVFF SD_SECS_IN_ROOTH,PP0H
        MOVFF SD_SECS_IN_ROOT,PP0
        MOVFF SD_BYTES_PER_SECH,PP1H
        MOVFF SD_BYTES_PER_SEC,PP1
        F@CALL D@VD
        MOVWF SD_SECS_IN_ROOT
        MOVFF PP0H,SD_SECS_IN_ROOTH
F4_001236 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DATA_AREA = SD_ROOT_DIR + SD_SECS_IN_ROOT
        MOVF SD_SECS_IN_ROOT,W
        ADDWF SD_ROOT_DIR,W
        MOVWF SD_DATA_AREA
        MOVF SD_SECS_IN_ROOTH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF SD_DATA_AREAH
        MOVLW 0
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF SD_DATA_AREAHH
        MOVLW 0
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF SD_DATA_AREAHHH
F4_001238 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_BOOT_RECORD + SD_NUM_OF_SECS - 1
        MOVF SD_BOOT_RECORD,W
        ADDWF SD_NUM_OF_SECS,W
        MOVWF PP7,0
        MOVF SD_BOOT_RECORDH,W
        ADDWFC SD_NUM_OF_SECSH,W
        MOVWF PP7H,0
        MOVLW 0
        ADDWFC SD_NUM_OF_SECSHH,W
        MOVWF PP7HH,0
        MOVLW 0
        ADDWFC SD_NUM_OF_SECSHHH,W
        MOVWF PP7HHH,0
        DECF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVLW 0
        SUBWFB PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVLW 0
        SUBWFB PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVLW 0
        SUBWFB PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_001239 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM - SD_DATA_AREA + 1
        MOVF SD_DATA_AREA,W
        SUBWF SD_SECTOR_NUM,W,0
        MOVWF PP7,0
        MOVF SD_DATA_AREAH,W
        SUBWFB SD_SECTOR_NUMH,W,0
        MOVWF PP7H,0
        MOVF SD_DATA_AREAHH,W
        SUBWFB SD_SECTOR_NUMHH,W,0
        MOVWF PP7HH,0
        MOVF SD_DATA_AREAHHH,W
        SUBWFB SD_SECTOR_NUMHHH,W,0
        MOVWF PP7HHH,0
        INCF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVLW 0
        ADDWFC PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVLW 0
        ADDWFC PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_001240 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM / SD_SECS_PER_CLUSTER
        MOVFF SD_SECTOR_NUMHHH,PP0HHH
        MOVFF SD_SECTOR_NUMHH,PP0HH
        MOVFF SD_SECTOR_NUMH,PP0H
        MOVFF SD_SECTOR_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL L@DIV
        MOVFF PP0HHH,SD_SECTOR_NUMHHH
        MOVFF PP0HH,SD_SECTOR_NUMHH
        MOVFF PP0H,SD_SECTOR_NUMH
        MOVFF PP0,SD_SECTOR_NUM
F4_001241 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_LAST_CLUSTER = SD_SECTOR_NUM + 1
        MOVLW 1
        ADDWF SD_SECTOR_NUM,W,0
        MOVWF SD_LAST_CLUSTER
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,W,0
        MOVWF SD_LAST_CLUSTERH
F4_001243 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_NAME = "        "
        LFSR 0,SD_FILE_NAME
        MOVLW HIGH (STR@LB1)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB1)
        MOVWF TBLPTRL,0
        F@CALL LOAD@MSTR
        CLRF INDF0,0
F4_001244 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_EXT = "   "
        LFSR 0,SD_FILE_EXT
        MOVLW 32
        MOVWF POSTINC0,0
        MOVWF POSTINC0,0
        MOVWF POSTINC0,0
        CLRF INDF0,0
F4_001245 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_DAY = 1
        MOVLW 1
        MOVWF SD_DAY
F4_001246 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_MONTH = 1
        MOVWF SD_MONTH
F4_001247 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_YEAR = 0
        CLRF SD_YEAR
F4_001248 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_MSECONDS = 0
        CLRF SD_MSECONDS
F4_001249 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_SECONDS = 0
        CLRF SD_SECONDS
F4_001250 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_MINUTES = 0
        CLRF SD_MINUTES
F4_001251 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_HOURS = 0
        CLRF SD_HOURS
F4_001252 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_FILE_NUM = 0
        CLRF SD_FILE_NUMH
        CLRF SD_FILE_NUM
F4_001253 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_001254 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001260 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_BYTE_TO_FILE MACRO P1
SD_WRITE_BYTE_TO_FILE   MACRO P1,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT >  1)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - TOO MANY PARAMETERS"
 ELSE
 IF (PRM_COUNT <  1)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - TOO FEW PARAMETERS"
 ELSE
 IF (PRM_1 != BYTE) && (PRM_1 != NUM8) && (PRM_1 != NUM16) && (PRM_1 != NUM32) && (PRM_1 != WORD) && (PRM_1 != DWORD)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - BYTE(PARAM 1) SHOULD BE A BYTE, WORD OR DWORD VARIABLE OR NUMBER"
 ENDIF
 IF (PRM_1 == BYTE)
        BYTE_BYTE P1, SD_IO_BYTE
 ENDIF
 IF (PRM_1 == NUM8)
        NUM_BYTE P1, SD_IO_BYTE
RAM_BANK = 0
 ENDIF
 IF (PRM_1 == NUM16)
        NUM_BYTE P1, SD_IO_BYTE
RAM_BANK = 0
 ENDIF
 IF (PRM_1 == NUM32)
        NUM_BYTE P1, SD_IO_BYTE
RAM_BANK = 0
 ENDIF
 IF (PRM_1 == WORD)
        BYTE_BYTE P1, SD_IO_BYTE
 ENDIF
 IF (PRM_1 == DWORD)
        BYTE_BYTE P1, SD_IO_BYTE
 ENDIF
 IF (PRM_1 == FLOAT)
        FLOAT_BYTE P1, SD_IO_BYTE
 ENDIF
        F@CALL SD_WRITE_BYTE_TO_FILE_SUB
 IF (SD_WRITE_BYTE_TO_FILE_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
 ENDIF
 ENDIF
        ENDM
F4_001318 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_WRITE_STRING_TO_FILE MACRO
SD_WRITE_STRING_TO_FILE MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT != 0)
        ERROR "(IN ASM) NO PARAMETERS REQUIRED FOR SD_WRITE_STRING_TO_FILE"
        EXITM
 ENDIF
        F@CALL SD_WRITE_STRING_TO_FILE_SUB
 IF (SD_WRITE_STRING_TO_FILE_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_WRITE_STRING_TO_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
SD_WRITE_STRING_TO_FILE_SUB
F4_001345 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IO_STRING_LENGTH = LEN(SD_IO_STRING)
        LFSR 0,SD_IO_STRING
        CLRF WREG,0
        MOVF POSTINC0,F,0
        BZ $ + 6
        INCFSZ WREG,F,0
        BRA $ - 6
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_IO_STRING_LENGTH
F4_001346 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IO_STRING_LENGTH = SD_IO_STRING_LENGTH - 1
        DECF SD_IO_STRING_LENGTH,F
F4_001347 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] FOR SD_IO_STRING_POS = 0 TO SD_IO_STRING_LENGTH
        CLRF SD_IO_STRING_POS
FR@LB203
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_IO_STRING_POS,W
        SUBWF SD_IO_STRING_LENGTH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO NX@LB204
F4_001348 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] SD_IO_BYTE = SD_IO_STRING[SD_IO_STRING_POS]
        LFSR 0,SD_IO_STRING
        MOVLB 2
RAM_BANK = 2
        MOVF SD_IO_STRING_POS,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_IO_BYTE
F4_001349 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] GOSUB SD_WRITE_BYTE_TO_FILE_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_BYTE_TO_FILE_SUB
F4_001350 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] IF SD_EXTENDED_RETURN = 1 THEN RETURN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL205
        RETURN 0
BC@LL205
F4_001351 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] NEXT SD_IO_STRING_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_IO_STRING_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB203
NX@LB204
F4_001352 EQU $ ; IN [V2.0 RFID 2ND GENERATION_LIB.PBP] RETURN
        RETURN 0
OVERLIBCODE
F4_EOF EQU $ ; V2.0 RFID 2ND GENERATION_LIB.PBP
F2_EOF EQU $ ; V2.0 RFID 2ND GENERATION.PRP
F1_SOF EQU $ ; V2.0 RFID 2ND GENERATION.BAS
F1_000036 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] ALL_DIGITAL = TRUE
        MOVLW 7
        MOVWF CMCON,0
        MOVLW 15
        MOVWF ADCON1,0
F1_000080 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] DELAYMS 200               'ALLOW CHIP TO SETTLE
        MOVLW 200
        F@CALL DL@MS
F1_000082 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] INPUT SD_DETECT           'SET SD DETECT PORT AS INPUT...
        BSF TRISA,0,0
F1_000085 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] LOW RFIDENABLE                ' TURN OFF RFID READER
        BCF TRISD,4,0
        BCF PORTD,4,0
F1_000086 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] USER_POINTER.LOWBYTE = EREAD UPA_L    'READ THE LOW AND HIGH BYTES OF...
        MOVLW 0
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF USER_POINTER
F1_000087 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] USER_POINTER.HIGHBYTE = EREAD UPA_H    '..USER POINTER ADDRESS FROM EEPROM
        MOVLW 1
        F@CALL EE@RD
        MOVWF USER_POINTERH
F1_000089 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] IF USER_POINTER = 0XFFFF THEN             'IF THE VALUE READ FROM EEPROM IS OXFFFF THEN THIS IS A NEW CHIP SO....
        INCF USER_POINTER,W
        BNZ CP@LB28
        INCF USER_POINTERH,W
CP@LB28
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL207
F1_000090 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] USER_POINTER = BUA                   '...WE WRITE THE LOW AND ..
        MOVLW 156
        MOVLB 3
RAM_BANK = 3
        MOVWF USER_POINTERH
        MOVLW 80
        MOVWF USER_POINTER
F1_000091 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] EWRITE UPA_L, [USER_POINTER.LOWBYTE]  '...HIGH BYTES OF THE BASE USER ADDRESS (0X9C500...
        CLRF EEADRH,0
        CLRF EEADR,0
        MOVF USER_POINTER,W
        F@CALL EE@WR@W
F1_000092 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] EWRITE UPA_H, [USER_POINTER.HIGHBYTE]  '...INTO THE EEPROM POINTER STORAGE SPOT (0X000 AND 0X001)
        CLRF EEADRH,0
        MOVLW 1
        MOVWF EEADR,0
        MOVF USER_POINTERH,W
        F@CALL EE@WR@W
F1_000094 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] ENDIF
BC@LL207
        MOVLB 0
RAM_BANK = 0
F1_000096 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] IF SD_DETECT = 0 THEN
        BTFSC PORTA,0,0
        GO@TO BC@LL209
F1_000097 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] CLS
        F@CALL LCD@CLS
F1_000098 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PRINT "DETECTED!"
        MOVLW HIGH (STR@LB2)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB2)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000099 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
F1_000100 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] GOSUB INIT_SD  '************ ONLY DO ONE TIME WHEN SD CARD DETECTED.
        F@CALL INIT_SD
F1_000101 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] GOSUB READ_SD
        F@CALL READ_SD
F1_000102 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] END IF
BC@LL209
F1_000107 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
START
F1_000109 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] CLS
        F@CALL LCD@CLS
F1_000110 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PRINT "STARTING..."
        MOVLW HIGH (STR@LB3)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB3)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000111 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
START2
F1_000114 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] GOSUB READ_TAG
        F@CALL READ_TAG
F1_000116 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] CLS
        F@CALL LCD@CLS
F1_000117 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PRINT "CHECKING"
        MOVLW HIGH (STR@LB4)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB4)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000118 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F1_000119 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] GOSUB CHECK_TAG
        F@CALL CHECK_TAG
F1_000120 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL211
F1_000121 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] CLS
        F@CALL LCD@CLS
F1_000122 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PRINT AT 1,1, "GOT A MATCH"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB5)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB5)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000123 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PRINT AT 2,1, STR USERIN
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 192
        F@CALL LCD@CRS
        MOVLW 4
        MOVWF GEN4,0
        MOVLW 3
        MOVWF PP2H,0
        MOVLW 207
        F@CALL SB@STROUT
F1_000124 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] GOSUB WRITEH
        F@CALL WRITEH
F1_000125 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] CLS
        F@CALL LCD@CLS
F1_000126 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PRINT "DONE!"
        MOVLW 68
        F@CALL PRINT
        MOVLW 79
        F@CALL PRINT
        MOVLW 78
        F@CALL PRINT
        MOVLW 69
        F@CALL PRINT
        MOVLW 33
        F@CALL PRINT
F1_000127 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PAUSE 4000
        MOVLW 15
        MOVWF PP1H,0
        MOVLW 160
        F@CALL DLY@W
F1_000128 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] GOTO START2
        F@JUMP START2
        F@JUMP BC@LL214
BC@LL211
F1_000129 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] ELSE
F1_000130 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] CLS
        F@CALL LCD@CLS
F1_000131 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PRINT "NO MATCH"
        MOVLW HIGH (STR@LB6)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB6)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000132 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
F1_000133 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] GOTO START2
        F@JUMP START2
F1_000134 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] ENDIF
BC@LL214
F1_000135 EQU $ ; IN [V2.0 RFID 2ND GENERATION.BAS] STOP
PB@LB216
        BRA PB@LB216
F5_SOF EQU $ ; READ TAG.INC
READ_TAG
F5_000012 EQU $ ; IN [READ TAG.INC] CLS
        F@CALL LCD@CLS
F5_000013 EQU $ ; IN [READ TAG.INC] PRINT AT 1,1, "ATTEMPTING TO"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB7)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB7)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F5_000014 EQU $ ; IN [READ TAG.INC] PRINT AT 2,1, "READ TAG...."
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 192
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB8)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB8)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F5_000016 EQU $ ; IN [READ TAG.INC] FLAG = 0                  'USED TO INDICATE A GOOD READ
        MOVLB 2
RAM_BANK = 2
        BCF _B#VR1,1
F5_000017 EQU $ ; IN [READ TAG.INC] HIGH RFIDENABLE                 ' TURN ON RFID READER
        BCF TRISD,4,0
        BSF PORTD,4,0
F5_000018 EQU $ ; IN [READ TAG.INC] PAUSE 10               'TIME FOR READER TO SETTLE
        MOVLW 10
        F@CALL DL@MS
F5_000020 EQU $ ; IN [READ TAG.INC] HSERIN 30000, TIMEOUT, [WAIT (0X82) ,STR TAGIN]  'WAIT FOR HEADER (0X82)
        MOVLW 117
        MOVWF GENH,0
        MOVLW 48
        MOVWF GEN,0
PB@LB217
        MOVLB 0
RAM_BANK = 0
        F@CALL HRSIN2
        BTFSS STATUS,0,0
        GO@TO TIMEOUT
        SUBLW 130
        BTFSS STATUS,2,0
        GO@TO PB@LB217
        LFSR 0,TAGIN
        MOVLW 10
        MOVWF PRODL,0
PB@LB220
        BSF STATUS,0,0
        F@CALL HRSIN2
        BTFSS STATUS,0,0
        GO@TO TIMEOUT
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA PB@LB220
F5_000022 EQU $ ; IN [READ TAG.INC] HSERIN [CHECKSUM]                'CHECK SUM
        F@CALL HRSIN
        MOVLB 3
RAM_BANK = 3
        MOVWF CHECKSUM
F5_000023 EQU $ ; IN [READ TAG.INC] HSERIN [ETX]                      'END OF TRANSMISSION (FOOTER...SHOULD BE 0X83)
        F@CALL HRSIN
        MOVWF ETX
F5_000024 EQU $ ; IN [READ TAG.INC] LOW RFIDENABLE                ' TURN OFF RFID READER
        BCF TRISD,4,0
        BCF PORTD,4,0
F5_000025 EQU $ ; IN [READ TAG.INC] IF ETX <> 0X83 THEN  GOTO READ_TAG 'TAG FOOTER WAS NOT CORRECT
        MOVLW 131
        SUBWF ETX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL221
        F@JUMP READ_TAG
BC@LL221
F5_000029 EQU $ ; IN [READ TAG.INC] FOR INDEX = 0 TO 9
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB223
        MOVLB 0
RAM_BANK = 0
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB224
F5_000030 EQU $ ; IN [READ TAG.INC] SELECT TAGIN[INDEX]
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
F5_000031 EQU $ ; IN [READ TAG.INC] CASE 0XB0 TO 0XB9
        MOVLW 176
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL225
        MOVLW 186
        SUBWF PBP#VAR1,W,0
        BTFSC STATUS,0,0
        GO@TO BC@LL225
F5_000032 EQU $ ; IN [READ TAG.INC] TV1 = TAGIN[INDEX]
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF TV1
F5_000033 EQU $ ; IN [READ TAG.INC] CLEARBIT TV1 , 7
        BCF TV1,7
F5_000034 EQU $ ; IN [READ TAG.INC] TAGIN[INDEX] = TV1
        LFSR 0,TAGIN
        MOVF INDEX,W
        MOVFF TV1,PLUSW0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL224
BC@LL225
F5_000036 EQU $ ; IN [READ TAG.INC] CASE 0X81 TO 0X86
        MOVLW 129
        SUBWF PBP#VAR1,W,0
        BTFSS STATUS,0,0
        GO@TO BC@LL228
        MOVLW 135
        SUBWF PBP#VAR1,W,0
        BTFSC STATUS,0,0
        GO@TO BC@LL228
F5_000037 EQU $ ; IN [READ TAG.INC] TV1 = TAGIN[INDEX]
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF TV1
F5_000038 EQU $ ; IN [READ TAG.INC] CLEARBIT TV1 , 7
        BCF TV1,7
F5_000039 EQU $ ; IN [READ TAG.INC] SETBIT TV1, 6
        BSF TV1,6
F5_000040 EQU $ ; IN [READ TAG.INC] TAGIN[INDEX] = TV1
        LFSR 0,TAGIN
        MOVF INDEX,W
        MOVFF TV1,PLUSW0
F5_000042 EQU $ ; IN [READ TAG.INC] END SELECT
BC@LL228
        MOVLB 0
RAM_BANK = 0
BC@LL224
F5_000043 EQU $ ; IN [READ TAG.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB223
NX@LB224
F5_000045 EQU $ ; IN [READ TAG.INC] RETURN
        RETURN 0
TIMEOUT
F5_000047 EQU $ ; IN [READ TAG.INC] TIMEOUT: LOW RFIDENABLE       ' TURN OFF RFID READER ..NO TAG DETECTED FOR 30 SEC
        BCF TRISD,4,0
        BCF PORTD,4,0
F5_000049 EQU $ ; IN [READ TAG.INC] CLS
        F@CALL LCD@CLS
F5_000050 EQU $ ; IN [READ TAG.INC] PRINT AT 1,1, "NO TAG DETECTED"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB9)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB9)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F5_000051 EQU $ ; IN [READ TAG.INC] DELAYMS 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F5_000052 EQU $ ; IN [READ TAG.INC] SLEEP
        SLEEP
F5_EOF EQU $ ; READ TAG.INC
F6_SOF EQU $ ; READ SD.INC
READ_SD
F6_000011 EQU $ ; IN [READ SD.INC] READ_SD: CLS
        F@CALL LCD@CLS
F6_000012 EQU $ ; IN [READ SD.INC] MYCOUNT = 0
        MOVLB 3
RAM_BANK = 3
        CLRF MYCOUNTH
        CLRF MYCOUNT
F6_000014 EQU $ ; IN [READ SD.INC] FOR INDEX = 0 TO 7
        CLRF INDEX
FR@LB230
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB231
F6_000015 EQU $ ; IN [READ SD.INC] MODNUM[INDEX] = CREAD 0X9C40 + INDEX    'READ THE MODULE NUMBER INTO VARIABLE
        MOVLW 64
        MOVLB 3
RAM_BANK = 3
        ADDWF INDEX,W
        CLRF TBLPTRLH,0
        MOVWF TBLPTRL,0
        MOVLW 156
        ADDWFC TBLPTRLH,F,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,PBP#VAR1
        LFSR 0,MODNUM
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F6_000016 EQU $ ; IN [READ SD.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB230
NX@LB231
F6_000018 EQU $ ; IN [READ SD.INC] SD_FILE_NAME = STR MODNUM          'FILE NAME, UPPER CASE ONLY
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        CLRF INDF0,0
F6_000019 EQU $ ; IN [READ SD.INC] SD_FILE_EXT = "TXT"                'FILE EXT, UPPER CASE ONLY!
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0,0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F6_000020 EQU $ ; IN [READ SD.INC] RESPONSE = SD_OPEN_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_OPEN_FILE_RETURN=1,PRM_COUNT=0
        SD_OPEN_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_OPEN_FILE_RETURN=1,PRM_COUNT=0
F6_000021 EQU $ ; IN [READ SD.INC] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL232
F6_000022 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F6_000023 EQU $ ; IN [READ SD.INC] PRINT "FILE NOT FOUND"
        MOVLW HIGH (STR@LB10)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB10)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000025 EQU $ ; IN [READ SD.INC] SLEEP
        SLEEP
F6_000026 EQU $ ; IN [READ SD.INC] ENDIF
BC@LL232
F6_000027 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F6_000028 EQU $ ; IN [READ SD.INC] PRINT "OPENED"
        MOVLW HIGH (STR@LB11)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB11)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000030 EQU $ ; IN [READ SD.INC] USER_POINTER = BUA                   '...WE WRITE THE LOW AND ..
        MOVLW 156
        MOVLB 3
RAM_BANK = 3
        MOVWF USER_POINTERH
        MOVLW 80
        MOVWF USER_POINTER
F6_000031 EQU $ ; IN [READ SD.INC] EWRITE UPA_L, [USER_POINTER.LOWBYTE]  '...HIGH BYTES OF THE BASE USER ADDRESS (0X9C500...
        CLRF EEADRH,0
        CLRF EEADR,0
        MOVF USER_POINTER,W
        F@CALL EE@WR@W
F6_000032 EQU $ ; IN [READ SD.INC] EWRITE UPA_H, [USER_POINTER.HIGHBYTE]  '...INTO THE EEPROM POINTER STORAGE SPOT (0X000 AND 0X001)
        CLRF EEADRH,0
        MOVLW 1
        MOVWF EEADR,0
        MOVF USER_POINTERH,W
        F@CALL EE@WR@W
F6_000034 EQU $ ; IN [READ SD.INC] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F6_000036 EQU $ ; IN [READ SD.INC] WHILE SD_EOF < 1
BC@LL233
        MOVLB 0
RAM_BANK = 0
        BCF STATUS,3,0
        MOVLB 2
RAM_BANK = 2
        BTFSC _B#VR1,0
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL234
F6_000038 EQU $ ; IN [READ SD.INC] RESPONSE = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F6_000040 EQU $ ; IN [READ SD.INC] IF RESPONSE <> 0X5E THEN       'FIRST CHARACTER FOR EACH USER SHOULD BE "^"
        MOVLW 94
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL236
F6_000041 EQU $ ; IN [READ SD.INC] IF RESPONSE = 0X40 THEN
        MOVLW 64
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL238
F6_000042 EQU $ ; IN [READ SD.INC] EWRITE NOU, [MYCOUNT]     'WRITE TOTAL # OF USERS TO EEPROM
        CLRF EEADRH,0
        MOVLW 2
        MOVWF EEADR,0
        MOVLB 3
RAM_BANK = 3
        MOVF MYCOUNT,W
        F@CALL EE@WR@W
        MOVF MYCOUNTH,W
        F@CALL EE@WR@W
F6_000043 EQU $ ; IN [READ SD.INC] GOTO WRITE_MANAGER     'WE ARE FINISHED WITH THE USER TABLE
        MOVLB 0
RAM_BANK = 0
        F@JUMP WRITE_MANAGER
F6_000044 EQU $ ; IN [READ SD.INC] ENDIF
BC@LL238
F6_000045 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F6_000046 EQU $ ; IN [READ SD.INC] PRINT AT 1,1, "NO 5E (^)"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB12)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB12)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000047 EQU $ ; IN [READ SD.INC] PRINT AT 2,1, "STOPPED!"
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 192
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB13)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB13)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000048 EQU $ ; IN [READ SD.INC] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
F6_000049 EQU $ ; IN [READ SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F6_000050 EQU $ ; IN [READ SD.INC] STOP
PB@LB240
        BRA PB@LB240
F6_000051 EQU $ ; IN [READ SD.INC] SLEEP
        SLEEP
F6_000053 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F6_000054 EQU $ ; IN [READ SD.INC] PRINT RESPONSE,"^ PROBLEM.."      '*******EVENTUALLY WILL FLASH LED *************
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,W
        F@CALL PRINT
        MOVLW HIGH (STR@LB14)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB14)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000055 EQU $ ; IN [READ SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F6_000056 EQU $ ; IN [READ SD.INC] PAUSE 4000
        MOVLW 15
        MOVWF PP1H,0
        MOVLW 160
        F@CALL DLY@W
F6_000057 EQU $ ; IN [READ SD.INC] SLEEP
        SLEEP
F6_000058 EQU $ ; IN [READ SD.INC] ENDIF
BC@LL236
        MOVLB 0
RAM_BANK = 0
F6_000062 EQU $ ; IN [READ SD.INC] FOR INDEX = 0 TO 3                'NEXT 3 CHARACTERS WILL BE THE USER ID NUMBER
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB241
        MOVLB 0
RAM_BANK = 0
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB242
F6_000063 EQU $ ; IN [READ SD.INC] UTAG[INDEX] = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        LFSR 0,UTAG
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F6_000064 EQU $ ; IN [READ SD.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB241
NX@LB242
F6_000066 EQU $ ; IN [READ SD.INC] RESPONSE = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F6_000068 EQU $ ; IN [READ SD.INC] IF RESPONSE <> 0X3A THEN       'FIRST CHARACTER FOR EACH TAG SHOULD BE ":"
        MOVLW 58
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL243
F6_000069 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F6_000070 EQU $ ; IN [READ SD.INC] PRINT AT 1,1, "NO 3A (:).."      '*******EVENTUALLY WILL FLASH LED *************
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB15)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB15)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000071 EQU $ ; IN [READ SD.INC] PRINT AT 2,1, "STOPPED!"
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 192
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB16)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB16)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000072 EQU $ ; IN [READ SD.INC] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
F6_000073 EQU $ ; IN [READ SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F6_000074 EQU $ ; IN [READ SD.INC] SLEEP
        SLEEP
F6_000075 EQU $ ; IN [READ SD.INC] ENDIF
BC@LL243
F6_000077 EQU $ ; IN [READ SD.INC] FOR INDEX = 4 TO 13                'NEXT 9 CHARACTERS WILL BE THE USER TAG NUMBER
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX
FR@LB245
        MOVLB 0
RAM_BANK = 0
        MOVLW 14
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB246
F6_000078 EQU $ ; IN [READ SD.INC] UTAG[INDEX] = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        LFSR 0,UTAG
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F6_000079 EQU $ ; IN [READ SD.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB245
NX@LB246
F6_000081 EQU $ ; IN [READ SD.INC] UTAG[14] = 0XFF   'DUMMY BYTE
        MOVLB 3
RAM_BANK = 3
        SETF UTAG#14
F6_000082 EQU $ ; IN [READ SD.INC] UTAG[15] = 0XFF   'DUMMY BYTE
        SETF UTAG#15
F6_000083 EQU $ ; IN [READ SD.INC] FOR INDEX = 0 TO 15
        CLRF INDEX
FR@LB247
        MOVLB 0
RAM_BANK = 0
        MOVLW 16
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB248
F6_000084 EQU $ ; IN [READ SD.INC] CWRITE USER_POINTER + INDEX, [UTAG[INDEX]]    'HERE WE ARE WRITING 16 BYTE CHUNK TO THE PROGRAM MEMORY (MUST BE WRITTEN IN 8 OR 16 BYTE CHUNKS)
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        ADDWF USER_POINTER,W
        MOVWF TBLPTRL,0
        MOVLW 0
        ADDWFC USER_POINTERH,W
        MOVWF TBLPTRLH,0
        LFSR 0,UTAG
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        F@CALL C@WRITE
F6_000085 EQU $ ; IN [READ SD.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB247
NX@LB248
F6_000086 EQU $ ; IN [READ SD.INC] USER_POINTER = USER_POINTER + 16      'HERE WE WILL UPDATE THE USER POINTER TO REFLECT..
        MOVLW 16
        MOVLB 3
RAM_BANK = 3
        ADDWF USER_POINTER,F
        MOVLW 0
        ADDWFC USER_POINTERH,F
F6_000087 EQU $ ; IN [READ SD.INC] EWRITE UPA_L, [USER_POINTER.LOWBYTE]   'OUR PROGRESS SO FAR. IF A PROBLEM ARISES THEN WE HAVE NOT LOST ALL
        CLRF EEADRH,0
        CLRF EEADR,0
        MOVF USER_POINTER,W
        F@CALL EE@WR@W
F6_000088 EQU $ ; IN [READ SD.INC] EWRITE UPA_H, [USER_POINTER.HIGHBYTE]
        CLRF EEADRH,0
        MOVLW 1
        MOVWF EEADR,0
        MOVF USER_POINTERH,W
        F@CALL EE@WR@W
F6_000089 EQU $ ; IN [READ SD.INC] INC MYCOUNT    'KEEPS TRACK OF HOW MANY USERS WE HAVE ADDED
        INFSNZ MYCOUNT,F
        INCF MYCOUNTH,F
F6_000090 EQU $ ; IN [READ SD.INC] PRINT MYCOUNT
        MOVF MYCOUNT,W
        F@CALL PRINT
F6_000091 EQU $ ; IN [READ SD.INC] WEND
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL233
BC@LL234
WRITE_MANAGER
F6_000094 EQU $ ; IN [READ SD.INC] FOR INDEX = MMH TO 0 STEP -1       'HERE WE MOVE ALL OLD HISTORY DOWN ONE NOTCH TO READY 1ST PLACE FOR NEW ENTRY
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX
FR@LB249
        MOVLB 0
RAM_BANK = 0
F6_000095 EQU $ ; IN [READ SD.INC] FOR INDEX2 = 0 TO 7
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX2H
        CLRF INDEX2
FR@LB251
        MOVLB 0
RAM_BANK = 0
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX2H,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO NX@LB252
        MOVLW 8
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX2,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB252
F6_000096 EQU $ ; IN [READ SD.INC] TV1 = EREAD (INDEX * 8) + INDEX2 + SMA
        CLRF PP7H,0
        MOVFF INDEX,PP7
        MOVF PP7H,W,0
        MULLW 8
        MOVFF PRODL,PP7H
        MOVF PP7,W,0
        MULLW 8
        MOVFF PRODL,PP7
        MOVF PRODH,W,0
        ADDWF PP7H,F,0
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX2,W
        ADDWF PP7,F,0
        MOVF INDEX2H,W
        ADDWFC PP7H,F,0
        MOVLW 160
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 3
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        F@CALL EE@RD@W
        MOVWF TV1
F6_000097 EQU $ ; IN [READ SD.INC] EWRITE (INDEX * 8) + INDEX2 + 8 + SMA,[TV1]
        CLRF PP7H,0
        MOVFF INDEX,PP7
        MOVF PP7H,W,0
        MULLW 8
        MOVFF PRODL,PP7H
        MOVF PP7,W,0
        MULLW 8
        MOVFF PRODL,PP7
        MOVF PRODH,W,0
        ADDWF PP7H,F,0
        MOVF INDEX2,W
        ADDWF PP7,F,0
        MOVF INDEX2H,W
        ADDWFC PP7H,F,0
        MOVLW 8
        ADDWF PP7,F,0
        MOVLW 0
        ADDWFC PP7H,F,0
        MOVLW 160
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 3
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        MOVF TV1,W
        F@CALL EE@WR@W
F6_000098 EQU $ ; IN [READ SD.INC] NEXT INDEX2
        INCF INDEX2,F
        BTFSC STATUS,2,0
        INCF INDEX2H,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB251
NX@LB252
F6_000099 EQU $ ; IN [READ SD.INC] NEXT INDEX
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO FR@LB249
NX@LB250
F6_000101 EQU $ ; IN [READ SD.INC] FOR INDEX = 0 TO 7    'WRITE MANAGER ID AND DATE TO HISTORY FILE IN SPOT 1
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB253
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB254
F6_000102 EQU $ ; IN [READ SD.INC] RESPONSE = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F6_000103 EQU $ ; IN [READ SD.INC] EWRITE SMA + INDEX, [RESPONSE]
        MOVLW 160
        MOVLB 3
RAM_BANK = 3
        ADDWF INDEX,W
        CLRF EEADRH,0
        MOVWF EEADR,0
        MOVLW 3
        ADDWFC EEADRH,F,0
        MOVF RESPONSE,W
        F@CALL EE@WR@W
F6_000104 EQU $ ; IN [READ SD.INC] NEXT 'INDEX
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB253
NX@LB254
F6_000106 EQU $ ; IN [READ SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F6_000107 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F6_000108 EQU $ ; IN [READ SD.INC] PRINT "MANAGER DONE"
        MOVLW HIGH (STR@LB17)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB17)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000109 EQU $ ; IN [READ SD.INC] SLEEP
        SLEEP
F6_EOF EQU $ ; READ SD.INC
F7_SOF EQU $ ; WRITE SD.INC
WRITE_SD
F7_000016 EQU $ ; IN [WRITE SD.INC] SD_FILE_NAME = STR MODNUM + "W"      'MODULE FILE NAME WITH 'W' APPENDED TO DIFFERENIATE FROM INPUT FILE, UPPER CASE ONLY!
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        MOVLW 87
        MOVWF POSTINC0,0
        CLRF INDF0,0
F7_000017 EQU $ ; IN [WRITE SD.INC] SD_FILE_EXT = "TXT"                  'FILE EXT, UPPER CASE ONLY!
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0,0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F7_000018 EQU $ ; IN [WRITE SD.INC] RESPONSE = SD_CHECK_FOR_FILE         'CHECK IF FILE EXISTS ALREADY
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
        SD_CHECK_FOR_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
F7_000019 EQU $ ; IN [WRITE SD.INC] IF RESPONSE = 0 THEN
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL255
F7_000020 EQU $ ; IN [WRITE SD.INC] SD_DELETE_FILE               ' IF FILE EXISTS THEN DELETE IT........
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
        SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F7_000021 EQU $ ; IN [WRITE SD.INC] ENDIF
BC@LL255
F7_000022 EQU $ ; IN [WRITE SD.INC] SD_NEW_FILE     'CREATE NEW FILE
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
        SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F7_000023 EQU $ ; IN [WRITE SD.INC] SD_CLOSE_FILE   'CLOSE FILE NOW THAT IS HAS BEEN CREATED... ONLY ONE FILE AT A TIME CAN BE OPENED
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F7_000025 EQU $ ; IN [WRITE SD.INC] SD_FILE_NAME = STR MODNUM + "W"      'MODULE FILE NAME WITH 'W' APPENDED TO DIFFERENIATE FROM INPUT FILE, UPPER CASE ONLY!
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        MOVLW 87
        MOVWF POSTINC0,0
        CLRF INDF0,0
F7_000026 EQU $ ; IN [WRITE SD.INC] SD_FILE_EXT = "TXT"                'FILE EXT, UPPER CASE ONLY!
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0,0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F7_000027 EQU $ ; IN [WRITE SD.INC] RESPONSE = SD_APPEND_FILE     'HERE WE ARE GOING TO 'APPEND' THE OUTPUT FILE WITH DATA SO FAR
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_APPEND_FILE_RETURN=1,PRM_COUNT=0
        SD_APPEND_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_APPEND_FILE_RETURN=1,PRM_COUNT=0
F7_000028 EQU $ ; IN [WRITE SD.INC] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL257
F7_000029 EQU $ ; IN [WRITE SD.INC] CLS
        F@CALL LCD@CLS
F7_000030 EQU $ ; IN [WRITE SD.INC] PRINT "FILE NOT FOUND"
        MOVLW HIGH (STR@LB18)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB18)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F7_000032 EQU $ ; IN [WRITE SD.INC] SLEEP
        SLEEP
F7_000033 EQU $ ; IN [WRITE SD.INC] ENDIF
BC@LL257
CLOSE_FILE
F7_000039 EQU $ ; IN [WRITE SD.INC] SD_CLOSE_FILE                                           'CLOSE FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F7_000040 EQU $ ; IN [WRITE SD.INC] RETURN
        RETURN 0
F7_EOF EQU $ ; WRITE SD.INC
F8_SOF EQU $ ; INIT SD.INC
INIT_SD
F8_000012 EQU $ ; IN [INIT SD.INC] CLS
        F@CALL LCD@CLS
F8_000013 EQU $ ; IN [INIT SD.INC] PRINT AT 1,1, "READY TO INIT"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB19)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB19)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F8_000014 EQU $ ; IN [INIT SD.INC] FOR INDEX = 0 TO 2   'WE ALLOW 3 TRIES TO INTIALIZE THE SD CARD
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB259
        MOVLB 0
RAM_BANK = 0
        MOVLW 3
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB260
F8_000015 EQU $ ; IN [INIT SD.INC] CLS
        F@CALL LCD@CLS
F8_000016 EQU $ ; IN [INIT SD.INC] PRINT "INIT ", INDEX
        MOVLW 73
        F@CALL PRINT
        MOVLW 110
        F@CALL PRINT
        MOVLW 105
        F@CALL PRINT
        MOVLW 116
        F@CALL PRINT
        MOVLW 32
        F@CALL PRINT
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        F@CALL PRINT
F8_000017 EQU $ ; IN [INIT SD.INC] RESPONSE = SD_INIT_FS_MSSP SD_SPI_FOSC_04
        MOVLB 0
RAM_BANK = 0
VARIABLE PRM_1=8
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_INIT_FS_MSSP_LST_PRM=0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_INIT_FS_MSSP_RETURN=1,PRM_COUNT=1
        SD_INIT_FS_MSSP 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_INIT_FS_MSSP_RETURN=1,PRM_COUNT=1
VARIABLE PRM_1=8
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_INIT_FS_MSSP_LST_PRM=0
F8_000018 EQU $ ; IN [INIT SD.INC] IF RESPONSE = 0 THEN
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL261
F8_000019 EQU $ ; IN [INIT SD.INC] CLS
        F@CALL LCD@CLS
F8_000020 EQU $ ; IN [INIT SD.INC] PRINT "INIT GOOD"
        MOVLW HIGH (STR@LB20)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB20)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F8_000021 EQU $ ; IN [INIT SD.INC] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
F8_000022 EQU $ ; IN [INIT SD.INC] RETURN
        RETURN 0
F8_000023 EQU $ ; IN [INIT SD.INC] ENDIF
BC@LL261
F8_000024 EQU $ ; IN [INIT SD.INC] NEXT INDEX     'NEXT TRY TO INTITIALIZE CARD
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB259
NX@LB260
F8_000027 EQU $ ; IN [INIT SD.INC] CLS
        F@CALL LCD@CLS
F8_000028 EQU $ ; IN [INIT SD.INC] PRINT "NO INIT!"     'EVENTUALLY WE WILL FLASH A LED HERE TO TELL OPERATOR THE INIT FAILED
        MOVLW HIGH (STR@LB21)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB21)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F8_000029 EQU $ ; IN [INIT SD.INC] PAUSE 3000
        MOVLW 11
        MOVWF PP1H,0
        MOVLW 184
        F@CALL DLY@W
F8_000030 EQU $ ; IN [INIT SD.INC] RETURN
        RETURN 0
F8_EOF EQU $ ; INIT SD.INC
F9_SOF EQU $ ; CHECK TAG.INC
CHECK_TAG
F9_000004 EQU $ ; IN [CHECK TAG.INC] CHECK_TAG:    RESPONSE = 0        'PROCESS WILL SET RESPONSE TO 1 IF TAG IS FOUND
        MOVLB 3
RAM_BANK = 3
        CLRF RESPONSE
F9_000005 EQU $ ; IN [CHECK TAG.INC] IF USER_POINTER = BUA THEN    'THERE ARE NO USER ENTRIES IN THE TABLE
        MOVF USER_POINTERH,W
        XORLW 156
        MOVLW 80
        BTFSC STATUS,2,0
        XORWF USER_POINTER,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL263
F9_000006 EQU $ ; IN [CHECK TAG.INC] CLS
        F@CALL LCD@CLS
F9_000007 EQU $ ; IN [CHECK TAG.INC] PRINT "NO USERS"
        MOVLW HIGH (STR@LB22)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB22)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F9_000008 EQU $ ; IN [CHECK TAG.INC] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F9_000009 EQU $ ; IN [CHECK TAG.INC] RETURN
        RETURN 0
F9_000010 EQU $ ; IN [CHECK TAG.INC] ENDIF
BC@LL263
F9_000011 EQU $ ; IN [CHECK TAG.INC] INDEX2 = BUA   ' START SEARCH IN FIRST USER MEMORY SPOT
        MOVLW 156
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX2H
        MOVLW 80
        MOVWF INDEX2
NEXTTAG
        MOVLB 0
RAM_BANK = 0
F9_000012 EQU $ ; IN [CHECK TAG.INC] NEXTTAG:  INDEX = 0
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
F9_000013 EQU $ ; IN [CHECK TAG.INC] RESPONSE = 0     'PROCESS WILL SET FLAG TO 1 IF TAG IS FOUND
        CLRF RESPONSE
F9_000014 EQU $ ; IN [CHECK TAG.INC] REPEAT      'REPEAT UNTIL ALL TAG DIGITS ARE CHECKED
BC@LL264
        MOVLB 0
RAM_BANK = 0
F9_000015 EQU $ ; IN [CHECK TAG.INC] TV1 = CREAD TAGOFFSET + INDEX2 + INDEX   'TAGOFFSET JUMPS OVER USER #
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        ADDWF INDEX2,W
        MOVWF PP7,0
        MOVLW 0
        ADDWFC INDEX2H,W
        MOVWF PP7H,0
        MOVF INDEX,W
        ADDWF PP7,W,0
        MOVWF TBLPTRL,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF TBLPTRLH,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,TV1
F9_000016 EQU $ ; IN [CHECK TAG.INC] IF TV1 = TAGIN[INDEX] THEN
        LFSR 0,TAGIN
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
        MOVF TV1,W
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL267
F9_000017 EQU $ ; IN [CHECK TAG.INC] RESPONSE = 1      'DIGITS MATCH
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF RESPONSE
F9_000018 EQU $ ; IN [CHECK TAG.INC] INC INDEX      'CHECK NEXT DIGIT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL268
BC@LL267
F9_000019 EQU $ ; IN [CHECK TAG.INC] ELSE
F9_000020 EQU $ ; IN [CHECK TAG.INC] RESPONSE = 0     'DIGIT DOES NOT MATCH, THEREFORE
        MOVLB 3
RAM_BANK = 3
        CLRF RESPONSE
F9_000021 EQU $ ; IN [CHECK TAG.INC] INDEX = 10  'WE ARE FINISHED WITH THIS TAG
        MOVLW 10
        MOVWF INDEX
F9_000022 EQU $ ; IN [CHECK TAG.INC] ENDIF
BC@LL268
        MOVLB 0
RAM_BANK = 0
F9_000023 EQU $ ; IN [CHECK TAG.INC] UNTIL INDEX > 9
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL264
BC@LL265
F9_000024 EQU $ ; IN [CHECK TAG.INC] IF RESPONSE = 1 THEN      'WRITE USER OF TAG INTO USERIN VARIABLE ARRAY
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL270
F9_000025 EQU $ ; IN [CHECK TAG.INC] FOR INDEX = 0 TO 3
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB272
        MOVLB 0
RAM_BANK = 0
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB273
F9_000026 EQU $ ; IN [CHECK TAG.INC] USERIN[INDEX] = CREAD INDEX2 + INDEX
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        ADDWF INDEX2,W
        MOVWF TBLPTRL,0
        MOVLW 0
        ADDWFC INDEX2H,W
        MOVWF TBLPTRLH,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,PBP#VAR1
        LFSR 0,USERIN
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F9_000027 EQU $ ; IN [CHECK TAG.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB272
NX@LB273
F9_000028 EQU $ ; IN [CHECK TAG.INC] RETURN
        RETURN 0
F9_000029 EQU $ ; IN [CHECK TAG.INC] ENDIF
BC@LL270
F9_000031 EQU $ ; IN [CHECK TAG.INC] INDEX2 = INDEX2 + 16
        MOVLW 16
        MOVLB 3
RAM_BANK = 3
        ADDWF INDEX2,F
        MOVLW 0
        ADDWFC INDEX2H,F
F9_000032 EQU $ ; IN [CHECK TAG.INC] IF INDEX2 = USER_POINTER THEN RETURN
        MOVF USER_POINTERH,W
        SUBWF INDEX2H,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL274
        MOVLB 3
RAM_BANK = 3
        MOVF USER_POINTER,W
        SUBWF INDEX2,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL274
        RETURN 0
BC@LL274
F9_000034 EQU $ ; IN [CHECK TAG.INC] GOTO NEXTTAG
        F@JUMP NEXTTAG
F9_EOF EQU $ ; CHECK TAG.INC
F10_SOF EQU $ ; WRITEH.INC
WRITEH
F10_000012 EQU $ ; IN [WRITEH.INC] FOR INDEX = MUH TO 0 STEP -1
        MOVLW 228
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX
FR@LB276
        MOVLB 0
RAM_BANK = 0
F10_000013 EQU $ ; IN [WRITEH.INC] FOR INDEX2 = 0 TO 3
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX2H
        CLRF INDEX2
FR@LB278
        MOVLB 0
RAM_BANK = 0
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX2H,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO NX@LB279
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX2,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB279
F10_000014 EQU $ ; IN [WRITEH.INC] TV1 = EREAD (INDEX * 4) + INDEX2 + SHA
        CLRF PP7H,0
        MOVFF INDEX,PP7
        BCF STATUS,0,0
        RLCF PP7,F,0
        RLCF PP7H,F,0
        BCF STATUS,0,0
        RLCF PP7,F,0
        RLCF PP7H,F,0
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX2,W
        ADDWF PP7,F,0
        MOVF INDEX2H,W
        ADDWFC PP7H,F,0
        MOVLW 16
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        F@CALL EE@RD@W
        MOVWF TV1
F10_000015 EQU $ ; IN [WRITEH.INC] EWRITE (INDEX * 4) + INDEX2 + 4 + SHA,[TV1]
        CLRF PP7H,0
        MOVFF INDEX,PP7
        BCF STATUS,0,0
        RLCF PP7,F,0
        RLCF PP7H,F,0
        BCF STATUS,0,0
        RLCF PP7,F,0
        RLCF PP7H,F,0
        MOVF INDEX2,W
        ADDWF PP7,F,0
        MOVF INDEX2H,W
        ADDWFC PP7H,F,0
        MOVLW 4
        ADDWF PP7,F,0
        MOVLW 0
        ADDWFC PP7H,F,0
        MOVLW 16
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        MOVF TV1,W
        F@CALL EE@WR@W
F10_000016 EQU $ ; IN [WRITEH.INC] NEXT INDEX2
        INCF INDEX2,F
        BTFSC STATUS,2,0
        INCF INDEX2H,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB278
NX@LB279
F10_000017 EQU $ ; IN [WRITEH.INC] NEXT INDEX
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO FR@LB276
NX@LB277
F10_000019 EQU $ ; IN [WRITEH.INC] CLS
        F@CALL LCD@CLS
F10_000020 EQU $ ; IN [WRITEH.INC] PRINT AT 1,1, "YES FOR H"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB23)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB23)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F10_000021 EQU $ ; IN [WRITEH.INC] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F10_000022 EQU $ ; IN [WRITEH.INC] FOR INDEX = 0 TO 3               'WRITE USER # TO HISTORY
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB280
        MOVLB 0
RAM_BANK = 0
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB281
F10_000023 EQU $ ; IN [WRITEH.INC] TV1 = USERIN[INDEX]
        LFSR 0,USERIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF TV1
F10_000024 EQU $ ; IN [WRITEH.INC] EWRITE SHA + INDEX, [TV1]
        MOVLW 16
        ADDWF INDEX,W
        CLRF EEADRH,0
        MOVWF EEADR,0
        RLCF EEADRH,F,0
        MOVF TV1,W
        F@CALL EE@WR@W
F10_000025 EQU $ ; IN [WRITEH.INC] NEXT 'INDEX
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB280
NX@LB281
F10_000027 EQU $ ; IN [WRITEH.INC] RETURN
        RETURN 0
F10_EOF EQU $ ; WRITEH.INC
F11_SOF EQU $ ; WRITEM_SD.INC
F11_000011 EQU $ ; IN [WRITEM_SD.INC] FOR INDEX = 0 TO 7
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB282
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB283
F11_000012 EQU $ ; IN [WRITEM_SD.INC] MODNUM[INDEX] = CREAD 0X9C40 + INDEX    'READ THE MODULE NUMBER INTO VARIABLE
        MOVLW 64
        MOVLB 3
RAM_BANK = 3
        ADDWF INDEX,W
        CLRF TBLPTRLH,0
        MOVWF TBLPTRL,0
        MOVLW 156
        ADDWFC TBLPTRLH,F,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,PBP#VAR1
        LFSR 0,MODNUM
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F11_000013 EQU $ ; IN [WRITEM_SD.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB282
NX@LB283
F11_000015 EQU $ ; IN [WRITEM_SD.INC] SD_FILE_NAME = STR MODNUM          'FILE NAME, UPPER CASE ONLY
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        CLRF INDF0,0
F11_000016 EQU $ ; IN [WRITEM_SD.INC] SD_FILE_NAME = SD_FILE_NAME +"M"
        LFSR 0,SD_FILE_NAME
        MOVF POSTINC0,W,0
        BNZ $ - 2
        MOVF POSTDEC0,F,0
        MOVLW 77
        MOVWF POSTINC0,0
        CLRF INDF0,0
F11_000017 EQU $ ; IN [WRITEM_SD.INC] SD_FILE_EXT = "TXT"                'FILE EXT, UPPER CASE ONLY!
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0,0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F11_000020 EQU $ ; IN [WRITEM_SD.INC] RESPONSE = SD_CHECK_FOR_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
        SD_CHECK_FOR_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
F11_000021 EQU $ ; IN [WRITEM_SD.INC] IF RESPONSE = 0 THEN
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL284
F11_000022 EQU $ ; IN [WRITEM_SD.INC] CLS
        F@CALL LCD@CLS
F11_000023 EQU $ ; IN [WRITEM_SD.INC] PRINT "M FILE EXISTS"
        MOVLW HIGH (STR@LB24)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB24)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F11_000024 EQU $ ; IN [WRITEM_SD.INC] SD_DELETE_FILE          'IF IT DOES EXIST THEN DELETE IT..
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
        SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F11_000025 EQU $ ; IN [WRITEM_SD.INC] ENDIF
BC@LL284
F11_000028 EQU $ ; IN [WRITEM_SD.INC] SD_NEW_FILE
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
        SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F11_000029 EQU $ ; IN [WRITEM_SD.INC] FOR INDEX = 0 TO MMH
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB286
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB287
F11_000030 EQU $ ; IN [WRITEM_SD.INC] TV1 = EREAD (INDEX * 8) + SMA
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MULLW 8
        MOVFF PRODL,PP7
        MOVFF PRODH,PP7H
        MOVLW 160
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 3
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        F@CALL EE@RD@W
        MOVWF TV1
F11_000031 EQU $ ; IN [WRITEM_SD.INC] IF TV1 = 0XFF THEN  GOTO END_M  'IF THE BYTE IS  EMPTY THEN WE ARE FINISHED...
        INCF TV1,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL288
        F@JUMP END_M
BC@LL288
F11_000032 EQU $ ; IN [WRITEM_SD.INC] SD_WRITE_BYTE_TO_FILE TV1
VARIABLE PRM_1=2
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
VARIABLE MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
        SD_WRITE_BYTE_TO_FILE TV1,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
VARIABLE PRM_1=2
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
F11_000033 EQU $ ; IN [WRITEM_SD.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB286
NX@LB287
END_M
F11_000036 EQU $ ; IN [WRITEM_SD.INC] IF INDEX = 0 THEN  'IF THERE IS NO MANAGER HISTORY THEN..
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL290
F11_000037 EQU $ ; IN [WRITEM_SD.INC] SD_IO_STRING = "NO MANAGER HISTORY"
        LFSR 0,SD_IO_STRING
        MOVLW HIGH (STR@LB25)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB25)
        MOVWF TBLPTRL,0
        F@CALL LOAD@MSTR
        CLRF INDF0,0
F11_000038 EQU $ ; IN [WRITEM_SD.INC] SD_WRITE_STRING_TO_FILE
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
        SD_WRITE_STRING_TO_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
F11_000039 EQU $ ; IN [WRITEM_SD.INC] ENDIF
BC@LL290
F11_000041 EQU $ ; IN [WRITEM_SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F11_000042 EQU $ ; IN [WRITEM_SD.INC] RETURN
        RETURN 0
F11_EOF EQU $ ; WRITEM_SD.INC
        ORG 40000
        DB 65,50,55,66,56,51
        DB 65,0
F1_EOF EQU $ ; V2.0 RFID 2ND GENERATION.BAS
__EOF
CONFIG OSC = XT
CONFIG PWRT = ON
CONFIG BOREN = OFF
CONFIG MCLRE = ON
CONFIG PBADEN = OFF
CONFIG STVREN = OFF
CONFIG LVP = ON
        END
