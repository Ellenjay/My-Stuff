;----------------------------------------------------------
; Code Produced by the PROTON+ Compiler. Version 3.2.5.5
; Copyright Rosetta Technologies/Crownhill Associates
; Written by Les Johnson. February 2007
;----------------------------------------------------------
 NOLIST
 #include "C:\MYPROT~1\PROTON~1.40R\V4.0 RFID 2ND GENERATION.PBP"
 LIST

 SD_BYTER = 50
 SD_IDX = 51
 SD_SECTOR_NUM = 52
 SD_SECTOR_NUMH = 53
 SD_SECTOR_NUMHH = 54
 SD_SECTOR_NUMHHH = 55
 SD_ADDRESS = 56
 SD_ADDRESSH = 57
 SD_ADDRESSHH = 58
 SD_ADDRESSHHH = 59
 SD_SEEK_RESPONSE_IDX = 60
 SD_SEEK_RESPONSE_IDXH = 61
 SD_SEEK_RESPONSE_REQD = 62
 SD_SEEK_RESPONSE_RETURN = 63
 SD_RETURN = 64
 SD_BUFFER0 = 65
 Variable SD_BUFFER0#0=65,SD_BUFFER0#1=66,SD_BUFFER0#2=67,SD_BUFFER0#3=68
 Variable SD_BUFFER0#4=69,SD_BUFFER0#5=70,SD_BUFFER0#6=71,SD_BUFFER0#7=72
 Variable SD_BUFFER0#8=73,SD_BUFFER0#9=74,SD_BUFFER0#10=75,SD_BUFFER0#11=76
 Variable SD_BUFFER0#12=77,SD_BUFFER0#13=78,SD_BUFFER0#14=79,SD_BUFFER0#15=80
 Variable SD_BUFFER0#16=81,SD_BUFFER0#17=82,SD_BUFFER0#18=83,SD_BUFFER0#19=84
 Variable SD_BUFFER0#20=85,SD_BUFFER0#21=86,SD_BUFFER0#22=87,SD_BUFFER0#23=88
 Variable SD_BUFFER0#24=89,SD_BUFFER0#25=90,SD_BUFFER0#26=91,SD_BUFFER0#27=92
 Variable SD_BUFFER0#28=93,SD_BUFFER0#29=94,SD_BUFFER0#30=95,SD_BUFFER0#31=96
 Variable SD_BUFFER0#32=97,SD_BUFFER0#33=98,SD_BUFFER0#34=99,SD_BUFFER0#35=100
 Variable SD_BUFFER0#36=101,SD_BUFFER0#37=102,SD_BUFFER0#38=103,SD_BUFFER0#39=104
 Variable SD_BUFFER0#40=105,SD_BUFFER0#41=106,SD_BUFFER0#42=107,SD_BUFFER0#43=108
 Variable SD_BUFFER0#44=109,SD_BUFFER0#45=110,SD_BUFFER0#46=111,SD_BUFFER0#47=112
 Variable SD_BUFFER0#48=113,SD_BUFFER0#49=114,SD_BUFFER0#50=115,SD_BUFFER0#51=116
 Variable SD_BUFFER0#52=117,SD_BUFFER0#53=118,SD_BUFFER0#54=119,SD_BUFFER0#55=120
 Variable SD_BUFFER0#56=121,SD_BUFFER0#57=122,SD_BUFFER0#58=123,SD_BUFFER0#59=124
 Variable SD_BUFFER0#60=125,SD_BUFFER0#61=126,SD_BUFFER0#62=127,SD_BUFFER0#63=128
 Variable SD_BUFFER0#64=129,SD_BUFFER0#65=130,SD_BUFFER0#66=131,SD_BUFFER0#67=132
 Variable SD_BUFFER0#68=133,SD_BUFFER0#69=134,SD_BUFFER0#70=135,SD_BUFFER0#71=136
 Variable SD_BUFFER0#72=137,SD_BUFFER0#73=138,SD_BUFFER0#74=139,SD_BUFFER0#75=140
 Variable SD_BUFFER0#76=141,SD_BUFFER0#77=142,SD_BUFFER0#78=143,SD_BUFFER0#79=144
 Variable SD_BUFFER0#80=145,SD_BUFFER0#81=146,SD_BUFFER0#82=147,SD_BUFFER0#83=148
 Variable SD_BUFFER0#84=149,SD_BUFFER0#85=150,SD_BUFFER0#86=151,SD_BUFFER0#87=152
 Variable SD_BUFFER0#88=153,SD_BUFFER0#89=154,SD_BUFFER0#90=155,SD_BUFFER0#91=156
 Variable SD_BUFFER0#92=157,SD_BUFFER0#93=158,SD_BUFFER0#94=159,SD_BUFFER0#95=160
 Variable SD_BUFFER0#96=161,SD_BUFFER0#97=162,SD_BUFFER0#98=163,SD_BUFFER0#99=164
 Variable SD_BUFFER0#100=165,SD_BUFFER0#101=166,SD_BUFFER0#102=167,SD_BUFFER0#103=168
 Variable SD_BUFFER0#104=169,SD_BUFFER0#105=170,SD_BUFFER0#106=171,SD_BUFFER0#107=172
 Variable SD_BUFFER0#108=173,SD_BUFFER0#109=174,SD_BUFFER0#110=175,SD_BUFFER0#111=176
 Variable SD_BUFFER0#112=177,SD_BUFFER0#113=178,SD_BUFFER0#114=179,SD_BUFFER0#115=180
 Variable SD_BUFFER0#116=181,SD_BUFFER0#117=182,SD_BUFFER0#118=183,SD_BUFFER0#119=184
 Variable SD_BUFFER0#120=185,SD_BUFFER0#121=186,SD_BUFFER0#122=187,SD_BUFFER0#123=188
 Variable SD_BUFFER0#124=189,SD_BUFFER0#125=190,SD_BUFFER0#126=191,SD_BUFFER0#127=192
 Variable SD_BUFFER0#128=193,SD_BUFFER0#129=194,SD_BUFFER0#130=195,SD_BUFFER0#131=196
 Variable SD_BUFFER0#132=197,SD_BUFFER0#133=198,SD_BUFFER0#134=199,SD_BUFFER0#135=200
 Variable SD_BUFFER0#136=201,SD_BUFFER0#137=202,SD_BUFFER0#138=203,SD_BUFFER0#139=204
 Variable SD_BUFFER0#140=205,SD_BUFFER0#141=206,SD_BUFFER0#142=207,SD_BUFFER0#143=208
 Variable SD_BUFFER0#144=209,SD_BUFFER0#145=210,SD_BUFFER0#146=211,SD_BUFFER0#147=212
 Variable SD_BUFFER0#148=213,SD_BUFFER0#149=214,SD_BUFFER0#150=215,SD_BUFFER0#151=216
 Variable SD_BUFFER0#152=217,SD_BUFFER0#153=218,SD_BUFFER0#154=219,SD_BUFFER0#155=220
 Variable SD_BUFFER0#156=221,SD_BUFFER0#157=222,SD_BUFFER0#158=223,SD_BUFFER0#159=224
 Variable SD_BUFFER0#160=225,SD_BUFFER0#161=226,SD_BUFFER0#162=227,SD_BUFFER0#163=228
 Variable SD_BUFFER0#164=229,SD_BUFFER0#165=230,SD_BUFFER0#166=231,SD_BUFFER0#167=232
 Variable SD_BUFFER0#168=233,SD_BUFFER0#169=234,SD_BUFFER0#170=235,SD_BUFFER0#171=236
 Variable SD_BUFFER0#172=237,SD_BUFFER0#173=238,SD_BUFFER0#174=239,SD_BUFFER0#175=240
 Variable SD_BUFFER0#176=241,SD_BUFFER0#177=242,SD_BUFFER0#178=243,SD_BUFFER0#179=244
 Variable SD_BUFFER0#180=245,SD_BUFFER0#181=246,SD_BUFFER0#182=247,SD_BUFFER0#183=248
 Variable SD_BUFFER0#184=249,SD_BUFFER0#185=250,SD_BUFFER0#186=251,SD_BUFFER0#187=252
 Variable SD_BUFFER0#188=253,SD_BUFFER0#189=254,SD_BUFFER0#190=255,SD_BUFFER0#191=256
 Variable SD_BUFFER0#192=257,SD_BUFFER0#193=258,SD_BUFFER0#194=259,SD_BUFFER0#195=260
 Variable SD_BUFFER0#196=261,SD_BUFFER0#197=262,SD_BUFFER0#198=263,SD_BUFFER0#199=264
 Variable SD_BUFFER0#200=265,SD_BUFFER0#201=266,SD_BUFFER0#202=267,SD_BUFFER0#203=268
 Variable SD_BUFFER0#204=269,SD_BUFFER0#205=270,SD_BUFFER0#206=271,SD_BUFFER0#207=272
 Variable SD_BUFFER0#208=273,SD_BUFFER0#209=274,SD_BUFFER0#210=275,SD_BUFFER0#211=276
 Variable SD_BUFFER0#212=277,SD_BUFFER0#213=278,SD_BUFFER0#214=279,SD_BUFFER0#215=280
 Variable SD_BUFFER0#216=281,SD_BUFFER0#217=282,SD_BUFFER0#218=283,SD_BUFFER0#219=284
 Variable SD_BUFFER0#220=285,SD_BUFFER0#221=286,SD_BUFFER0#222=287,SD_BUFFER0#223=288
 Variable SD_BUFFER0#224=289,SD_BUFFER0#225=290,SD_BUFFER0#226=291,SD_BUFFER0#227=292
 Variable SD_BUFFER0#228=293,SD_BUFFER0#229=294,SD_BUFFER0#230=295,SD_BUFFER0#231=296
 Variable SD_BUFFER0#232=297,SD_BUFFER0#233=298,SD_BUFFER0#234=299,SD_BUFFER0#235=300
 Variable SD_BUFFER0#236=301,SD_BUFFER0#237=302,SD_BUFFER0#238=303,SD_BUFFER0#239=304
 Variable SD_BUFFER0#240=305,SD_BUFFER0#241=306,SD_BUFFER0#242=307,SD_BUFFER0#243=308
 Variable SD_BUFFER0#244=309,SD_BUFFER0#245=310,SD_BUFFER0#246=311,SD_BUFFER0#247=312
 Variable SD_BUFFER0#248=313,SD_BUFFER0#249=314,SD_BUFFER0#250=315,SD_BUFFER0#251=316
 Variable SD_BUFFER0#252=317,SD_BUFFER0#253=318,SD_BUFFER0#254=319,SD_BUFFER0#255=320
 SD_BUFFER1 = 321
 Variable SD_BUFFER1#0=321,SD_BUFFER1#1=322,SD_BUFFER1#2=323,SD_BUFFER1#3=324
 Variable SD_BUFFER1#4=325,SD_BUFFER1#5=326,SD_BUFFER1#6=327,SD_BUFFER1#7=328
 Variable SD_BUFFER1#8=329,SD_BUFFER1#9=330,SD_BUFFER1#10=331,SD_BUFFER1#11=332
 Variable SD_BUFFER1#12=333,SD_BUFFER1#13=334,SD_BUFFER1#14=335,SD_BUFFER1#15=336
 Variable SD_BUFFER1#16=337,SD_BUFFER1#17=338,SD_BUFFER1#18=339,SD_BUFFER1#19=340
 Variable SD_BUFFER1#20=341,SD_BUFFER1#21=342,SD_BUFFER1#22=343,SD_BUFFER1#23=344
 Variable SD_BUFFER1#24=345,SD_BUFFER1#25=346,SD_BUFFER1#26=347,SD_BUFFER1#27=348
 Variable SD_BUFFER1#28=349,SD_BUFFER1#29=350,SD_BUFFER1#30=351,SD_BUFFER1#31=352
 Variable SD_BUFFER1#32=353,SD_BUFFER1#33=354,SD_BUFFER1#34=355,SD_BUFFER1#35=356
 Variable SD_BUFFER1#36=357,SD_BUFFER1#37=358,SD_BUFFER1#38=359,SD_BUFFER1#39=360
 Variable SD_BUFFER1#40=361,SD_BUFFER1#41=362,SD_BUFFER1#42=363,SD_BUFFER1#43=364
 Variable SD_BUFFER1#44=365,SD_BUFFER1#45=366,SD_BUFFER1#46=367,SD_BUFFER1#47=368
 Variable SD_BUFFER1#48=369,SD_BUFFER1#49=370,SD_BUFFER1#50=371,SD_BUFFER1#51=372
 Variable SD_BUFFER1#52=373,SD_BUFFER1#53=374,SD_BUFFER1#54=375,SD_BUFFER1#55=376
 Variable SD_BUFFER1#56=377,SD_BUFFER1#57=378,SD_BUFFER1#58=379,SD_BUFFER1#59=380
 Variable SD_BUFFER1#60=381,SD_BUFFER1#61=382,SD_BUFFER1#62=383,SD_BUFFER1#63=384
 Variable SD_BUFFER1#64=385,SD_BUFFER1#65=386,SD_BUFFER1#66=387,SD_BUFFER1#67=388
 Variable SD_BUFFER1#68=389,SD_BUFFER1#69=390,SD_BUFFER1#70=391,SD_BUFFER1#71=392
 Variable SD_BUFFER1#72=393,SD_BUFFER1#73=394,SD_BUFFER1#74=395,SD_BUFFER1#75=396
 Variable SD_BUFFER1#76=397,SD_BUFFER1#77=398,SD_BUFFER1#78=399,SD_BUFFER1#79=400
 Variable SD_BUFFER1#80=401,SD_BUFFER1#81=402,SD_BUFFER1#82=403,SD_BUFFER1#83=404
 Variable SD_BUFFER1#84=405,SD_BUFFER1#85=406,SD_BUFFER1#86=407,SD_BUFFER1#87=408
 Variable SD_BUFFER1#88=409,SD_BUFFER1#89=410,SD_BUFFER1#90=411,SD_BUFFER1#91=412
 Variable SD_BUFFER1#92=413,SD_BUFFER1#93=414,SD_BUFFER1#94=415,SD_BUFFER1#95=416
 Variable SD_BUFFER1#96=417,SD_BUFFER1#97=418,SD_BUFFER1#98=419,SD_BUFFER1#99=420
 Variable SD_BUFFER1#100=421,SD_BUFFER1#101=422,SD_BUFFER1#102=423,SD_BUFFER1#103=424
 Variable SD_BUFFER1#104=425,SD_BUFFER1#105=426,SD_BUFFER1#106=427,SD_BUFFER1#107=428
 Variable SD_BUFFER1#108=429,SD_BUFFER1#109=430,SD_BUFFER1#110=431,SD_BUFFER1#111=432
 Variable SD_BUFFER1#112=433,SD_BUFFER1#113=434,SD_BUFFER1#114=435,SD_BUFFER1#115=436
 Variable SD_BUFFER1#116=437,SD_BUFFER1#117=438,SD_BUFFER1#118=439,SD_BUFFER1#119=440
 Variable SD_BUFFER1#120=441,SD_BUFFER1#121=442,SD_BUFFER1#122=443,SD_BUFFER1#123=444
 Variable SD_BUFFER1#124=445,SD_BUFFER1#125=446,SD_BUFFER1#126=447,SD_BUFFER1#127=448
 Variable SD_BUFFER1#128=449,SD_BUFFER1#129=450,SD_BUFFER1#130=451,SD_BUFFER1#131=452
 Variable SD_BUFFER1#132=453,SD_BUFFER1#133=454,SD_BUFFER1#134=455,SD_BUFFER1#135=456
 Variable SD_BUFFER1#136=457,SD_BUFFER1#137=458,SD_BUFFER1#138=459,SD_BUFFER1#139=460
 Variable SD_BUFFER1#140=461,SD_BUFFER1#141=462,SD_BUFFER1#142=463,SD_BUFFER1#143=464
 Variable SD_BUFFER1#144=465,SD_BUFFER1#145=466,SD_BUFFER1#146=467,SD_BUFFER1#147=468
 Variable SD_BUFFER1#148=469,SD_BUFFER1#149=470,SD_BUFFER1#150=471,SD_BUFFER1#151=472
 Variable SD_BUFFER1#152=473,SD_BUFFER1#153=474,SD_BUFFER1#154=475,SD_BUFFER1#155=476
 Variable SD_BUFFER1#156=477,SD_BUFFER1#157=478,SD_BUFFER1#158=479,SD_BUFFER1#159=480
 Variable SD_BUFFER1#160=481,SD_BUFFER1#161=482,SD_BUFFER1#162=483,SD_BUFFER1#163=484
 Variable SD_BUFFER1#164=485,SD_BUFFER1#165=486,SD_BUFFER1#166=487,SD_BUFFER1#167=488
 Variable SD_BUFFER1#168=489,SD_BUFFER1#169=490,SD_BUFFER1#170=491,SD_BUFFER1#171=492
 Variable SD_BUFFER1#172=493,SD_BUFFER1#173=494,SD_BUFFER1#174=495,SD_BUFFER1#175=496
 Variable SD_BUFFER1#176=497,SD_BUFFER1#177=498,SD_BUFFER1#178=499,SD_BUFFER1#179=500
 Variable SD_BUFFER1#180=501,SD_BUFFER1#181=502,SD_BUFFER1#182=503,SD_BUFFER1#183=504
 Variable SD_BUFFER1#184=505,SD_BUFFER1#185=506,SD_BUFFER1#186=507,SD_BUFFER1#187=508
 Variable SD_BUFFER1#188=509,SD_BUFFER1#189=510,SD_BUFFER1#190=511,SD_BUFFER1#191=512
 Variable SD_BUFFER1#192=513,SD_BUFFER1#193=514,SD_BUFFER1#194=515,SD_BUFFER1#195=516
 Variable SD_BUFFER1#196=517,SD_BUFFER1#197=518,SD_BUFFER1#198=519,SD_BUFFER1#199=520
 Variable SD_BUFFER1#200=521,SD_BUFFER1#201=522,SD_BUFFER1#202=523,SD_BUFFER1#203=524
 Variable SD_BUFFER1#204=525,SD_BUFFER1#205=526,SD_BUFFER1#206=527,SD_BUFFER1#207=528
 Variable SD_BUFFER1#208=529,SD_BUFFER1#209=530,SD_BUFFER1#210=531,SD_BUFFER1#211=532
 Variable SD_BUFFER1#212=533,SD_BUFFER1#213=534,SD_BUFFER1#214=535,SD_BUFFER1#215=536
 Variable SD_BUFFER1#216=537,SD_BUFFER1#217=538,SD_BUFFER1#218=539,SD_BUFFER1#219=540
 Variable SD_BUFFER1#220=541,SD_BUFFER1#221=542,SD_BUFFER1#222=543,SD_BUFFER1#223=544
 Variable SD_BUFFER1#224=545,SD_BUFFER1#225=546,SD_BUFFER1#226=547,SD_BUFFER1#227=548
 Variable SD_BUFFER1#228=549,SD_BUFFER1#229=550,SD_BUFFER1#230=551,SD_BUFFER1#231=552
 Variable SD_BUFFER1#232=553,SD_BUFFER1#233=554,SD_BUFFER1#234=555,SD_BUFFER1#235=556
 Variable SD_BUFFER1#236=557,SD_BUFFER1#237=558,SD_BUFFER1#238=559,SD_BUFFER1#239=560
 Variable SD_BUFFER1#240=561,SD_BUFFER1#241=562,SD_BUFFER1#242=563,SD_BUFFER1#243=564
 Variable SD_BUFFER1#244=565,SD_BUFFER1#245=566,SD_BUFFER1#246=567,SD_BUFFER1#247=568
 Variable SD_BUFFER1#248=569,SD_BUFFER1#249=570,SD_BUFFER1#250=571,SD_BUFFER1#251=572
 Variable SD_BUFFER1#252=573,SD_BUFFER1#253=574,SD_BUFFER1#254=575,SD_BUFFER1#255=576
 SD_BYTE0 = 577
 SD_BYTE1 = 578
 SD_BYTE2 = 579
 SD_BYTE3 = 580
 SD_BYTE4 = 581
 SD_BYTE5 = 582
 SD_BUFFER_IDX = 583
 SD_BUFFER_IDXH = 584
 SD_BYTE_RW = 585
 SD_RW_OPTION = 586
 SD_EXTENDED_RETURN = 587
 SD_EXTENDED_RETURN_ROOT_DIR = 588
 SD_DATA_IO = 589
 SD_BUFFER_POS = 590
 SD_BUFFER_POSH = 591
 SD_ROOT_DIR_FILE_POS = 592
 SD_SEC_NUM = 593
 SD_SEC_NUMH = 594
 SD_SEC_NUMHH = 595
 SD_SEC_NUMHHH = 596
 SD_SECS_PER_CLUSTER = 597
 SD_RESERVED_SECS = 598
 SD_RESERVED_SECSH = 599
 SD_SECS_PER_FAT = 600
 SD_SECS_PER_FATH = 601
 SD_NUM_OF_FATS = 602
 SD_NUM_OF_SECS = 603
 SD_NUM_OF_SECSH = 604
 SD_NUM_OF_SECSHH = 605
 SD_NUM_OF_SECSHHH = 606
 SD_BYTES_PER_SEC = 607
 SD_BYTES_PER_SECH = 608
 SD_NUM_OF_ROOT_ENTRIES = 609
 SD_NUM_OF_ROOT_ENTRIESH = 610
 SD_SECS_IN_ROOT = 611
 SD_SECS_IN_ROOTH = 612
 SD_BOOT_RECORD = 613
 SD_BOOT_RECORDH = 614
 SD_FAT1 = 615
 SD_FAT1H = 616
 SD_FAT1HH = 617
 SD_FAT1HHH = 618
 SD_FAT2 = 619
 SD_FAT2H = 620
 SD_FAT2HH = 621
 SD_FAT2HHH = 622
 SD_ROOT_DIR = 623
 SD_ROOT_DIRH = 624
 SD_ROOT_DIRHH = 625
 SD_ROOT_DIRHHH = 626
 SD_DATA_AREA = 627
 SD_DATA_AREAH = 628
 SD_DATA_AREAHH = 629
 SD_DATA_AREAHHH = 630
 SD_FAT_ENTRY = 631
 SD_FAT_ENTRYH = 632
 SD_FAT_SEC = 633
 SD_FAT_SECH = 634
 SD_FAT_SECHH = 635
 SD_FAT_SECHHH = 636
 SD_FAT_BUFFER_POS = 637
 SD_FAT_BUFFER_POSH = 638
 SD_FAT_SEC_PREV = 639
 SD_FAT_SEC_PREVH = 640
 SD_FAT_SEC_PREVHH = 641
 SD_FAT_SEC_PREVHHH = 642
 SD_FAT_BUFFER_POS_PREV = 643
 SD_FAT_BUFFER_POS_PREVH = 644
 SD_ROOT_DIR_SEC = 645
 SD_ROOT_DIR_SECH = 646
 SD_ROOT_DIR_SECHH = 647
 SD_ROOT_DIR_SECHHH = 648
 SD_ROOT_DIR_POS = 649
 SD_ROOT_DIR_POSH = 650
 SD_DATA_SEC = 651
 SD_DATA_SECH = 652
 SD_DATA_SECHH = 653
 SD_DATA_SECHHH = 654
 SD_DATA_BUFFER_POS = 655
 SD_DATA_BUFFER_POSH = 656
 SD_FILE_NAME = 657
 Variable SD_FILE_NAME#0=657,SD_FILE_NAME#1=658,SD_FILE_NAME#2=659,SD_FILE_NAME#3=660
 Variable SD_FILE_NAME#4=661,SD_FILE_NAME#5=662,SD_FILE_NAME#6=663,SD_FILE_NAME#7=664
 Variable SD_FILE_NAME#8=665
 SD_FILE_EXT = 666
 Variable SD_FILE_EXT#0=666,SD_FILE_EXT#1=667,SD_FILE_EXT#2=668,SD_FILE_EXT#3=669
 SD_ROOT_DIR_FILE = 670
 Variable SD_ROOT_DIR_FILE#0=670,SD_ROOT_DIR_FILE#1=671,SD_ROOT_DIR_FILE#2=672,SD_ROOT_DIR_FILE#3=673
 Variable SD_ROOT_DIR_FILE#4=674,SD_ROOT_DIR_FILE#5=675,SD_ROOT_DIR_FILE#6=676,SD_ROOT_DIR_FILE#7=677
 Variable SD_ROOT_DIR_FILE#8=678,SD_ROOT_DIR_FILE#9=679,SD_ROOT_DIR_FILE#10=680,SD_ROOT_DIR_FILE#11=681
 Variable SD_ROOT_DIR_FILE#12=682,SD_ROOT_DIR_FILE#13=683,SD_ROOT_DIR_FILE#14=684,SD_ROOT_DIR_FILE#15=685
 Variable SD_ROOT_DIR_FILE#16=686,SD_ROOT_DIR_FILE#17=687,SD_ROOT_DIR_FILE#18=688,SD_ROOT_DIR_FILE#19=689
 Variable SD_ROOT_DIR_FILE#20=690,SD_ROOT_DIR_FILE#21=691,SD_ROOT_DIR_FILE#22=692,SD_ROOT_DIR_FILE#23=693
 Variable SD_ROOT_DIR_FILE#24=694,SD_ROOT_DIR_FILE#25=695,SD_ROOT_DIR_FILE#26=696,SD_ROOT_DIR_FILE#27=697
 Variable SD_ROOT_DIR_FILE#28=698,SD_ROOT_DIR_FILE#29=699,SD_ROOT_DIR_FILE#30=700,SD_ROOT_DIR_FILE#31=701
 SD_WRITE_SEC_NUM = 702
 SD_WRITE_SEC_NUMH = 703
 SD_WRITE_SEC_NUMHH = 704
 SD_WRITE_SEC_NUMHHH = 705
 SD_WRITE_BUFFER_POS = 706
 SD_WRITE_BUFFER_POSH = 707
 SD_NULL_F = 708
 SD_CLUSTER_NUM = 709
 SD_CLUSTER_NUMH = 710
 SD_CLUSTER_NUM_PREV = 711
 SD_CLUSTER_NUM_PREVH = 712
 SD_LAST_CLUSTER = 713
 SD_LAST_CLUSTERH = 714
 SD_SEC_IN_CLUSTER = 715
 SD_FILE_SIZE = 716
 SD_FILE_SIZEH = 717
 SD_FILE_SIZEHH = 718
 SD_FILE_SIZEHHH = 719
 SD_IO_BYTE = 720
 SD_TEMP_BYTE = 721
 SD_TEMP = 722
 SD_TEMPH = 723
 SD_TEMP_DWORD = 724
 SD_TEMP_DWORDH = 725
 SD_TEMP_DWORDHH = 726
 SD_TEMP_DWORDHHH = 727
 SD_CLUSTER_SEQ_NUM = 728
 SD_CLUSTER_SEQ_NUMH = 729
 SD_CLUSTER_SEQ_IDX = 730
 SD_CLUSTER_SEQ_IDXH = 731
 SD_CLUSTER_SEQ_NUM_PREV = 732
 SD_CLUSTER_SEQ_NUM_PREVH = 733
 SD_CLUSTER_SEQ_IDX_PREV = 734
 SD_CLUSTER_SEQ_IDX_PREVH = 735
 SD_FIND_ROOT_DIR_ENTRY_F = 736
 SD_BYTES_READ = 737
 SD_BYTES_READH = 738
 SD_BYTES_READHH = 739
 SD_BYTES_READHHH = 740
 SD_FILE_NUM = 742
 SD_FILE_NUMH = 743
 SD_DIR_DIRECTION = 744
 SD_EXTENDED_RETURN_INT = 745
 SD_FILE_SIZE_LEFT = 746
 SD_FILE_SIZE_LEFTH = 747
 SD_FILE_SIZE_LEFTHH = 748
 SD_FILE_SIZE_LEFTHHH = 749
 SD_TIMEOUT = 750
 SD_DAY = 751
 SD_MONTH = 752
 SD_YEAR = 753
 SD_MSECONDS = 754
 SD_SECONDS = 755
 SD_MINUTES = 756
 SD_HOURS = 757
 SD_IS_DIRTY = 758
 SD_SSPSTAT = 759
 SD_RETURN_F = 760
 SD_IO_STRING_LENGTH = 761
 SD_IO_STRING_POS = 762
 SD_IO_STRING = 763
 Variable SD_IO_STRING#0=763,SD_IO_STRING#1=764,SD_IO_STRING#2=765,SD_IO_STRING#3=766
 Variable SD_IO_STRING#4=767,SD_IO_STRING#5=768,SD_IO_STRING#6=769,SD_IO_STRING#7=770
 Variable SD_IO_STRING#8=771,SD_IO_STRING#9=772,SD_IO_STRING#10=773,SD_IO_STRING#11=774
 Variable SD_IO_STRING#12=775,SD_IO_STRING#13=776,SD_IO_STRING#14=777,SD_IO_STRING#15=778
 Variable SD_IO_STRING#16=779,SD_IO_STRING#17=780,SD_IO_STRING#18=781,SD_IO_STRING#19=782
 Variable SD_IO_STRING#20=783,SD_IO_STRING#21=784,SD_IO_STRING#22=785,SD_IO_STRING#23=786
 Variable SD_IO_STRING#24=787,SD_IO_STRING#25=788,SD_IO_STRING#26=789,SD_IO_STRING#27=790
 Variable SD_IO_STRING#28=791,SD_IO_STRING#29=792,SD_IO_STRING#30=793,SD_IO_STRING#31=794
 Variable SD_IO_STRING#32=795,SD_IO_STRING#33=796,SD_IO_STRING#34=797,SD_IO_STRING#35=798
 Variable SD_IO_STRING#36=799,SD_IO_STRING#37=800,SD_IO_STRING#38=801,SD_IO_STRING#39=802
 Variable SD_IO_STRING#40=803,SD_IO_STRING#41=804,SD_IO_STRING#42=805,SD_IO_STRING#43=806
 Variable SD_IO_STRING#44=807,SD_IO_STRING#45=808,SD_IO_STRING#46=809,SD_IO_STRING#47=810
 Variable SD_IO_STRING#48=811,SD_IO_STRING#49=812,SD_IO_STRING#50=813,SD_IO_STRING#51=814
 Variable SD_IO_STRING#52=815,SD_IO_STRING#53=816,SD_IO_STRING#54=817,SD_IO_STRING#55=818
 Variable SD_IO_STRING#56=819,SD_IO_STRING#57=820,SD_IO_STRING#58=821,SD_IO_STRING#59=822
 Variable SD_IO_STRING#60=823,SD_IO_STRING#61=824,SD_IO_STRING#62=825,SD_IO_STRING#63=826
 Variable SD_IO_STRING#64=827,SD_IO_STRING#65=828,SD_IO_STRING#66=829,SD_IO_STRING#67=830
 Variable SD_IO_STRING#68=831,SD_IO_STRING#69=832,SD_IO_STRING#70=833,SD_IO_STRING#71=834
 Variable SD_IO_STRING#72=835,SD_IO_STRING#73=836,SD_IO_STRING#74=837,SD_IO_STRING#75=838
 Variable SD_IO_STRING#76=839,SD_IO_STRING#77=840,SD_IO_STRING#78=841,SD_IO_STRING#79=842
 Variable SD_IO_STRING#80=843,SD_IO_STRING#81=844,SD_IO_STRING#82=845,SD_IO_STRING#83=846
 Variable SD_IO_STRING#84=847,SD_IO_STRING#85=848,SD_IO_STRING#86=849,SD_IO_STRING#87=850
 Variable SD_IO_STRING#88=851,SD_IO_STRING#89=852,SD_IO_STRING#90=853,SD_IO_STRING#91=854
 Variable SD_IO_STRING#92=855,SD_IO_STRING#93=856,SD_IO_STRING#94=857,SD_IO_STRING#95=858
 Variable SD_IO_STRING#96=859,SD_IO_STRING#97=860,SD_IO_STRING#98=861,SD_IO_STRING#99=862
 Variable SD_IO_STRING#100=863,SD_IO_STRING#101=864,SD_IO_STRING#102=865,SD_IO_STRING#103=866
 Variable SD_IO_STRING#104=867,SD_IO_STRING#105=868,SD_IO_STRING#106=869,SD_IO_STRING#107=870
 Variable SD_IO_STRING#108=871,SD_IO_STRING#109=872,SD_IO_STRING#110=873,SD_IO_STRING#111=874
 Variable SD_IO_STRING#112=875,SD_IO_STRING#113=876,SD_IO_STRING#114=877,SD_IO_STRING#115=878
 Variable SD_IO_STRING#116=879,SD_IO_STRING#117=880,SD_IO_STRING#118=881,SD_IO_STRING#119=882
 Variable SD_IO_STRING#120=883,SD_IO_STRING#121=884,SD_IO_STRING#122=885,SD_IO_STRING#123=886
 Variable SD_IO_STRING#124=887,SD_IO_STRING#125=888,SD_IO_STRING#126=889,SD_IO_STRING#127=890
 Variable SD_IO_STRING#128=891,SD_IO_STRING#129=892,SD_IO_STRING#130=893,SD_IO_STRING#131=894
 Variable SD_IO_STRING#132=895,SD_IO_STRING#133=896,SD_IO_STRING#134=897,SD_IO_STRING#135=898
 Variable SD_IO_STRING#136=899,SD_IO_STRING#137=900,SD_IO_STRING#138=901,SD_IO_STRING#139=902
 Variable SD_IO_STRING#140=903,SD_IO_STRING#141=904,SD_IO_STRING#142=905,SD_IO_STRING#143=906
 Variable SD_IO_STRING#144=907,SD_IO_STRING#145=908,SD_IO_STRING#146=909,SD_IO_STRING#147=910
 Variable SD_IO_STRING#148=911,SD_IO_STRING#149=912,SD_IO_STRING#150=913,SD_IO_STRING#151=914
 Variable SD_IO_STRING#152=915,SD_IO_STRING#153=916,SD_IO_STRING#154=917,SD_IO_STRING#155=918
 Variable SD_IO_STRING#156=919,SD_IO_STRING#157=920,SD_IO_STRING#158=921,SD_IO_STRING#159=922
 Variable SD_IO_STRING#160=923,SD_IO_STRING#161=924,SD_IO_STRING#162=925,SD_IO_STRING#163=926
 Variable SD_IO_STRING#164=927,SD_IO_STRING#165=928,SD_IO_STRING#166=929,SD_IO_STRING#167=930
 Variable SD_IO_STRING#168=931,SD_IO_STRING#169=932,SD_IO_STRING#170=933,SD_IO_STRING#171=934
 Variable SD_IO_STRING#172=935,SD_IO_STRING#173=936,SD_IO_STRING#174=937,SD_IO_STRING#175=938
 Variable SD_IO_STRING#176=939,SD_IO_STRING#177=940,SD_IO_STRING#178=941,SD_IO_STRING#179=942
 Variable SD_IO_STRING#180=943,SD_IO_STRING#181=944,SD_IO_STRING#182=945,SD_IO_STRING#183=946
 Variable SD_IO_STRING#184=947,SD_IO_STRING#185=948,SD_IO_STRING#186=949,SD_IO_STRING#187=950
 Variable SD_IO_STRING#188=951,SD_IO_STRING#189=952,SD_IO_STRING#190=953,SD_IO_STRING#191=954
 Variable SD_IO_STRING#192=955,SD_IO_STRING#193=956,SD_IO_STRING#194=957,SD_IO_STRING#195=958
 Variable SD_IO_STRING#196=959,SD_IO_STRING#197=960,SD_IO_STRING#198=961,SD_IO_STRING#199=962
 Variable SD_IO_STRING#200=963
 USER_POINTER = 964
 USER_POINTERH = 965
 TAGIN = 966
 Variable TAGIN#0=966,TAGIN#1=967,TAGIN#2=968,TAGIN#3=969
 Variable TAGIN#4=970,TAGIN#5=971,TAGIN#6=972,TAGIN#7=973
 Variable TAGIN#8=974,TAGIN#9=975
 USERIN = 976
 Variable USERIN#0=976,USERIN#1=977,USERIN#2=978,USERIN#3=979
 UTAG = 980
 Variable UTAG#0=980,UTAG#1=981,UTAG#2=982,UTAG#3=983
 Variable UTAG#4=984,UTAG#5=985,UTAG#6=986,UTAG#7=987
 Variable UTAG#8=988,UTAG#9=989,UTAG#10=990,UTAG#11=991
 Variable UTAG#12=992,UTAG#13=993,UTAG#14=994,UTAG#15=995
 ETX = 996
 CHECKSUM = 997
 MODNUM = 998
 Variable MODNUM#0=998,MODNUM#1=999,MODNUM#2=1000,MODNUM#3=1001
 Variable MODNUM#4=1002,MODNUM#5=1003,MODNUM#6=1004
 RESPONSE = 1005
 SD_IO = 1006
 MYCOUNT = 1007
 INDEX = 1008
 INDEX2 = 1009
 TV1 = 1010
 WORD_VAR = 1011
 WORD_VARH = 1012
 MYNUM = 1013
 Variable MYNUM#0=1013,MYNUM#1=1014,MYNUM#2=1015,MYNUM#3=1016
	#Define SD_CS PORTC,2
	#Define SD_DI PORTC,5
	#Define SD_CLK PORTC,3
	#Define SD_DO PORTC,4
	#Define SD_EOF _B#VR1,0
	#Define SD_RW_PTR SD_BYTES_READ
	#Define SD_RW_PTRH SD_BYTES_READH
	#Define SD_RW_PTRHH SD_BYTES_READHH
	#Define SD_RW_PTRHHH SD_BYTES_READHHH
	#Define SD_FREE_CLUSTER_NUM SD_CLUSTER_SEQ_NUM
	#Define SD_FREE_CLUSTER_NUMH SD_CLUSTER_SEQ_NUMH
	#Define SD_FREE_SPACE_KB SD_BYTES_READ
	#Define SD_FREE_SPACE_KBH SD_BYTES_READH
	#Define SD_FREE_SPACE_KBHH SD_BYTES_READHH
	#Define SD_FREE_SPACE_KBHHH SD_BYTES_READHHH
	#Define SD_DISK_SIZE_KB SD_BYTES_READ
	#Define SD_DISK_SIZE_KBH SD_BYTES_READH
	#Define SD_DISK_SIZE_KBHH SD_BYTES_READHH
	#Define SD_DISK_SIZE_KBHHH SD_BYTES_READHHH
	#Define SD_FIRST 0
	#Define SD_NEXT 1
	#Define SD_PREVIOUS 2
	#Define SD_SPI_BF SSPSTAT,0
	#Define SD_SPI_IF PIR1,3
	#Define SD_SPI_FOSC_64 2
	#Define SD_SPI_FOSC_16 1
	#Define SD_SPI_FOSC_04 0
	#Define __KEYPAD_PORT PORTB
	#Define __LCD_DTPORT PORTD
	#Define __LCD_ENPORT PORTD
	#Define __LCD_RSPORT PORTD
	#Define SD_DETECT PORTA,1
	#Define RFIDENABLE PORTD,4
	#Define BUA 40016
	#Define BUAH 156
	#Define UPA_L 0
	#Define UPA_H 1
	#Define NOU 2
	#Define NUM_UHE 3
	#Define NUM_MHE 4
	#Define TAGOFFSET 4
	#Define UHA 16
	#Define MHA 912
	#Define MHAH 3
	#Define NUM_UH 200
	#Define NUM_MH 10
	#Define FLAG _B#VR1,1
F2_SOF equ $ ; V4.0 RFID 2ND GENERATION.PRP
F3_SOF equ $ ; V4.0 RFID 2ND GENERATION_FWD.PBP
F3_EOF equ $ ; V4.0 RFID 2ND GENERATION_FWD.PBP
F4_SOF equ $ ; V4.0 RFID 2ND GENERATION_LIB.PBP
F4_000001 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo OverLibCode
	F@Jump OVERLIBCODE
SD_WRITE_SUB
F4_000109 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Buffer_Idx > $FF Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_BUFFER_IDXH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL2
F4_000110 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer1[SD_Buffer_Idx - $100] = SD_Byte_RW
	Movlb 2
ram_bank = 2
	Movf SD_BUFFER_IDX,W
	Lfsr 0,SD_BUFFER1
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff SD_BYTE_RW,INDF0
	Movlb 0
ram_bank = 0
	F@Jump bc@LL3
bc@LL2
F4_000111 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000112 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer0[SD_Buffer_Idx] = SD_Byte_RW
	Lfsr 0,SD_BUFFER0
	Movlb 2
ram_bank = 2
	Movf SD_BUFFER_IDX,W
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff SD_BYTE_RW,INDF0
F4_000113 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL3
	Movlb 0
ram_bank = 0
F4_000114 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Is_Dirty = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_IS_DIRTY
F4_000115 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Buffer_Idx = $1FF Then
	Incf SD_BUFFER_IDX,W
	Movlw 1
	Btfsc STATUS,2,0
	Xorwf SD_BUFFER_IDXH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL5
F4_000116 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Repeat
bc@LL6
F4_000117 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_000118 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Until SD_Return = 0
	Movf SD_RETURN,F,0
	Btfss STATUS,2,0
	Go@to bc@LL6
bc@LL7
F4_000119 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Is_Dirty = 0
	Movlb 2
ram_bank = 2
	Clrf SD_IS_DIRTY
F4_000120 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Idx = 0
	Clrf SD_BUFFER_IDXH
	Clrf SD_BUFFER_IDX
F4_000121 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Sector_Num
	Incf SD_SECTOR_NUM,F,0
	Movlw 0
	Addwfc SD_SECTOR_NUMH,F,0
	Addwfc SD_SECTOR_NUMHH,F,0
	Addwfc SD_SECTOR_NUMHHH,F,0
	Movlb 0
ram_bank = 0
	F@Jump bc@LL8
bc@LL5
F4_000122 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000123 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Idx = SD_Buffer_Idx + 1
	Movlb 2
ram_bank = 2
	Infsnz SD_BUFFER_IDX,F
	Incf SD_BUFFER_IDXH,F
F4_000124 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL8
	Movlb 0
ram_bank = 0
F4_000125 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_SECTOR_SUB
F4_000128 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Idx = 0
	Movlb 2
ram_bank = 2
	Clrf SD_BUFFER_IDXH
	Clrf SD_BUFFER_IDX
F4_000129 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_RW_Option = 0 Then
	Movf SD_RW_OPTION,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL10
F4_000130 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Idx = 0 To $FF
	Clrf SD_IDX,0
fr@lb12
F4_000131 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer0[SD_Idx] = 0
	Lfsr 0,SD_BUFFER0
	Movf SD_IDX,W,0
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Clrf INDF0,0
F4_000132 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer1[SD_Idx] = 0
	Lfsr 0,SD_BUFFER1
	Movf SD_IDX,W,0
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Clrf INDF0,0
F4_000133 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Idx
	Incf SD_IDX,F,0
	Btfss STATUS,2,0
	Go@to fr@lb12
nx@lb13
	F@Jump bc@LL13
bc@LL10
F4_000134 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000135 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_Sector
	F@Call SD_READ_SECTOR
F4_000136 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL13
F4_000137 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_SEEK_RESPONSE
F4_000151 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Repeat
bc@LL14
F4_000152 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Receive_Byte
	F@Call SD_RECEIVE_BYTE
F4_000153 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Dec SD_Seek_Response_Idx
	Decf SD_SEEK_RESPONSE_IDX,F,0
	Movlw 0
	Subwfb SD_SEEK_RESPONSE_IDXH,F,0
F4_000154 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Until SD_ByteR = SD_Seek_Response_Reqd Or SD_Seek_Response_Idx = 0
	Movff SD_BYTER,PP0
	Movf SD_SEEK_RESPONSE_REQD,W,0
	F@Call t@eb
	Movwf SP#P9,0
	Movf SD_SEEK_RESPONSE_IDXH,W,0
	Iorwf SD_SEEK_RESPONSE_IDX,W,0
	Btfsc STATUS,2,0
	Go@to cp@lb4
	Movlw 0
	Bra $ + 4
cp@lb4
	Movlw 1
	Iorwf SP#P9,W,0
	Btfsc STATUS,2,0
	Go@to bc@LL14
bc@LL15
F4_000155 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Seek_Response_Idx = 0 Then
	Movf SD_SEEK_RESPONSE_IDXH,W,0
	Iorwf SD_SEEK_RESPONSE_IDX,W,0
	Btfss STATUS,2,0
	Go@to bc@LL17
F4_000156 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Return = 1
	Movlw 1
	Movwf SD_SEEK_RESPONSE_RETURN,0
	F@Jump bc@LL18
bc@LL17
F4_000157 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000158 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Return = 0
	Clrf SD_SEEK_RESPONSE_RETURN,0
F4_000159 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL18
F4_000160 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_WRITE_SECTOR
F4_000163 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Timeout = 0
	Movlb 2
ram_bank = 2
	Clrf SD_TIMEOUT
F4_000164 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return = 1
	Movlw 1
	Movwf SD_RETURN,0
SD_WRITE_SECTOR_START
	Movlb 0
ram_bank = 0
F4_000166 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Address = SD_Sector_Num << 9
	Bcf STATUS,0,0
	Clrf SD_ADDRESS,0
	Rlcf SD_SECTOR_NUM,W,0
	Movwf SD_ADDRESSH,0
	Rlcf SD_SECTOR_NUMH,W,0
	Movwf SD_ADDRESSHH,0
	Rlcf SD_SECTOR_NUMHH,W,0
	Movwf SD_ADDRESSHHH,0
F4_000168 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Low SD_CS
	Bcf TRISC,2,0
	Bcf PORTC,2,0
F4_000169 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte0 = $58
	Movlw 88
	Movlb 2
ram_bank = 2
	Movwf SD_BYTE0
F4_000170 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte1 = SD_Address.BYTE3
	Movff SD_ADDRESSHHH,SD_BYTE1
F4_000171 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte2 = SD_Address.BYTE2
	Movff SD_ADDRESSHH,SD_BYTE2
F4_000172 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte3 = SD_Address.BYTE1
	Movff SD_ADDRESSH,SD_BYTE3
F4_000173 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte4 = SD_Address.BYTE0
	Movff SD_ADDRESS,SD_BYTE4
F4_000174 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FF
	Setf SD_BYTE5
F4_000175 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Reqd = $00
	Clrf SD_SEEK_RESPONSE_REQD,0
F4_000176 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Idx = $FFFF
	Setf SD_SEEK_RESPONSE_IDXH,0
	Setf SD_SEEK_RESPONSE_IDX,0
F4_000177 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Cmd
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_CMD
F4_000178 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Seek_Response
	F@Call SD_SEEK_RESPONSE
F4_000179 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Seek_Response_Return = 1 Then GoTo SD_Write_Sector_Error
	Movlw 1
	Subwf SD_SEEK_RESPONSE_RETURN,W,0
	Btfss STATUS,2,0
	Go@to bc@LL20
	F@Jump SD_WRITE_SECTOR_ERROR
bc@LL20
F4_000181 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FE
	Movlw 254
	Movlb 2
ram_bank = 2
	Movwf SD_BYTE5
F4_000182 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Byte
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_BYTE
F4_000184 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Idx = 0 To $FF
	Clrf SD_IDX,0
fr@lb22
F4_000185 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = SD_Buffer0[SD_Idx]
	Lfsr 0,SD_BUFFER0
	Movf SD_IDX,W,0
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movlb 2
ram_bank = 2
	Movwf SD_BYTE5
F4_000186 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Byte
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_BYTE
F4_000187 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Idx
	Incf SD_IDX,F,0
	Btfss STATUS,2,0
	Go@to fr@lb22
nx@lb23
F4_000188 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Idx = 0 To $FF
	Clrf SD_IDX,0
fr@lb24
F4_000189 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = SD_Buffer1[SD_Idx]
	Lfsr 0,SD_BUFFER1
	Movf SD_IDX,W,0
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movlb 2
ram_bank = 2
	Movwf SD_BYTE5
F4_000190 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Byte
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_BYTE
F4_000191 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Idx
	Incf SD_IDX,F,0
	Btfss STATUS,2,0
	Go@to fr@lb24
nx@lb25
F4_000193 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FF
	Movlb 2
ram_bank = 2
	Setf SD_BYTE5
F4_000194 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Byte
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_BYTE
F4_000195 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Byte
	F@Call SD_SEND_BYTE
F4_000197 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Reqd = $FF
	Setf SD_SEEK_RESPONSE_REQD,0
F4_000198 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Idx = $FFFF
	Setf SD_SEEK_RESPONSE_IDXH,0
	Setf SD_SEEK_RESPONSE_IDX,0
F4_000199 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Receive_Byte
	F@Call SD_RECEIVE_BYTE
F4_000200 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Temp_Byte = SD_ByteR
	Movff SD_BYTER,SD_TEMP_BYTE
F4_000201 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Seek_Response
	F@Call SD_SEEK_RESPONSE
F4_000202 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Temp_Byte = SD_Temp_Byte & $0F
	Movlw 15
	Movlb 2
ram_bank = 2
	Andwf SD_TEMP_BYTE,F
F4_000203 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Temp_Byte <> $05 Then GoTo SD_Write_Sector_Error
	Movlw 5
	Subwf SD_TEMP_BYTE,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL26
	F@Jump SD_WRITE_SECTOR_ERROR
bc@LL26
F4_000204 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Seek_Response_Return = 1 Then GoTo SD_Write_Sector_Error
	Movlw 1
	Subwf SD_SEEK_RESPONSE_RETURN,W,0
	Btfss STATUS,2,0
	Go@to bc@LL28
	F@Jump SD_WRITE_SECTOR_ERROR
bc@LL28
F4_000205 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return = 0
	Clrf SD_RETURN,0
F4_000206 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000207 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo SD_Write_Sector_End
	F@Jump SD_WRITE_SECTOR_END
SD_WRITE_SECTOR_ERROR
F4_000209 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000210 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Timeout = SD_Timeout + 1
	Movlb 2
ram_bank = 2
	Incf SD_TIMEOUT,F
F4_000211 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Timeout < $03 Then
	Movlw 3
	Subwf SD_TIMEOUT,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL30
F4_000212 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo SD_Write_Sector_Start
	F@Jump SD_WRITE_SECTOR_START
F4_000213 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL30
SD_WRITE_SECTOR_END
F4_000215 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_READ_SECTOR
F4_000218 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Timeout = 0
	Movlb 2
ram_bank = 2
	Clrf SD_TIMEOUT
F4_000219 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return = 1
	Movlw 1
	Movwf SD_RETURN,0
SD_READ_SECTOR_START
	Movlb 0
ram_bank = 0
F4_000221 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Address = SD_Sector_Num << 9
	Bcf STATUS,0,0
	Clrf SD_ADDRESS,0
	Rlcf SD_SECTOR_NUM,W,0
	Movwf SD_ADDRESSH,0
	Rlcf SD_SECTOR_NUMH,W,0
	Movwf SD_ADDRESSHH,0
	Rlcf SD_SECTOR_NUMHH,W,0
	Movwf SD_ADDRESSHHH,0
F4_000223 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Low SD_CS
	Bcf TRISC,2,0
	Bcf PORTC,2,0
F4_000224 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte0 = $51
	Movlw 81
	Movlb 2
ram_bank = 2
	Movwf SD_BYTE0
F4_000225 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte1 = SD_Address.BYTE3
	Movff SD_ADDRESSHHH,SD_BYTE1
F4_000226 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte2 = SD_Address.BYTE2
	Movff SD_ADDRESSHH,SD_BYTE2
F4_000227 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte3 = SD_Address.BYTE1
	Movff SD_ADDRESSH,SD_BYTE3
F4_000228 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte4 = SD_Address.BYTE0
	Movff SD_ADDRESS,SD_BYTE4
F4_000229 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FF
	Setf SD_BYTE5
F4_000230 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Cmd
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_CMD
F4_000231 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Reqd = $00
	Clrf SD_SEEK_RESPONSE_REQD,0
F4_000232 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Idx = $FFFF
	Setf SD_SEEK_RESPONSE_IDXH,0
	Setf SD_SEEK_RESPONSE_IDX,0
F4_000233 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Seek_Response
	F@Call SD_SEEK_RESPONSE
F4_000234 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Seek_Response_Return = 1 Then GoTo SD_Read_Sector_Error
	Movlw 1
	Subwf SD_SEEK_RESPONSE_RETURN,W,0
	Btfss STATUS,2,0
	Go@to bc@LL32
	F@Jump SD_READ_SECTOR_ERROR
bc@LL32
F4_000236 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Reqd = $FE
	Movlw 254
	Movwf SD_SEEK_RESPONSE_REQD,0
F4_000237 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Idx = $FFFF
	Setf SD_SEEK_RESPONSE_IDXH,0
	Setf SD_SEEK_RESPONSE_IDX,0
F4_000238 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Seek_Response
	F@Call SD_SEEK_RESPONSE
F4_000239 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Seek_Response_Return = 1 Then GoTo SD_Read_Sector_Error
	Movlw 1
	Subwf SD_SEEK_RESPONSE_RETURN,W,0
	Btfss STATUS,2,0
	Go@to bc@LL34
	F@Jump SD_READ_SECTOR_ERROR
bc@LL34
F4_000241 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Idx = 0 To $FF
	Clrf SD_IDX,0
fr@lb36
F4_000242 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Receive_Byte
	F@Call SD_RECEIVE_BYTE
F4_000243 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer0[SD_Idx] = SD_ByteR
	Lfsr 0,SD_BUFFER0
	Movf SD_IDX,W,0
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff SD_BYTER,INDF0
F4_000244 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Idx
	Incf SD_IDX,F,0
	Btfss STATUS,2,0
	Go@to fr@lb36
nx@lb37
F4_000245 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Idx = 0 To $FF
	Clrf SD_IDX,0
fr@lb38
F4_000246 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Receive_Byte
	F@Call SD_RECEIVE_BYTE
F4_000247 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer1[SD_Idx] = SD_ByteR
	Lfsr 0,SD_BUFFER1
	Movf SD_IDX,W,0
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff SD_BYTER,INDF0
F4_000248 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Idx
	Incf SD_IDX,F,0
	Btfss STATUS,2,0
	Go@to fr@lb38
nx@lb39
F4_000250 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Receive_Byte
	F@Call SD_RECEIVE_BYTE
F4_000251 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Receive_Byte
	F@Call SD_RECEIVE_BYTE
F4_000252 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000253 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FF
	Movlb 2
ram_bank = 2
	Setf SD_BYTE5
F4_000254 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Byte
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_BYTE
F4_000255 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return = 0
	Clrf SD_RETURN,0
F4_000256 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo SD_Read_Sector_End
	F@Jump SD_READ_SECTOR_END
SD_READ_SECTOR_ERROR
F4_000258 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000259 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Timeout = SD_Timeout + 1
	Movlb 2
ram_bank = 2
	Incf SD_TIMEOUT,F
F4_000260 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Timeout < $03 Then
	Movlw 3
	Subwf SD_TIMEOUT,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL40
F4_000261 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo SD_Read_Sector_Start
	F@Jump SD_READ_SECTOR_START
F4_000262 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL40
SD_READ_SECTOR_END
F4_000264 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_READ_FAT_ENTRY
F4_000267 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Buffer_Pos > $0FF Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_BUFFER_POSH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL42
F4_000268 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Entry.BYTE0 = SD_Buffer1[SD_Buffer_Pos - $100]
	Movlb 2
ram_bank = 2
	Movf SD_BUFFER_POS,W
	Lfsr 0,SD_BUFFER1
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movwf SD_FAT_ENTRY
F4_000269 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Entry.BYTE1 = SD_Buffer1[SD_Buffer_Pos + 1 - $100]
	Movlw 1
	Addwf SD_BUFFER_POS,W
	Movwf PP7,0
	Movlw 0
	Addwfc SD_BUFFER_POSH,W
	Movwf PP7H,0
	Movf PP7,W,0
	Lfsr 0,SD_BUFFER1
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movwf SD_FAT_ENTRYH
	Movlb 0
ram_bank = 0
	F@Jump bc@LL43
bc@LL42
F4_000270 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000271 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Entry.BYTE0 = SD_Buffer0[SD_Buffer_Pos]
	Lfsr 0,SD_BUFFER0
	Movlb 2
ram_bank = 2
	Movf SD_BUFFER_POS,W
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movwf SD_FAT_ENTRY
F4_000272 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Entry.BYTE1 = SD_Buffer0[SD_Buffer_Pos + 1]
	Incf SD_BUFFER_POS,W
	Lfsr 0,SD_BUFFER0
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movwf SD_FAT_ENTRYH
F4_000273 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL43
	Movlb 0
ram_bank = 0
F4_000274 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_FIND_FREE_CLUSTER
F4_000277 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Temp_Dword = SD_FAT1 + SD_Secs_Per_FAT - 1
	Movlb 2
ram_bank = 2
	Movf SD_SECS_PER_FAT,W
	Addwf SD_FAT1,W
	Movwf PP7,0
	Movf SD_SECS_PER_FATH,W
	Addwfc SD_FAT1H,W
	Movwf PP7H,0
	Movlw 0
	Addwfc SD_FAT1HH,W
	Movwf PP7HH,0
	Movlw 0
	Addwfc SD_FAT1HHH,W
	Movwf PP7HHH,0
	Decf PP7,W,0
	Movwf SD_TEMP_DWORD
	Movlw 0
	Subwfb PP7H,W,0
	Movwf SD_TEMP_DWORDH
	Movlw 0
	Subwfb PP7HH,W,0
	Movwf SD_TEMP_DWORDHH
	Movlw 0
	Subwfb PP7HHH,W,0
	Movwf SD_TEMP_DWORDHHH
F4_000278 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Sec_Num = (SD_FAT_Sec + SD_FAT1) To SD_Temp_Dword
	Movf SD_FAT1,W
	Addwf SD_FAT_SEC,W
	Movwf SD_SEC_NUM
	Movf SD_FAT1H,W
	Addwfc SD_FAT_SECH,W
	Movwf SD_SEC_NUMH
	Movf SD_FAT1HH,W
	Addwfc SD_FAT_SECHH,W
	Movwf SD_SEC_NUMHH
	Movf SD_FAT1HHH,W
	Addwfc SD_FAT_SECHHH,W
	Movwf SD_SEC_NUMHHH
fr@lb45
	Movlb 0
ram_bank = 0
	Movlb 2
ram_bank = 2
	Movf SD_SEC_NUM,W
	Subwf SD_TEMP_DWORD,W
	Movf SD_SEC_NUMH,W
	Subwfb SD_TEMP_DWORDH,W
	Movf SD_SEC_NUMHH,W
	Subwfb SD_TEMP_DWORDHH,W
	Movf SD_SEC_NUMHHH,W
	Subwfb SD_TEMP_DWORDHHH,W
	Movf SD_SEC_NUMHHH,W
	Xorwf SD_TEMP_DWORDHHH,W
	Btfsc STATUS,0,0
	Xorlw 128
	Movlb 0
ram_bank = 0
	Btfss STATUS,4,0
	Go@to nx@lb46
F4_000279 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Sec_Num
	Movff SD_SEC_NUMHHH,SD_SECTOR_NUMHHH
	Movff SD_SEC_NUMHH,SD_SECTOR_NUMHH
	Movff SD_SEC_NUMH,SD_SECTOR_NUMH
	Movff SD_SEC_NUM,SD_SECTOR_NUM
F4_000280 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_RW_OPTION
F4_000281 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000283 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Buffer_Pos = $0000 To $1FF Step 2
	Movlb 2
ram_bank = 2
	Clrf SD_BUFFER_POSH
	Clrf SD_BUFFER_POS
fr@lb47
	Movlb 0
ram_bank = 0
	Movlw 2
	Movlb 2
ram_bank = 2
	Subwf SD_BUFFER_POSH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb48
F4_000284 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Sec_Num > (SD_FAT_Sec + SD_FAT1) Or SD_Buffer_Pos >= (SD_FAT_Buffer_Pos + (2 * SD_Cluster_Seq_Num)) Then
	Movlb 2
ram_bank = 2
	Movf SD_FAT1,W
	Addwf SD_FAT_SEC,W
	Movwf PBP#VAR0,0
	Movf SD_FAT1H,W
	Addwfc SD_FAT_SECH,W
	Movwf PBP#VAR0H,0
	Movf SD_FAT1HH,W
	Addwfc SD_FAT_SECHH,W
	Movwf PBP#VAR0HH,0
	Movf SD_FAT1HHH,W
	Addwfc SD_FAT_SECHHH,W
	Movwf PBP#VAR0HHH,0
	Movf SD_SEC_NUM,W
	Subwf PBP#VAR0,W,0
	Movf SD_SEC_NUMH,W
	Subwfb PBP#VAR0H,W,0
	Movf SD_SEC_NUMHH,W
	Subwfb PBP#VAR0HH,W,0
	Movf SD_SEC_NUMHHH,W
	Subwfb PBP#VAR0HHH,W,0
	Movf SD_SEC_NUMHHH,W
	Xorwf PBP#VAR0HHH,W,0
	Btfsc STATUS,0,0
	Xorlw 128
	Movlb 0
ram_bank = 0
	Btfss STATUS,4,0
	Go@to cp@lb9
	Movlw 0
	Bra $ + 4
cp@lb9
	Movlw 1
	Movwf SP#P9,0
	Bcf STATUS,0,0
	Movlb 2
ram_bank = 2
	Rlcf SD_CLUSTER_SEQ_NUM,W
	Movwf PP7,0
	Rlcf SD_CLUSTER_SEQ_NUMH,W
	Movwf PP7H,0
	Movf PP7,W,0
	Addwf SD_FAT_BUFFER_POS,W
	Movwf PBP#VAR0,0
	Movf PP7H,W,0
	Addwfc SD_FAT_BUFFER_POSH,W
	Movwf PBP#VAR0H,0
	Movff SD_BUFFER_POSH,PP0H
	Movff SD_BUFFER_POS,PP0
	Movff PBP#VAR0H,PP1H
	Movf PBP#VAR0,W,0
	F@Call t@ge
	Iorwf SP#P9,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL49
F4_000285 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_FAT_Entry
	F@Call SD_READ_FAT_ENTRY
F4_000286 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_FAT_Entry = $0000 Then GoTo SD_Store_FAT_Position
	Movlb 2
ram_bank = 2
	Movf SD_FAT_ENTRYH,W
	Iorwf SD_FAT_ENTRY,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL51
	F@Jump SD_STORE_FAT_POSITION
bc@LL51
F4_000287 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL49
F4_000288 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Buffer_Pos
	Movlw 2
	Movlb 2
ram_bank = 2
	Addwf SD_BUFFER_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to fr@lb47
	Movlb 2
ram_bank = 2
	Incf SD_BUFFER_POSH,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb47
nx@lb48
F4_000289 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Sec_Num
	Movlb 2
ram_bank = 2
	Incf SD_SEC_NUM,F
	Movlw 0
	Addwfc SD_SEC_NUMH,F
	Addwfc SD_SEC_NUMHH,F
	Addwfc SD_SEC_NUMHHH,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to fr@lb45
nx@lb46
F4_000290 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_000291 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
SD_STORE_FAT_POSITION
F4_000293 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = SD_Sec_Num - SD_FAT1
	Movlb 2
ram_bank = 2
	Movf SD_FAT1,W
	Subwf SD_SEC_NUM,W
	Movwf SD_FAT_SEC
	Movf SD_FAT1H,W
	Subwfb SD_SEC_NUMH,W
	Movwf SD_FAT_SECH
	Movf SD_FAT1HH,W
	Subwfb SD_SEC_NUMHH,W
	Movwf SD_FAT_SECHH
	Movf SD_FAT1HHH,W
	Subwfb SD_SEC_NUMHHH,W
	Movwf SD_FAT_SECHHH
F4_000294 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_Buffer_Pos
	Movff SD_BUFFER_POSH,SD_FAT_BUFFER_POSH
	Movff SD_BUFFER_POS,SD_FAT_BUFFER_POS
F4_000295 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = (SD_FAT_Sec * $100)
	Movff SD_FAT_SEC,SD_CLUSTER_NUMH
	Clrf SD_CLUSTER_NUM
F4_000296 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = (SD_FAT_Buffer_Pos / 2) + SD_Cluster_Num
	Bcf STATUS,0,0
	Rrcf SD_FAT_BUFFER_POSH,W
	Movwf PP7H,0
	Rrcf SD_FAT_BUFFER_POS,W
	Movwf PP7,0
	Movf PP7,W,0
	Addwf SD_CLUSTER_NUM,F
	Movf PP7H,W,0
	Addwfc SD_CLUSTER_NUMH,F
F4_000297 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Num = 0
	Clrf SD_CLUSTER_SEQ_NUMH
	Clrf SD_CLUSTER_SEQ_NUM
F4_000298 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Buffer_Pos = SD_FAT_Buffer_Pos To $1FF Step 2
	Movff SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
	Movff SD_FAT_BUFFER_POS,SD_BUFFER_POS
fr@lb53
	Movlb 0
ram_bank = 0
	Movlw 2
	Movlb 2
ram_bank = 2
	Subwf SD_BUFFER_POSH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb54
F4_000299 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_FAT_Entry
	F@Call SD_READ_FAT_ENTRY
F4_000300 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_FAT_Entry = $0000 Then
	Movlb 2
ram_bank = 2
	Movf SD_FAT_ENTRYH,W
	Iorwf SD_FAT_ENTRY,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL55
F4_000301 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Cluster_Seq_Num
	Movlb 2
ram_bank = 2
	Infsnz SD_CLUSTER_SEQ_NUM,F
	Incf SD_CLUSTER_SEQ_NUMH,F
	Movlb 0
ram_bank = 0
	F@Jump bc@LL56
bc@LL55
F4_000302 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000303 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo SD_Store_Cluster_Seq
	F@Jump SD_STORE_CLUSTER_SEQ
F4_000304 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL56
F4_000305 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Buffer_Pos
	Movlw 2
	Movlb 2
ram_bank = 2
	Addwf SD_BUFFER_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to fr@lb53
	Movlb 2
ram_bank = 2
	Incf SD_BUFFER_POSH,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb53
nx@lb54
SD_STORE_CLUSTER_SEQ
F4_000307 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Idx = 1
	Movlb 2
ram_bank = 2
	Clrf SD_CLUSTER_SEQ_IDXH
	Movlw 1
	Movwf SD_CLUSTER_SEQ_IDX
F4_000308 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 0
	Clrf SD_EXTENDED_RETURN
F4_000309 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
SD_MODIFY_FILE_NAME
F4_000312 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Null_F = 0
	Movlb 2
ram_bank = 2
	Clrf SD_NULL_F
F4_000313 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $00 To $07
	Clrf SD_ROOT_DIR_FILE_POS
fr@lb58
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb59
F4_000314 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Null_F = 1 Or SD_File_Name[SD_Root_Dir_File_Pos] = 0 Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_NULL_F,W
	Movlw 1
	Btfss STATUS,2,0
	Movlw 0
	Movwf SP#P9,0
	Lfsr 0,SD_FILE_NAME
	Movf SD_ROOT_DIR_FILE_POS,W
	Movf PLUSW0,W,0
	Movwf PBP#VAR0,0
	Movlw 1
	Movf PBP#VAR0,F,0
	Btfss STATUS,2,0
	Movlw 0
	Iorwf SP#P9,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL60
F4_000315 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Name[SD_Root_Dir_File_Pos] = $20
	Movlw 32
	Movwf PRODL,0
	Lfsr 0,SD_FILE_NAME
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Movff PRODL,PLUSW0
F4_000316 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Null_F = 1
	Movlw 1
	Movwf SD_NULL_F
F4_000317 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL60
	Movlb 0
ram_bank = 0
F4_000318 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb58
nx@lb59
F4_000319 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Null_F = 0
	Movlb 2
ram_bank = 2
	Clrf SD_NULL_F
F4_000320 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $08 To $0A
	Movlw 8
	Movwf SD_ROOT_DIR_FILE_POS
fr@lb62
	Movlb 0
ram_bank = 0
	Movlw 11
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb63
F4_000321 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Null_F = 1 Or SD_File_Ext[SD_Root_Dir_File_Pos - $08] = 0 Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_NULL_F,W
	Movlw 1
	Btfss STATUS,2,0
	Movlw 0
	Movwf SP#P9,0
	Movlw 8
	Subwf SD_ROOT_DIR_FILE_POS,W
	Lfsr 0,SD_FILE_EXT
	Movf PLUSW0,W,0
	Movwf PBP#VAR0,0
	Movlw 1
	Movf PBP#VAR0,F,0
	Btfss STATUS,2,0
	Movlw 0
	Iorwf SP#P9,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL64
F4_000322 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Ext[SD_Root_Dir_File_Pos - $08] = $20
	Movlw 8
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Addlw SD_FILE_EXT
	Movwf FSR0L,0
	Movlw SD_FILE_EXT >> 8
	Clrf FSR0H,0
	Addwfc FSR0H,F,0
	Movlw 32
	Movwf INDF0,0
F4_000323 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Null_F = 1
	Movlw 1
	Movwf SD_NULL_F
F4_000324 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL64
	Movlb 0
ram_bank = 0
F4_000325 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb62
nx@lb63
F4_000326 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_FIND_ROOT_DIR_ENTRY
F4_000329 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Modify_File_Name
	F@Call SD_MODIFY_FILE_NAME
F4_000330 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_Root_Entries = 0
	Movlb 2
ram_bank = 2
	Clrf SD_NUM_OF_ROOT_ENTRIESH
	Clrf SD_NUM_OF_ROOT_ENTRIES
F4_000331 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Temp_Dword = SD_Root_Dir + SD_Secs_in_Root - 1
	Movf SD_SECS_IN_ROOT,W
	Addwf SD_ROOT_DIR,W
	Movwf PP7,0
	Movf SD_SECS_IN_ROOTH,W
	Addwfc SD_ROOT_DIRH,W
	Movwf PP7H,0
	Movlw 0
	Addwfc SD_ROOT_DIRHH,W
	Movwf PP7HH,0
	Movlw 0
	Addwfc SD_ROOT_DIRHHH,W
	Movwf PP7HHH,0
	Decf PP7,W,0
	Movwf SD_TEMP_DWORD
	Movlw 0
	Subwfb PP7H,W,0
	Movwf SD_TEMP_DWORDH
	Movlw 0
	Subwfb PP7HH,W,0
	Movwf SD_TEMP_DWORDHH
	Movlw 0
	Subwfb PP7HHH,W,0
	Movwf SD_TEMP_DWORDHHH
F4_000332 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Sec_Num = SD_Root_Dir To SD_Temp_Dword
	Movff SD_ROOT_DIRHHH,SD_SEC_NUMHHH
	Movff SD_ROOT_DIRHH,SD_SEC_NUMHH
	Movff SD_ROOT_DIRH,SD_SEC_NUMH
	Movff SD_ROOT_DIR,SD_SEC_NUM
fr@lb66
	Movlb 0
ram_bank = 0
	Movlb 2
ram_bank = 2
	Movf SD_SEC_NUM,W
	Subwf SD_TEMP_DWORD,W
	Movf SD_SEC_NUMH,W
	Subwfb SD_TEMP_DWORDH,W
	Movf SD_SEC_NUMHH,W
	Subwfb SD_TEMP_DWORDHH,W
	Movf SD_SEC_NUMHHH,W
	Subwfb SD_TEMP_DWORDHHH,W
	Movf SD_SEC_NUMHHH,W
	Xorwf SD_TEMP_DWORDHHH,W
	Btfsc STATUS,0,0
	Xorlw 128
	Movlb 0
ram_bank = 0
	Btfss STATUS,4,0
	Go@to nx@lb67
F4_000333 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Sec_Num
	Movff SD_SEC_NUMHHH,SD_SECTOR_NUMHHH
	Movff SD_SEC_NUMHH,SD_SECTOR_NUMHH
	Movff SD_SEC_NUMH,SD_SECTOR_NUMH
	Movff SD_SEC_NUM,SD_SECTOR_NUM
F4_000334 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_RW_OPTION
F4_000335 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000337 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Buffer_Pos = $000 To $1FF Step 32
	Movlb 2
ram_bank = 2
	Clrf SD_BUFFER_POSH
	Clrf SD_BUFFER_POS
fr@lb68
	Movlb 0
ram_bank = 0
	Movlw 2
	Movlb 2
ram_bank = 2
	Subwf SD_BUFFER_POSH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb69
F4_000338 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = 0 To 31
	Movlb 2
ram_bank = 2
	Clrf SD_ROOT_DIR_FILE_POS
fr@lb70
	Movlb 0
ram_bank = 0
	Movlw 32
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb71
F4_000339 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Temp = SD_Buffer_Pos + SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Addwf SD_BUFFER_POS,W
	Movwf SD_TEMP
	Movlw 0
	Addwfc SD_BUFFER_POSH,W
	Movwf SD_TEMPH
F4_000340 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Temp > $0FF Then
	Movlw 1
	Subwf SD_TEMPH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL72
F4_000341 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Root_Dir_File[SD_Root_Dir_File_Pos] = SD_Buffer1[SD_Temp - $100]
	Movlb 2
ram_bank = 2
	Movf SD_TEMP,W
	Lfsr 0,SD_BUFFER1
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff INDF0,PBP#VAR0
	Lfsr 0,SD_ROOT_DIR_FILE
	Movf SD_ROOT_DIR_FILE_POS,W
	Movff PBP#VAR0,PLUSW0
	Movlb 0
ram_bank = 0
	F@Jump bc@LL73
bc@LL72
F4_000342 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000343 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Root_Dir_File[SD_Root_Dir_File_Pos] = SD_Buffer0[SD_Temp]
	Lfsr 0,SD_BUFFER0
	Movlb 2
ram_bank = 2
	Movf SD_TEMP,W
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff INDF0,PBP#VAR0
	Lfsr 0,SD_ROOT_DIR_FILE
	Movf SD_ROOT_DIR_FILE_POS,W
	Movff PBP#VAR0,PLUSW0
F4_000344 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL73
	Movlb 0
ram_bank = 0
F4_000345 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb70
nx@lb71
F4_000346 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Select SD_Find_Root_Dir_Entry_F
F4_000347 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Case 0
	Movlb 2
ram_bank = 2
	Movf SD_FIND_ROOT_DIR_ENTRY_F,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL75
F4_000348 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Root_Dir_File[0] = $00 Or SD_Root_Dir_File[0] = $E5 Then
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#0,W
	Movwf PBP#VAR0,0
	Movlw 1
	Movf PBP#VAR0,F,0
	Btfss STATUS,2,0
	Movlw 0
	Movwf SP#P9,0
	Movf SD_ROOT_DIR_FILE#0,W
	Movwf PBP#VAR0,0
	Movlw 229
	Subwf PBP#VAR0,W,0
	Movlw 1
	Btfss STATUS,2,0
	Movlw 0
	Iorwf SP#P9,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL78
F4_000349 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo SD_Store_Root_Direct_Position
	F@Jump SD_STORE_ROOT_DIRECT_POSITION
F4_000350 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL78
	F@Jump bc@LL74
bc@LL75
F4_000351 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Case 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_FIND_ROOT_DIR_ENTRY_F,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL80
F4_000352 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Null_F = 0
	Movlb 2
ram_bank = 2
	Clrf SD_NULL_F
F4_000353 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $00 To $07
	Clrf SD_ROOT_DIR_FILE_POS
fr@lb82
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb83
F4_000354 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Root_Dir_File[SD_Root_Dir_File_Pos] <> SD_File_Name[SD_Root_Dir_File_Pos] Then
	Lfsr 0,SD_ROOT_DIR_FILE
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Movf PLUSW0,W,0
	Movwf PBP#VAR0,0
	Lfsr 0,SD_FILE_NAME
	Movf SD_ROOT_DIR_FILE_POS,W
	Movf PLUSW0,W,0
	Movwf PBP#VAR1,0
	Movf PBP#VAR0,W,0
	Subwf PBP#VAR1,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL84
F4_000355 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Null_F = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_NULL_F
F4_000356 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Break
	Movlb 0
ram_bank = 0
	F@Jump nx@lb83
F4_000357 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL84
F4_000358 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb82
nx@lb83
F4_000359 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $08 To $0A
	Movlw 8
	Movlb 2
ram_bank = 2
	Movwf SD_ROOT_DIR_FILE_POS
fr@lb86
	Movlb 0
ram_bank = 0
	Movlw 11
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb87
F4_000360 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Root_Dir_File[SD_Root_Dir_File_Pos] <> SD_File_Ext[SD_Root_Dir_File_Pos - $08] Then
	Lfsr 0,SD_ROOT_DIR_FILE
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Movf PLUSW0,W,0
	Movwf PBP#VAR0,0
	Movlw 8
	Subwf SD_ROOT_DIR_FILE_POS,W
	Lfsr 0,SD_FILE_EXT
	Movf PLUSW0,W,0
	Movwf PBP#VAR1,0
	Movf PBP#VAR0,W,0
	Subwf PBP#VAR1,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL88
F4_000361 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Null_F = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_NULL_F
F4_000362 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Break
	Movlb 0
ram_bank = 0
	F@Jump nx@lb87
F4_000363 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL88
F4_000364 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb86
nx@lb87
F4_000365 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Null_F = 0 Then GoTo SD_Store_Root_Direct_Position
	Movlb 2
ram_bank = 2
	Movf SD_NULL_F,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL90
	F@Jump SD_STORE_ROOT_DIRECT_POSITION
bc@LL90
	F@Jump bc@LL74
bc@LL80
F4_000366 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Case 2
	Movlw 2
	Movlb 2
ram_bank = 2
	Subwf SD_FIND_ROOT_DIR_ENTRY_F,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL92
F4_000367 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Root_Dir_File[$0B] | %11110000 <> $FF Then
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#11,W
	Movwf PBP#VAR1,0
	Movlw 240
	Iorwf PBP#VAR1,W,0
	Movwf PBP#VAR0,0
	Movlw 0
	Movwf PBP#VAR0H,0
	Incf PBP#VAR0,W,0
	Iorwf PBP#VAR0H,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL94
F4_000368 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Root_Dir_File[$00] <> $00 Then
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#0,W
	Movwf PBP#VAR0,0
	Movf PBP#VAR0,F,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL96
F4_000369 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Root_Dir_File[$00] <> $E5 Then
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#0,W
	Movwf PBP#VAR0,0
	Movlw 229
	Subwf PBP#VAR0,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL98
F4_000370 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Root_Dir_File[$0B] & %00011110 = 0 Then
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#11,W
	Movwf PBP#VAR1,0
	Movlw 30
	Andwf PBP#VAR1,W,0
	Clrf PBP#VAR0H,0
	Movwf PBP#VAR0,0
	Movf PBP#VAR0H,W,0
	Iorwf PBP#VAR0,W,0
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL100
F4_000371 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Num_of_Root_Entries
	Movlb 2
ram_bank = 2
	Infsnz SD_NUM_OF_ROOT_ENTRIES,F
	Incf SD_NUM_OF_ROOT_ENTRIESH,F
F4_000372 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Num_of_Root_Entries = SD_File_Num Then
	Movf SD_FILE_NUMH,W
	Subwf SD_NUM_OF_ROOT_ENTRIESH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL102
	Movlb 2
ram_bank = 2
	Movf SD_FILE_NUM,W
	Subwf SD_NUM_OF_ROOT_ENTRIES,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL102
F4_000373 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $00 To $07
	Movlb 2
ram_bank = 2
	Clrf SD_ROOT_DIR_FILE_POS
fr@lb104
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb105
F4_000374 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Name[SD_Root_Dir_File_Pos] = SD_Root_Dir_File[SD_Root_Dir_File_Pos]
	Lfsr 0,SD_ROOT_DIR_FILE
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Movff PLUSW0,PBP#VAR0
	Lfsr 0,SD_FILE_NAME
	Movf SD_ROOT_DIR_FILE_POS,W
	Movff PBP#VAR0,PLUSW0
F4_000375 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb104
nx@lb105
F4_000376 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $08 To $0A
	Movlw 8
	Movlb 2
ram_bank = 2
	Movwf SD_ROOT_DIR_FILE_POS
fr@lb106
	Movlb 0
ram_bank = 0
	Movlw 11
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb107
F4_000377 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Ext[SD_Root_Dir_File_Pos - $08] = SD_Root_Dir_File[SD_Root_Dir_File_Pos]
	Movlw 8
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movwf PBP#VAR0,0
	Lfsr 0,SD_ROOT_DIR_FILE
	Movf SD_ROOT_DIR_FILE_POS,W
	Movff PLUSW0,PBP#VAR1
	Lfsr 0,SD_FILE_EXT
	Movf PBP#VAR0,W,0
	Movff PBP#VAR1,PLUSW0
F4_000378 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb106
nx@lb107
F4_000379 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoTo SD_Store_Root_Direct_Position
	F@Jump SD_STORE_ROOT_DIRECT_POSITION
F4_000380 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL102
F4_000381 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL100
F4_000382 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL98
F4_000383 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL96
F4_000384 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL94
F4_000385 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndSelect
bc@LL92
bc@LL74
F4_000386 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Buffer_Pos
	Movlw 32
	Movlb 2
ram_bank = 2
	Addwf SD_BUFFER_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to fr@lb68
	Movlb 2
ram_bank = 2
	Incf SD_BUFFER_POSH,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb68
nx@lb69
F4_000387 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Sec_Num
	Movlb 2
ram_bank = 2
	Incf SD_SEC_NUM,F
	Movlw 0
	Addwfc SD_SEC_NUMH,F
	Addwfc SD_SEC_NUMHH,F
	Addwfc SD_SEC_NUMHHH,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to fr@lb66
nx@lb67
F4_000388 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return_Root_Dir = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN_ROOT_DIR
F4_000389 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
SD_STORE_ROOT_DIRECT_POSITION
F4_000391 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Root_Dir_Sec = SD_Sec_Num - SD_Root_Dir
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR,W
	Subwf SD_SEC_NUM,W
	Movwf SD_ROOT_DIR_SEC
	Movf SD_ROOT_DIRH,W
	Subwfb SD_SEC_NUMH,W
	Movwf SD_ROOT_DIR_SECH
	Movf SD_ROOT_DIRHH,W
	Subwfb SD_SEC_NUMHH,W
	Movwf SD_ROOT_DIR_SECHH
	Movf SD_ROOT_DIRHHH,W
	Subwfb SD_SEC_NUMHHH,W
	Movwf SD_ROOT_DIR_SECHHH
F4_000392 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Root_Dir_Pos = SD_Buffer_Pos
	Movff SD_BUFFER_POSH,SD_ROOT_DIR_POSH
	Movff SD_BUFFER_POS,SD_ROOT_DIR_POS
F4_000393 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return_Root_Dir = 0
	Clrf SD_EXTENDED_RETURN_ROOT_DIR
F4_000394 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
SD_INSERT_BYTE_INTO_BUFFER
F4_000397 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Write_Buffer_Pos > $0FF Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_WRITE_BUFFER_POSH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL108
F4_000398 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer1[SD_Write_Buffer_Pos - $100] = SD_Data_IO
	Movlb 2
ram_bank = 2
	Movf SD_WRITE_BUFFER_POS,W
	Lfsr 0,SD_BUFFER1
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff SD_DATA_IO,INDF0
	Movlb 0
ram_bank = 0
	F@Jump bc@LL109
bc@LL108
F4_000399 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000400 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer0[SD_Write_Buffer_Pos] = SD_Data_IO
	Lfsr 0,SD_BUFFER0
	Movlb 2
ram_bank = 2
	Movf SD_WRITE_BUFFER_POS,W
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movff SD_DATA_IO,INDF0
F4_000401 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL109
	Movlb 0
ram_bank = 0
F4_000402 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_ASSEMBLE_FAT_SECTOR
F4_000405 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_FAT_Buffer_Pos_Prev
	Movff SD_FAT_BUFFER_POS_PREVH,SD_WRITE_BUFFER_POSH
	Movff SD_FAT_BUFFER_POS_PREV,SD_WRITE_BUFFER_POS
F4_000406 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = (SD_FAT_Sec_Prev * $100)
	Movff SD_FAT_SEC_PREV,SD_CLUSTER_NUMH
	Movlb 2
ram_bank = 2
	Clrf SD_CLUSTER_NUM
F4_000407 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = (SD_FAT_Buffer_Pos_Prev / 2) + SD_Cluster_Num
	Bcf STATUS,0,0
	Rrcf SD_FAT_BUFFER_POS_PREVH,W
	Movwf PP7H,0
	Rrcf SD_FAT_BUFFER_POS_PREV,W
	Movwf PP7,0
	Movf PP7,W,0
	Addwf SD_CLUSTER_NUM,F
	Movf PP7H,W,0
	Addwfc SD_CLUSTER_NUMH,F
F4_000408 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Cluster_Num
	Infsnz SD_CLUSTER_NUM,F
	Incf SD_CLUSTER_NUMH,F
F4_000409 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] While SD_Cluster_Seq_Num_Prev > 1
bc@LL110
	Movlb 0
ram_bank = 0
	Movlb 2
ram_bank = 2
	Movf SD_CLUSTER_SEQ_NUM_PREVH,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to cp@lb18
	Movlw 2
	Movlb 2
ram_bank = 2
	Subwf SD_CLUSTER_SEQ_NUM_PREV,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL111
cp@lb18
F4_000410 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_Cluster_Num.BYTE0
	Movff SD_CLUSTER_NUM,SD_DATA_IO
F4_000411 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000412 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000413 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_Cluster_Num.BYTE1
	Movff SD_CLUSTER_NUMH,SD_DATA_IO
F4_000414 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000415 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000416 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Cluster_Num
	Infsnz SD_CLUSTER_NUM,F
	Incf SD_CLUSTER_NUMH,F
F4_000417 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Dec SD_Cluster_Seq_Num_Prev
	Decf SD_CLUSTER_SEQ_NUM_PREV,F
	Movlw 0
	Subwfb SD_CLUSTER_SEQ_NUM_PREVH,F
F4_000418 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Wend
	Movlb 0
ram_bank = 0
	F@Jump bc@LL110
bc@LL111
F4_000419 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_ASSEMBLE_FAT_SECTOR_END_CONT
F4_000422 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = (SD_FAT_Sec * $100)
	Movff SD_FAT_SEC,SD_CLUSTER_NUMH
	Movlb 2
ram_bank = 2
	Clrf SD_CLUSTER_NUM
F4_000423 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = (SD_FAT_Buffer_Pos / 2) + SD_Cluster_Num
	Bcf STATUS,0,0
	Rrcf SD_FAT_BUFFER_POSH,W
	Movwf PP7H,0
	Rrcf SD_FAT_BUFFER_POS,W
	Movwf PP7,0
	Movf PP7,W,0
	Addwf SD_CLUSTER_NUM,F
	Movf PP7H,W,0
	Addwfc SD_CLUSTER_NUMH,F
F4_000424 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_Cluster_Num.BYTE0
	Movff SD_CLUSTER_NUM,SD_DATA_IO
F4_000425 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000426 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000427 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_Cluster_Num.BYTE1
	Movff SD_CLUSTER_NUMH,SD_DATA_IO
F4_000428 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000429 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
F4_000432 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = $FF
	Movlb 2
ram_bank = 2
	Setf SD_DATA_IO
F4_000433 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000434 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000435 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000436 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_WRITE_BYTE_TO_FILE_SUB
F4_000439 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_RW_Ptr
	Movlb 2
ram_bank = 2
	Incf SD_BYTES_READ,F
	Movlw 0
	Addwfc SD_BYTES_READH,F
	Addwfc SD_BYTES_READHH,F
	Addwfc SD_BYTES_READHHH,F
F4_000440 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_RW_Ptr > SD_File_Size Then
	Movf SD_BYTES_READ,W
	Subwf SD_FILE_SIZE,W
	Movf SD_BYTES_READH,W
	Subwfb SD_FILE_SIZEH,W
	Movf SD_BYTES_READHH,W
	Subwfb SD_FILE_SIZEHH,W
	Movf SD_BYTES_READHHH,W
	Subwfb SD_FILE_SIZEHHH,W
	Movf SD_BYTES_READHHH,W
	Xorwf SD_FILE_SIZEHHH,W
	Btfsc STATUS,0,0
	Xorlw 128
	Movlb 0
ram_bank = 0
	Btfsc STATUS,4,0
	Go@to bc@LL113
F4_000441 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_File_Size
	Movlb 2
ram_bank = 2
	Incf SD_FILE_SIZE,F
	Movlw 0
	Addwfc SD_FILE_SIZEH,F
	Addwfc SD_FILE_SIZEHH,F
	Addwfc SD_FILE_SIZEHHH,F
F4_000442 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
	Bsf _B#VR1,0
F4_000443 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL113
	Movlb 0
ram_bank = 0
F4_000444 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Data_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_DATA_BUFFER_POS,F
	Incf SD_DATA_BUFFER_POSH,F
F4_000445 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Data_Buffer_Pos > SD_Bytes_Per_Sec Then
	Movf SD_DATA_BUFFER_POS,W
	Subwf SD_BYTES_PER_SEC,W
	Movf SD_DATA_BUFFER_POSH,W
	Subwfb SD_BYTES_PER_SECH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL115
F4_000446 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Data_Sec
	Movlb 2
ram_bank = 2
	Incf SD_DATA_SEC,F
	Movlw 0
	Addwfc SD_DATA_SECH,F
	Addwfc SD_DATA_SECHH,F
	Addwfc SD_DATA_SECHHH,F
F4_000447 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Sec_in_Cluster
	Incf SD_SEC_IN_CLUSTER,F
F4_000448 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Sec_in_Cluster > SD_Secs_Per_Cluster Then
	Movf SD_SEC_IN_CLUSTER,W
	Subwf SD_SECS_PER_CLUSTER,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL117
F4_000449 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_EOF = 0 Then
	Bcf STATUS,3,0
	Movlb 2
ram_bank = 2
	Btfsc _B#VR1,0
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL119
F4_000450 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = SD_Cluster_Num / $100
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Movff SD_CLUSTER_NUMH,PP0H
	Movff SD_CLUSTER_NUM,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movlw 1
	Movwf PP2H,0
	Clrf PP2,0
	F@Call l@div
	Movff PP0HHH,SD_FAT_SECHHH
	Movff PP0HH,SD_FAT_SECHH
	Movff PP0H,SD_FAT_SECH
	Movff PP0,SD_FAT_SEC
F4_000451 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_Cluster_Num // $100
	Movff SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
	Movlb 2
ram_bank = 2
	Clrf SD_FAT_BUFFER_POSH
F4_000452 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_FAT_Buffer_Pos * 2
	Bcf STATUS,0,0
	Rlcf SD_FAT_BUFFER_POS,F
	Rlcf SD_FAT_BUFFER_POSH,F
F4_000453 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_FAT1 + SD_FAT_Sec
	Movf SD_FAT_SEC,W
	Addwf SD_FAT1,W
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT_SECH,W
	Addwfc SD_FAT1H,W
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT_SECHH,W
	Addwfc SD_FAT1HH,W
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT_SECHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf SD_SECTOR_NUMHHH,0
F4_000454 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000455 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000456 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Pos = SD_FAT_Buffer_Pos
	Movff SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
	Movff SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_000457 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_FAT_Entry
	F@Call SD_READ_FAT_ENTRY
F4_000458 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = SD_FAT_Entry
	Movff SD_FAT_ENTRYH,SD_CLUSTER_NUMH
	Movff SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_000459 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = (SD_Cluster_Num - 2) * SD_Secs_Per_Cluster
	Movlw 254
	Movlb 2
ram_bank = 2
	Addwf SD_CLUSTER_NUM,W
	Movwf PP7,0
	Movlw 255
	Addwfc SD_CLUSTER_NUMH,W
	Movwf PP7H,0
	Movlw 255
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Addwfc PP7HHH,F,0
	Movff PP7HHH,PP0HHH
	Movff PP7HH,PP0HH
	Movff PP7H,PP0H
	Movff PP7,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call al@mul
	Movff PP0HHH,SD_DATA_SECHHH
	Movff PP0HH,SD_DATA_SECHH
	Movff PP0H,SD_DATA_SECH
	Movff PP0,SD_DATA_SEC
F4_000460 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = SD_Data_Sec + SD_Data_Area
	Movf SD_DATA_AREA,W
	Addwf SD_DATA_SEC,F
	Movf SD_DATA_AREAH,W
	Addwfc SD_DATA_SECH,F
	Movf SD_DATA_AREAHH,W
	Addwfc SD_DATA_SECHH,F
	Movf SD_DATA_AREAHHH,W
	Addwfc SD_DATA_SECHHH,F
F4_000461 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Data_Sec
	Movff SD_DATA_SECHHH,SD_SECTOR_NUMHHH
	Movff SD_DATA_SECHH,SD_SECTOR_NUMHH
	Movff SD_DATA_SECH,SD_SECTOR_NUMH
	Movff SD_DATA_SEC,SD_SECTOR_NUM
F4_000462 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000463 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000464 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_SEC_IN_CLUSTER
F4_000466 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = SD_Cluster_Num / $100
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Movff SD_CLUSTER_NUMH,PP0H
	Movff SD_CLUSTER_NUM,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movlw 1
	Movwf PP2H,0
	Clrf PP2,0
	F@Call l@div
	Movff PP0HHH,SD_FAT_SECHHH
	Movff PP0HH,SD_FAT_SECHH
	Movff PP0H,SD_FAT_SECH
	Movff PP0,SD_FAT_SEC
F4_000467 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_Cluster_Num // $100
	Movff SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
	Clrf SD_FAT_BUFFER_POSH
F4_000468 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_FAT_Buffer_Pos * 2
	Bcf STATUS,0,0
	Rlcf SD_FAT_BUFFER_POS,F
	Rlcf SD_FAT_BUFFER_POSH,F
	Movlb 0
ram_bank = 0
	F@Jump bc@LL120
bc@LL119
F4_000470 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000471 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Cluster_Seq_Idx
	Movlb 2
ram_bank = 2
	Infsnz SD_CLUSTER_SEQ_IDX,F
	Incf SD_CLUSTER_SEQ_IDXH,F
F4_000472 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Cluster_Seq_Idx > SD_Cluster_Seq_Num Then
	Movf SD_CLUSTER_SEQ_IDX,W
	Subwf SD_CLUSTER_SEQ_NUM,W
	Movf SD_CLUSTER_SEQ_IDXH,W
	Subwfb SD_CLUSTER_SEQ_NUMH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL122
F4_000473 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos_Prev = SD_FAT_Buffer_Pos
	Movff SD_FAT_BUFFER_POSH,SD_FAT_BUFFER_POS_PREVH
	Movff SD_FAT_BUFFER_POS,SD_FAT_BUFFER_POS_PREV
F4_000474 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec_Prev = SD_FAT_Sec
	Movff SD_FAT_SECHHH,SD_FAT_SEC_PREVHHH
	Movff SD_FAT_SECHH,SD_FAT_SEC_PREVHH
	Movff SD_FAT_SECH,SD_FAT_SEC_PREVH
	Movff SD_FAT_SEC,SD_FAT_SEC_PREV
F4_000475 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Idx_Prev = SD_Cluster_Seq_Idx
	Movff SD_CLUSTER_SEQ_IDXH,SD_CLUSTER_SEQ_IDX_PREVH
	Movff SD_CLUSTER_SEQ_IDX,SD_CLUSTER_SEQ_IDX_PREV
F4_000476 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Num_Prev = SD_Cluster_Seq_Num
	Movff SD_CLUSTER_SEQ_NUMH,SD_CLUSTER_SEQ_NUM_PREVH
	Movff SD_CLUSTER_SEQ_NUM,SD_CLUSTER_SEQ_NUM_PREV
F4_000478 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Find_Free_Cluster
	F@Call SD_FIND_FREE_CLUSTER
F4_000479 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return = 1 Then Return
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_EXTENDED_RETURN,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL124
	Return 0
bc@LL124
F4_000480 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Sec_Num = SD_FAT1 + SD_FAT_Sec_Prev
	Movlb 2
ram_bank = 2
	Movf SD_FAT_SEC_PREV,W
	Addwf SD_FAT1,W
	Movwf SD_WRITE_SEC_NUM
	Movf SD_FAT_SEC_PREVH,W
	Addwfc SD_FAT1H,W
	Movwf SD_WRITE_SEC_NUMH
	Movf SD_FAT_SEC_PREVHH,W
	Addwfc SD_FAT1HH,W
	Movwf SD_WRITE_SEC_NUMHH
	Movf SD_FAT_SEC_PREVHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf SD_WRITE_SEC_NUMHHH
F4_000481 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Write_Sec_Num
	Movff SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
	Movff SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
	Movff SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
	Movff SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000482 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000483 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000485 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Assemble_FAT_Sector
	F@Call SD_ASSEMBLE_FAT_SECTOR
F4_000486 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Assemble_FAT_Sector_End_Cont
	F@Call SD_ASSEMBLE_FAT_SECTOR_END_CONT
F4_000487 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_000488 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_FAT2 + SD_FAT_Sec_Prev
	Movlb 2
ram_bank = 2
	Movf SD_FAT_SEC_PREV,W
	Addwf SD_FAT2,W
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT_SEC_PREVH,W
	Addwfc SD_FAT2H,W
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT_SEC_PREVHH,W
	Addwfc SD_FAT2HH,W
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT_SEC_PREVHHH,W
	Addwfc SD_FAT2HHH,W
	Movwf SD_SECTOR_NUMHHH,0
F4_000489 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	Movlb 0
ram_bank = 0
	F@Call SD_WRITE_SECTOR
F4_000490 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = (SD_Cluster_Num - 2) * SD_Secs_Per_Cluster
	Movlw 254
	Movlb 2
ram_bank = 2
	Addwf SD_CLUSTER_NUM,W
	Movwf PP7,0
	Movlw 255
	Addwfc SD_CLUSTER_NUMH,W
	Movwf PP7H,0
	Movlw 255
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Addwfc PP7HHH,F,0
	Movff PP7HHH,PP0HHH
	Movff PP7HH,PP0HH
	Movff PP7H,PP0H
	Movff PP7,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call al@mul
	Movff PP0HHH,SD_DATA_SECHHH
	Movff PP0HH,SD_DATA_SECHH
	Movff PP0H,SD_DATA_SECH
	Movff PP0,SD_DATA_SEC
F4_000491 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = SD_Data_Sec + SD_Data_Area
	Movf SD_DATA_AREA,W
	Addwf SD_DATA_SEC,F
	Movf SD_DATA_AREAH,W
	Addwfc SD_DATA_SECH,F
	Movf SD_DATA_AREAHH,W
	Addwfc SD_DATA_SECHH,F
	Movf SD_DATA_AREAHHH,W
	Addwfc SD_DATA_SECHHH,F
F4_000492 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Data_Sec
	Movff SD_DATA_SECHHH,SD_SECTOR_NUMHHH
	Movff SD_DATA_SECHH,SD_SECTOR_NUMHH
	Movff SD_DATA_SECH,SD_SECTOR_NUMH
	Movff SD_DATA_SEC,SD_SECTOR_NUM
F4_000493 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 0
	Clrf SD_RW_OPTION
F4_000494 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
	F@Jump bc@LL125
bc@LL122
F4_000496 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000497 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Cluster_Num
	Movlb 2
ram_bank = 2
	Infsnz SD_CLUSTER_NUM,F
	Incf SD_CLUSTER_NUMH,F
F4_000498 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL125
	Movlb 0
ram_bank = 0
F4_000499 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_SEC_IN_CLUSTER
F4_000500 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL120
	Movlb 0
ram_bank = 0
	F@Jump bc@LL126
bc@LL117
F4_000501 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000502 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_Sector
	F@Call SD_READ_SECTOR
F4_000503 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL126
F4_000504 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Buffer_Pos = 1
	Movlb 2
ram_bank = 2
	Clrf SD_DATA_BUFFER_POSH
	Movlw 1
	Movwf SD_DATA_BUFFER_POS
F4_000505 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL115
	Movlb 0
ram_bank = 0
F4_000506 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte_RW = SD_IO_Byte
	Movff SD_IO_BYTE,SD_BYTE_RW
F4_000507 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sub
	F@Call SD_WRITE_SUB
F4_000508 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 0
	Movlb 2
ram_bank = 2
	Clrf SD_EXTENDED_RETURN
F4_000509 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
SD_CHECK_FOR_FILE_SUB
F4_000512 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Find_Root_Dir_Entry_F = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_FIND_ROOT_DIR_ENTRY_F
F4_000513 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Find_Root_Dir_Entry
	Movlb 0
ram_bank = 0
	F@Call SD_FIND_ROOT_DIR_ENTRY
F4_000514 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_READ_SUB
F4_000517 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Buffer_Idx > $1FF Then
	Movlw 2
	Movlb 2
ram_bank = 2
	Subwf SD_BUFFER_IDXH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL128
F4_000524 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Idx = 0
	Movlb 2
ram_bank = 2
	Clrf SD_BUFFER_IDXH
	Clrf SD_BUFFER_IDX
F4_000525 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Sector_Num
	Incf SD_SECTOR_NUM,F,0
	Movlw 0
	Addwfc SD_SECTOR_NUMH,F,0
	Addwfc SD_SECTOR_NUMHH,F,0
	Addwfc SD_SECTOR_NUMHHH,F,0
F4_000526 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000527 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000528 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL128
F4_000529 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Buffer_Idx > $0FF Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_BUFFER_IDXH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL130
F4_000530 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte_RW = SD_Buffer1[SD_Buffer_Idx - $100]
	Movlb 2
ram_bank = 2
	Movf SD_BUFFER_IDX,W
	Lfsr 0,SD_BUFFER1
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movwf SD_BYTE_RW
	Movlb 0
ram_bank = 0
	F@Jump bc@LL131
bc@LL130
F4_000531 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000532 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte_RW = SD_Buffer0[SD_Buffer_Idx]
	Lfsr 0,SD_BUFFER0
	Movlb 2
ram_bank = 2
	Movf SD_BUFFER_IDX,W
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movwf SD_BYTE_RW
F4_000533 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL131
	Movlb 0
ram_bank = 0
F4_000534 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Buffer_Idx
	Movlb 2
ram_bank = 2
	Infsnz SD_BUFFER_IDX,F
	Incf SD_BUFFER_IDXH,F
F4_000535 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_000541 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Init_MSSP MACRO P1
SD_INIT_MSSP	Macro P1,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	if (PRM_COUNT > 1)
	Error "(In Asm) SD_Init_MSSP - Too many parameters"
	else
	if (PRM_COUNT == 0)
	Movlw 32
	Movwf SSPCON1,0
	else
	if (PRM_1 != Byte) && (PRM_1 != NUM8)
	Error "(In Asm) SD_Init_MSSP - Speed(Param1) should be a Byte variable or number"
	endif
	if (PRM_1 == Byte)
	byte_byte P1, SSPCON1
	Bsf SSPCON1,5,0
	endif
	if (PRM_1 == NUM8)
	num_dword P1, SSPCON1
ram_bank = 0
	Bsf SSPCON1,5,0
	endif
	endif
	endif
	F@Call SD_INIT_MSSP_SUB
	if (SD_Init_MSSP_RETURN != 1)
	else
	if (RETURN_TYPE != Byte)
	Error "(In Asm) SD_Init_MSSP - Return variable should be a Byte variable"
	endif
	if (RETURN_TYPE == Byte)
	byte_byte SD_Return, RETURN_VAR
	endif
	endif
	Endm
SD_SEND_CMD
F4_000580 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_Byte0
	Movff SD_BYTE0,SSPBUF
F4_000581 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] btfss SSPSTAT.0
	Btfss SSPSTAT,0
F4_000582 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] bra $ - 2
	Bra $ - 2
F4_000583 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] movff SSPBUF,SD_ByteR
	Movff SSPBUF,SD_BYTER
F4_000584 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_Byte1
	Movff SD_BYTE1,SSPBUF
F4_000585 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] btfss SSPSTAT.0
	Btfss SSPSTAT,0
F4_000586 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] bra $ - 2
	Bra $ - 2
F4_000587 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] movff SSPBUF,SD_ByteR
	Movff SSPBUF,SD_BYTER
F4_000588 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_Byte2
	Movff SD_BYTE2,SSPBUF
F4_000589 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] btfss SSPSTAT.0
	Btfss SSPSTAT,0
F4_000590 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] bra $ - 2
	Bra $ - 2
F4_000591 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] movff SSPBUF,SD_ByteR
	Movff SSPBUF,SD_BYTER
F4_000592 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_Byte3
	Movff SD_BYTE3,SSPBUF
F4_000593 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] btfss SSPSTAT.0
	Btfss SSPSTAT,0
F4_000594 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] bra $ - 2
	Bra $ - 2
F4_000595 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] movff SSPBUF,SD_ByteR
	Movff SSPBUF,SD_BYTER
F4_000596 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_Byte4
	Movff SD_BYTE4,SSPBUF
F4_000597 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] btfss SSPSTAT.0
	Btfss SSPSTAT,0
F4_000598 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] bra $ - 2
	Bra $ - 2
F4_000599 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] movff SSPBUF,SD_ByteR
	Movff SSPBUF,SD_BYTER
SD_SEND_BYTE
F4_000601 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = SD_Byte5
	Movff SD_BYTE5,SSPBUF
F4_000602 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] btfss SSPSTAT.0
	Btfss SSPSTAT,0
F4_000603 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] bra $ - 2
	Bra $ - 2
F4_000604 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] movff SSPBUF,SD_ByteR
	Movff SSPBUF,SD_BYTER
F4_000605 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_RECEIVE_BYTE
F4_000608 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPBUF = $FF
	Setf SSPBUF,0
F4_000609 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] btfss SSPSTAT.0
	Btfss SSPSTAT,0
F4_000610 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] bra $ - 2
	Bra $ - 2
F4_000611 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] movff SSPBUF,SD_ByteR
	Movff SSPBUF,SD_BYTER
F4_000612 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_INIT_MSSP_SUB
F4_000616 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SSPSTAT = %01000000
	Movlw 64
	Movwf SSPSTAT,0
F4_000617 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Output SD_CS : Output SD_DI : Output SD_CLK : Input SD_DO
	Bcf TRISC,2,0
	Bcf TRISC,5,0
	Bcf TRISC,3,0
	Bsf TRISC,4,0
F4_000618 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000619 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte0 = $FF
	Movlb 2
ram_bank = 2
	Setf SD_BYTE0
F4_000620 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte1 = $FF
	Setf SD_BYTE1
F4_000621 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte2 = $FF
	Setf SD_BYTE2
F4_000622 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte3 = $FF
	Setf SD_BYTE3
F4_000623 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte4 = $FF
	Setf SD_BYTE4
F4_000624 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FF
	Setf SD_BYTE5
F4_000625 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Cmd
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_CMD
F4_000626 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Cmd
	F@Call SD_SEND_CMD
F4_000628 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] DelayMS 100
	Movlw 100
	F@Call dl@ms
F4_000629 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Low SD_CS
	Bcf TRISC,2,0
	Bcf PORTC,2,0
F4_000630 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte0 = $40
	Movlw 64
	Movlb 2
ram_bank = 2
	Movwf SD_BYTE0
F4_000631 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte1 = $00
	Clrf SD_BYTE1
F4_000632 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte2 = $00
	Clrf SD_BYTE2
F4_000633 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte3 = $00
	Clrf SD_BYTE3
F4_000634 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte4 = $00
	Clrf SD_BYTE4
F4_000635 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $95
	Movlw 149
	Movwf SD_BYTE5
F4_000636 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Cmd
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_CMD
F4_000637 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Reqd = $01
	Movlw 1
	Movwf SD_SEEK_RESPONSE_REQD,0
F4_000638 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Idx = $FF
	Clrf SD_SEEK_RESPONSE_IDXH,0
	Setf SD_SEEK_RESPONSE_IDX,0
F4_000639 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Seek_Response
	F@Call SD_SEEK_RESPONSE
F4_000640 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Seek_Response_Return = 1 Then
	Movlw 1
	Subwf SD_SEEK_RESPONSE_RETURN,W,0
	Btfss STATUS,2,0
	Go@to bc@LL133
F4_000641 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000642 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return = 1
	Movlw 1
	Movwf SD_RETURN,0
F4_000643 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
F4_000644 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL133
F4_000646 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Idx = $FF
	Setf SD_IDX,0
F4_000647 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Repeat
bc@LL134
F4_000648 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte0 = $41
	Movlw 65
	Movlb 2
ram_bank = 2
	Movwf SD_BYTE0
F4_000649 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte1 = $00
	Clrf SD_BYTE1
F4_000650 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte2 = $00
	Clrf SD_BYTE2
F4_000651 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte3 = $00
	Clrf SD_BYTE3
F4_000652 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte4 = $00
	Clrf SD_BYTE4
F4_000653 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FF
	Setf SD_BYTE5
F4_000654 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Cmd
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_CMD
F4_000655 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Reqd = $00
	Clrf SD_SEEK_RESPONSE_REQD,0
F4_000656 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seek_Response_Idx = $FF
	Clrf SD_SEEK_RESPONSE_IDXH,0
	Setf SD_SEEK_RESPONSE_IDX,0
F4_000657 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Seek_Response
	F@Call SD_SEEK_RESPONSE
F4_000658 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Dec SD_Idx
	Decf SD_IDX,F,0
F4_000659 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Until SD_Seek_Response_Return = 0 Or SD_Idx = 0
	Movlw 1
	Movf SD_SEEK_RESPONSE_RETURN,F,0
	Btfss STATUS,2,0
	Movlw 0
	Movwf SP#P9,0
	Movlw 1
	Movf SD_IDX,F,0
	Btfss STATUS,2,0
	Movlw 0
	Iorwf SP#P9,W,0
	Btfsc STATUS,2,0
	Go@to bc@LL134
bc@LL135
F4_000660 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Idx = 0 Then
	Movf SD_IDX,F,0
	Btfss STATUS,2,0
	Go@to bc@LL137
F4_000661 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000662 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return = 1
	Movlw 1
	Movwf SD_RETURN,0
F4_000663 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
F4_000664 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL137
F4_000665 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] High SD_CS
	Bcf TRISC,2,0
	Bsf PORTC,2,0
F4_000666 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Byte5 = $FF
	Movlb 2
ram_bank = 2
	Setf SD_BYTE5
F4_000667 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Send_Byte
	Movlb 0
ram_bank = 0
	F@Call SD_SEND_BYTE
F4_000668 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Idx = 0
	Movlb 2
ram_bank = 2
	Clrf SD_BUFFER_IDXH
	Clrf SD_BUFFER_IDX
F4_000669 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return = 0
	Clrf SD_RETURN,0
F4_000670 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_000676 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Close_File MACRO
SD_CLOSE_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	if (PRM_COUNT != 0)
	Error "(In Asm) No parameters required for SD_Close_File"
	Exitm
	endif
	F@Call SD_CLOSE_FILE_SUB
	Endm
SD_CLOSE_FILE_SUB
F4_000698 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Is_Dirty = 1 Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_IS_DIRTY,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL139
F4_000699 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Repeat
bc@LL140
F4_000700 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_000701 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Until SD_Return = 0
	Movf SD_RETURN,F,0
	Btfss STATUS,2,0
	Go@to bc@LL140
bc@LL141
F4_000702 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL139
F4_000703 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Sec_Num = SD_Root_Dir + SD_Root_Dir_Sec
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_SEC,W
	Addwf SD_ROOT_DIR,W
	Movwf SD_WRITE_SEC_NUM
	Movf SD_ROOT_DIR_SECH,W
	Addwfc SD_ROOT_DIRH,W
	Movwf SD_WRITE_SEC_NUMH
	Movf SD_ROOT_DIR_SECHH,W
	Addwfc SD_ROOT_DIRHH,W
	Movwf SD_WRITE_SEC_NUMHH
	Movf SD_ROOT_DIR_SECHHH,W
	Addwfc SD_ROOT_DIRHHH,W
	Movwf SD_WRITE_SEC_NUMHHH
F4_000704 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Write_Sec_Num
	Movff SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
	Movff SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
	Movff SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
	Movff SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000705 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000706 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000708 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + $1C
	Movlw 28
	Movlb 2
ram_bank = 2
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000709 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_File_Size.BYTE0
	Movff SD_FILE_SIZE,SD_DATA_IO
F4_000710 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000711 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000712 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_File_Size.BYTE1
	Movff SD_FILE_SIZEH,SD_DATA_IO
F4_000713 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000714 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000715 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_File_Size.BYTE2
	Movff SD_FILE_SIZEHH,SD_DATA_IO
F4_000716 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000717 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000718 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_File_Size.BYTE3
	Movff SD_FILE_SIZEHHH,SD_DATA_IO
F4_000719 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000720 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + $16
	Movlw 22
	Movlb 2
ram_bank = 2
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000721 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Set_File_Time_Modified
	Movlb 0
ram_bank = 0
	F@Call SD_SET_FILE_TIME_MODIFIED
F4_000722 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_000723 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_EOF = 1 Then
	Bcf STATUS,3,0
	Movlb 2
ram_bank = 2
	Btfss _B#VR1,0
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL143
F4_000724 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos_Prev = SD_FAT_Buffer_Pos
	Movff SD_FAT_BUFFER_POSH,SD_FAT_BUFFER_POS_PREVH
	Movff SD_FAT_BUFFER_POS,SD_FAT_BUFFER_POS_PREV
F4_000725 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec_Prev = SD_FAT_Sec
	Movff SD_FAT_SECHHH,SD_FAT_SEC_PREVHHH
	Movff SD_FAT_SECHH,SD_FAT_SEC_PREVHH
	Movff SD_FAT_SECH,SD_FAT_SEC_PREVH
	Movff SD_FAT_SEC,SD_FAT_SEC_PREV
F4_000726 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Sec_Num = SD_FAT1 + SD_FAT_Sec_Prev
	Movlb 2
ram_bank = 2
	Movf SD_FAT_SEC_PREV,W
	Addwf SD_FAT1,W
	Movwf SD_WRITE_SEC_NUM
	Movf SD_FAT_SEC_PREVH,W
	Addwfc SD_FAT1H,W
	Movwf SD_WRITE_SEC_NUMH
	Movf SD_FAT_SEC_PREVHH,W
	Addwfc SD_FAT1HH,W
	Movwf SD_WRITE_SEC_NUMHH
	Movf SD_FAT_SEC_PREVHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf SD_WRITE_SEC_NUMHHH
F4_000727 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Write_Sec_Num
	Movff SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
	Movff SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
	Movff SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
	Movff SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000728 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000729 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000731 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Num_Prev = SD_Cluster_Seq_Idx
	Movff SD_CLUSTER_SEQ_IDXH,SD_CLUSTER_SEQ_NUM_PREVH
	Movff SD_CLUSTER_SEQ_IDX,SD_CLUSTER_SEQ_NUM_PREV
F4_000732 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Assemble_FAT_Sector
	F@Call SD_ASSEMBLE_FAT_SECTOR
F4_000733 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Assemble_FAT_Sector_End_Close
	F@Call SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
F4_000734 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_000735 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_FAT2 + SD_FAT_Sec_Prev
	Movlb 2
ram_bank = 2
	Movf SD_FAT_SEC_PREV,W
	Addwf SD_FAT2,W
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT_SEC_PREVH,W
	Addwfc SD_FAT2H,W
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT_SEC_PREVHH,W
	Addwfc SD_FAT2HH,W
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT_SEC_PREVHHH,W
	Addwfc SD_FAT2HHH,W
	Movwf SD_SECTOR_NUMHHH,0
F4_000736 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	Movlb 0
ram_bank = 0
	F@Call SD_WRITE_SECTOR
F4_000737 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL143
F4_000738 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
SD_SET_FILE_TIME_CREATE
F4_000742 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_MSeconds + ((SD_Seconds // 2) * 100)
	Clrf PP7H,0
	Movff SD_MSECONDS,PP7
	Clrf PP8H,0
	Movff SD_SECONDS,PP8
	Movlw 1
	Andwf PP8,F,0
	Clrf PP8H,0
	Movf PP8H,W,0
	Mullw 100
	Movff PRODL,PP8H
	Movf PP8,W,0
	Mullw 100
	Movff PRODL,PP8
	Movf PRODH,W,0
	Addwf PP8H,F,0
	Movf PP7,W,0
	Addwf PP8,W,0
	Movlb 2
ram_bank = 2
	Movwf SD_DATA_IO
F4_000743 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000744 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
SD_SET_FILE_TIME_MODIFIED
	Movlb 0
ram_bank = 0
F4_000746 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = (SD_Seconds / 2) | (SD_Minutes << 5)
	Clrf PP7H,0
	Movff SD_SECONDS,PP7
	Bcf STATUS,0,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Clrf PP8H,0
	Movff SD_MINUTES,PP8
	Movlw 5
Sl@lb32
	Bcf STATUS,0,0
	Rlcf PP8,F,0
	Rlcf PP8H,F,0
	Decfsz WREG,F,0
	Bra Sl@lb32
	Movf PP7,W,0
	Iorwf PP8,W,0
	Movlb 2
ram_bank = 2
	Movwf SD_DATA_IO
F4_000747 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000748 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000749 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = (SD_Minutes >> 3) | (SD_Hours << 3)
	Clrf PP7H,0
	Movff SD_MINUTES,PP7
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Movlw 31
	Andwf PP7H,F,0
	Clrf PP8H,0
	Movff SD_HOURS,PP8
	Movlw 3
Sl@lb33
	Bcf STATUS,0,0
	Rlcf PP8,F,0
	Rlcf PP8H,F,0
	Decfsz WREG,F,0
	Bra Sl@lb33
	Movf PP7,W,0
	Iorwf PP8,W,0
	Movwf SD_DATA_IO
F4_000750 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000751 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000752 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_Day | (SD_Month << 5)
	Movff SD_MONTH,PP7H
	Clrf PP7,0
	Bcf STATUS,0,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Movf SD_DAY,W
	Iorwf PP7,W,0
	Movwf SD_DATA_IO
F4_000753 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000754 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000755 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = (SD_Month >> 3) | ((SD_Year + 20) << 1)
	Clrf PP7H,0
	Movff SD_MONTH,PP7
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Rrcf PP7H,F,0
	Rrcf PP7,F,0
	Movlw 31
	Andwf PP7H,F,0
	Clrf PP8H,0
	Movff SD_YEAR,PP8
	Movlw 20
	Addwf PP8,F,0
	Movlw 0
	Addwfc PP8H,F,0
	Bcf STATUS,0,0
	Rlcf PP8,F,0
	Rlcf PP8H,F,0
	Movf PP7,W,0
	Iorwf PP8,W,0
	Movwf SD_DATA_IO
F4_000756 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000757 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
F4_000763 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Open_File MACRO
SD_OPEN_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	F@Call SD_OPEN_FILE_SUB
	if (RETURN_TYPE !=Byte) && (RETURN_TYPE !=Word) && (RETURN_TYPE !=DWord)
	Error "(In Asm) SD_Open_File - Return variable should be a Byte, Word, or DWord variable"
	else
	if (RETURN_TYPE == Byte)
	byte_byte SD_Extended_Return, RETURN_VAR
	endif
	if (RETURN_TYPE == Word)
	byte_word SD_Extended_Return, RETURN_VAR
ram_bank = 0
	endif
	if (RETURN_TYPE == DWord)
	byte_dword SD_Extended_Return, RETURN_VAR
ram_bank = 0
	endif
	endif
	Endm
SD_OPEN_FILE_SUB
F4_000787 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Check_For_File_Sub
	F@Call SD_CHECK_FOR_FILE_SUB
F4_000788 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return_Root_Dir <> 0 Then
	Movlb 2
ram_bank = 2
	Movf SD_EXTENDED_RETURN_ROOT_DIR,F
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL145
F4_000789 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_000790 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_000791 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL145
F4_000792 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num.BYTE0 = SD_Root_Dir_File[$1A]
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#26,W
	Movwf SD_CLUSTER_NUM
F4_000793 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num.BYTE1 = SD_Root_Dir_File[$1B]
	Movf SD_ROOT_DIR_FILE#27,W
	Movwf SD_CLUSTER_NUMH
F4_000794 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE0 = SD_Root_Dir_File[$1C]
	Movf SD_ROOT_DIR_FILE#28,W
	Movwf SD_FILE_SIZE
F4_000795 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE1 = SD_Root_Dir_File[$1D]
	Movf SD_ROOT_DIR_FILE#29,W
	Movwf SD_FILE_SIZEH
F4_000796 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE2 = SD_Root_Dir_File[$1E]
	Movf SD_ROOT_DIR_FILE#30,W
	Movwf SD_FILE_SIZEHH
F4_000797 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE3 = SD_Root_Dir_File[$1F]
	Movf SD_ROOT_DIR_FILE#31,W
	Movwf SD_FILE_SIZEHHH
F4_000798 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = (SD_Cluster_Num - 2) * SD_Secs_Per_Cluster
	Movlw 254
	Addwf SD_CLUSTER_NUM,W
	Movwf PP7,0
	Movlw 255
	Addwfc SD_CLUSTER_NUMH,W
	Movwf PP7H,0
	Movlw 255
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Addwfc PP7HHH,F,0
	Movff PP7HHH,PP0HHH
	Movff PP7HH,PP0HH
	Movff PP7H,PP0H
	Movff PP7,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call al@mul
	Movff PP0HHH,SD_DATA_SECHHH
	Movff PP0HH,SD_DATA_SECHH
	Movff PP0H,SD_DATA_SECH
	Movff PP0,SD_DATA_SEC
F4_000799 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = SD_Data_Sec + SD_Data_Area
	Movf SD_DATA_AREA,W
	Addwf SD_DATA_SEC,F
	Movf SD_DATA_AREAH,W
	Addwfc SD_DATA_SECH,F
	Movf SD_DATA_AREAHH,W
	Addwfc SD_DATA_SECHH,F
	Movf SD_DATA_AREAHHH,W
	Addwfc SD_DATA_SECHHH,F
F4_000800 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = 1
	Movlw 1
	Movwf SD_SEC_IN_CLUSTER
F4_000801 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Data_Sec
	Movff SD_DATA_SECHHH,SD_SECTOR_NUMHHH
	Movff SD_DATA_SECHH,SD_SECTOR_NUMHH
	Movff SD_DATA_SECH,SD_SECTOR_NUMH
	Movff SD_DATA_SEC,SD_SECTOR_NUM
F4_000802 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000803 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000805 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Return = 1 Then
	Movlw 1
	Subwf SD_RETURN,W,0
	Btfss STATUS,2,0
	Go@to bc@LL147
F4_000806 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_000807 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_000808 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL147
F4_000809 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Buffer_Pos = 0
	Movlb 2
ram_bank = 2
	Clrf SD_DATA_BUFFER_POSH
	Clrf SD_DATA_BUFFER_POS
F4_000810 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Bytes_Read = 0
	Clrf SD_BYTES_READHHH
	Clrf SD_BYTES_READHH
	Clrf SD_BYTES_READH
	Clrf SD_BYTES_READ
F4_000811 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_File_Size > 0 Then
	Bcf STATUS,3,0
	Btfsc SD_FILE_SIZEHHH,7
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL149
	Movlb 2
ram_bank = 2
	Movf SD_FILE_SIZE,W
	Iorwf SD_FILE_SIZEH,W
	Iorwf SD_FILE_SIZEHH,W
	Iorwf SD_FILE_SIZEHHH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL149
	Bcf STATUS,3,0
	Movlb 2
ram_bank = 2
	Btfsc SD_FILE_SIZEHHH,7
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL149
	Movlb 2
ram_bank = 2
	Movf SD_FILE_SIZEH,W
	Iorwf SD_FILE_SIZEHH,W
	Iorwf SD_FILE_SIZEHHH,W
	Bnz cp@lb23
	Movlw 1
	Subwf SD_FILE_SIZE,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL149
cp@lb23
F4_000812 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 0
	Movlb 2
ram_bank = 2
	Bcf _B#VR1,0
	Movlb 0
ram_bank = 0
	F@Jump bc@LL150
bc@LL149
F4_000813 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_000814 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
	Movlb 2
ram_bank = 2
	Bsf _B#VR1,0
F4_000815 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL150
	Movlb 0
ram_bank = 0
F4_000816 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Is_Dirty = 0
	Movlb 2
ram_bank = 2
	Clrf SD_IS_DIRTY
F4_000817 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Num = 1
	Clrf SD_CLUSTER_SEQ_NUMH
	Movlw 1
	Movwf SD_CLUSTER_SEQ_NUM
F4_000818 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 0
	Clrf SD_EXTENDED_RETURN
F4_000819 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_000825 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Read_Byte_From_File MACRO
SD_READ_BYTE_FROM_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	F@Call SD_READ_BYTE_FROM_FILE_SUB
	if (SD_Read_Byte_From_File_RETURN != 1)
	Error "(In Asm) SD_Read_Byte_From_File -  Mandatory return parameter missing"
	else
	if (RETURN_TYPE !=Byte) && (RETURN_TYPE !=Word) && (RETURN_TYPE !=DWord)
	Error "(In Asm) SD_Read_Byte_From_File - Return variable should be a Byte, Word or DWord variable"
	else
	if (RETURN_TYPE == Byte)
	byte_byte SD_Byte_RW, RETURN_VAR
	endif
	if (RETURN_TYPE == Word)
	byte_word SD_Byte_RW, RETURN_VAR
ram_bank = 0
	endif
	if (RETURN_TYPE == DWord)
	byte_dword SD_Byte_RW, RETURN_VAR
ram_bank = 0
	endif
	endif
	endif
	Endm
SD_READ_BYTE_FROM_FILE_SUB
F4_000853 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_EOF = 0 Then
	Bcf STATUS,3,0
	Movlb 2
ram_bank = 2
	Btfsc _B#VR1,0
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL152
F4_000854 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Data_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_DATA_BUFFER_POS,F
	Incf SD_DATA_BUFFER_POSH,F
F4_000855 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Data_Buffer_Pos > SD_Bytes_Per_Sec Then
	Movf SD_DATA_BUFFER_POS,W
	Subwf SD_BYTES_PER_SEC,W
	Movf SD_DATA_BUFFER_POSH,W
	Subwfb SD_BYTES_PER_SECH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL154
F4_000856 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Is_Dirty = 1 Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_IS_DIRTY,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL156
F4_000857 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Repeat
bc@LL157
F4_000858 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_000859 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Until SD_Return = 0
	Movf SD_RETURN,F,0
	Btfss STATUS,2,0
	Go@to bc@LL157
bc@LL158
F4_000860 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Is_Dirty = 0
	Movlb 2
ram_bank = 2
	Clrf SD_IS_DIRTY
F4_000861 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL156
	Movlb 0
ram_bank = 0
F4_000862 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Data_Sec
	Movlb 2
ram_bank = 2
	Incf SD_DATA_SEC,F
	Movlw 0
	Addwfc SD_DATA_SECH,F
	Addwfc SD_DATA_SECHH,F
	Addwfc SD_DATA_SECHHH,F
F4_000863 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Sec_in_Cluster
	Incf SD_SEC_IN_CLUSTER,F
F4_000864 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Sec_in_Cluster > SD_Secs_Per_Cluster Then
	Movf SD_SEC_IN_CLUSTER,W
	Subwf SD_SECS_PER_CLUSTER,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL160
F4_000865 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = SD_Cluster_Num / $100
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Movff SD_CLUSTER_NUMH,PP0H
	Movff SD_CLUSTER_NUM,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movlw 1
	Movwf PP2H,0
	Clrf PP2,0
	F@Call l@div
	Movff PP0HHH,SD_FAT_SECHHH
	Movff PP0HH,SD_FAT_SECHH
	Movff PP0H,SD_FAT_SECH
	Movff PP0,SD_FAT_SEC
F4_000866 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_Cluster_Num // $100
	Movff SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
	Movlb 2
ram_bank = 2
	Clrf SD_FAT_BUFFER_POSH
F4_000867 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_FAT_Buffer_Pos * 2
	Bcf STATUS,0,0
	Rlcf SD_FAT_BUFFER_POS,F
	Rlcf SD_FAT_BUFFER_POSH,F
F4_000868 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_FAT1 + SD_FAT_Sec
	Movf SD_FAT_SEC,W
	Addwf SD_FAT1,W
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT_SECH,W
	Addwfc SD_FAT1H,W
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT_SECHH,W
	Addwfc SD_FAT1HH,W
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT_SECHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf SD_SECTOR_NUMHHH,0
F4_000869 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000870 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000872 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Pos = SD_FAT_Buffer_Pos
	Movff SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
	Movff SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_000873 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_FAT_Entry
	F@Call SD_READ_FAT_ENTRY
F4_000874 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = SD_FAT_Entry
	Movff SD_FAT_ENTRYH,SD_CLUSTER_NUMH
	Movff SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_000875 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = (SD_Cluster_Num - 2) * SD_Secs_Per_Cluster
	Movlw 254
	Movlb 2
ram_bank = 2
	Addwf SD_CLUSTER_NUM,W
	Movwf PP7,0
	Movlw 255
	Addwfc SD_CLUSTER_NUMH,W
	Movwf PP7H,0
	Movlw 255
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Addwfc PP7HHH,F,0
	Movff PP7HHH,PP0HHH
	Movff PP7HH,PP0HH
	Movff PP7H,PP0H
	Movff PP7,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call al@mul
	Movff PP0HHH,SD_DATA_SECHHH
	Movff PP0HH,SD_DATA_SECHH
	Movff PP0H,SD_DATA_SECH
	Movff PP0,SD_DATA_SEC
F4_000876 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = SD_Data_Sec + SD_Data_Area
	Movf SD_DATA_AREA,W
	Addwf SD_DATA_SEC,F
	Movf SD_DATA_AREAH,W
	Addwfc SD_DATA_SECH,F
	Movf SD_DATA_AREAHH,W
	Addwfc SD_DATA_SECHH,F
	Movf SD_DATA_AREAHHH,W
	Addwfc SD_DATA_SECHHH,F
F4_000877 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Data_Sec
	Movff SD_DATA_SECHHH,SD_SECTOR_NUMHHH
	Movff SD_DATA_SECHH,SD_SECTOR_NUMHH
	Movff SD_DATA_SECH,SD_SECTOR_NUMH
	Movff SD_DATA_SEC,SD_SECTOR_NUM
F4_000878 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000879 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000881 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_SEC_IN_CLUSTER
F4_000882 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL160
	Movlb 0
ram_bank = 0
F4_000883 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Buffer_Pos = 1
	Movlb 2
ram_bank = 2
	Clrf SD_DATA_BUFFER_POSH
	Movlw 1
	Movwf SD_DATA_BUFFER_POS
F4_000884 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL154
	Movlb 0
ram_bank = 0
F4_000885 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_Sub
	F@Call SD_READ_SUB
F4_000886 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Bytes_Read
	Movlb 2
ram_bank = 2
	Incf SD_BYTES_READ,F
	Movlw 0
	Addwfc SD_BYTES_READH,F
	Addwfc SD_BYTES_READHH,F
	Addwfc SD_BYTES_READHHH,F
F4_000887 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Bytes_Read >= SD_File_Size Then SD_EOF = 1
	Movf SD_FILE_SIZE,W
	Subwf SD_BYTES_READ,W
	Movf SD_FILE_SIZEH,W
	Subwfb SD_BYTES_READH,W
	Movf SD_FILE_SIZEHH,W
	Subwfb SD_BYTES_READHH,W
	Movf SD_FILE_SIZEHHH,W
	Subwfb SD_BYTES_READHHH,W
	Movf SD_BYTES_READHHH,W
	Xorwf SD_FILE_SIZEHHH,W
	Btfsc STATUS,0,0
	Xorlw 128
	Movlb 0
ram_bank = 0
	Btfss STATUS,4,0
	Go@to bc@LL162
	Movlb 2
ram_bank = 2
	Bsf _B#VR1,0
bc@LL162
	Movlb 0
ram_bank = 0
F4_000888 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL152
F4_000889 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
F4_000895 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Check_For_File MACRO
SD_CHECK_FOR_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	F@Call SD_CHECK_FOR_FILE_SUB
	if (SD_Check_For_File_RETURN != 1)
	Error "(In Asm) SD_Check_For_File -  Mandatory return parameter missing"
	else
	if (RETURN_TYPE != Byte) && (RETURN_TYPE != Word) && (RETURN_TYPE != DWord)
	Error "(In Asm) SD_Check_For_File - Return variable should be a Byte, Word or DWord variable"
	endif
	if (RETURN_TYPE == Byte)
	byte_byte SD_Extended_Return_Root_Dir, RETURN_VAR
	endif
	if (RETURN_TYPE == Word)
	byte_word SD_Extended_Return_Root_Dir, RETURN_VAR
ram_bank = 0
	endif
	if (RETURN_TYPE == DWord)
	byte_dword SD_Extended_Return_Root_Dir, RETURN_VAR
ram_bank = 0
	endif
	endif
	Endm
F4_000924 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_New_File MACRO
SD_NEW_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	if (PRM_COUNT != 0)
	Error "(In Asm) No parameters required for SD_New_File"
	Exitm
	endif
	F@Call SD_NEW_FILE_SUB
	if (SD_New_File_RETURN != 1)
	else
	if (RETURN_TYPE != Byte)
	Error "(In Asm) SD_New_File - Return variable should be a Byte variable"
	endif
	if (RETURN_TYPE == Byte)
	byte_byte SD_Extended_Return, RETURN_VAR
	endif
	endif
	Endm
SD_NEW_FILE_SUB
F4_000949 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return_F = 0
	Movlb 2
ram_bank = 2
	Clrf SD_RETURN_F
F4_000950 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = 0
	Clrf SD_FAT_SECHHH
	Clrf SD_FAT_SECHH
	Clrf SD_FAT_SECH
	Clrf SD_FAT_SEC
F4_000951 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = 0
	Clrf SD_FAT_BUFFER_POSH
	Clrf SD_FAT_BUFFER_POS
F4_000952 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Num = 0
	Clrf SD_CLUSTER_SEQ_NUMH
	Clrf SD_CLUSTER_SEQ_NUM
F4_000953 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Find_Free_Cluster
	Movlb 0
ram_bank = 0
	F@Call SD_FIND_FREE_CLUSTER
F4_000954 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return = 1 Then Return
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_EXTENDED_RETURN,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL164
	Return 0
bc@LL164
F4_000955 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Find_Root_Dir_Entry_F = 0
	Movlb 2
ram_bank = 2
	Clrf SD_FIND_ROOT_DIR_ENTRY_F
F4_000956 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Find_Root_Dir_Entry
	Movlb 0
ram_bank = 0
	F@Call SD_FIND_ROOT_DIR_ENTRY
F4_000957 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return_Root_Dir = 1 Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_EXTENDED_RETURN_ROOT_DIR,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL166
F4_000958 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_000959 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_000960 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL166
F4_000961 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Sec_Num = SD_Root_Dir + SD_Root_Dir_Sec
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_SEC,W
	Addwf SD_ROOT_DIR,W
	Movwf SD_WRITE_SEC_NUM
	Movf SD_ROOT_DIR_SECH,W
	Addwfc SD_ROOT_DIRH,W
	Movwf SD_WRITE_SEC_NUMH
	Movf SD_ROOT_DIR_SECHH,W
	Addwfc SD_ROOT_DIRHH,W
	Movwf SD_WRITE_SEC_NUMHH
	Movf SD_ROOT_DIR_SECHHH,W
	Addwfc SD_ROOT_DIRHHH,W
	Movwf SD_WRITE_SEC_NUMHHH
F4_000962 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Write_Sec_Num
	Movff SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
	Movff SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
	Movff SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
	Movff SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000963 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_000964 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_000966 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $00 To $1F
	Movlb 2
ram_bank = 2
	Clrf SD_ROOT_DIR_FILE_POS
fr@lb168
	Movlb 0
ram_bank = 0
	Movlw 32
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb169
F4_000967 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000968 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = 0
	Clrf SD_DATA_IO
F4_000969 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000970 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb168
nx@lb169
F4_000971 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Modify_File_Name
	F@Call SD_MODIFY_FILE_NAME
F4_000972 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $00 To $07
	Movlb 2
ram_bank = 2
	Clrf SD_ROOT_DIR_FILE_POS
fr@lb170
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb171
F4_000973 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000974 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_File_Name[SD_Root_Dir_File_Pos]
	Lfsr 0,SD_FILE_NAME
	Movf SD_ROOT_DIR_FILE_POS,W
	Movf PLUSW0,W,0
	Movwf SD_DATA_IO
F4_000975 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000976 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb170
nx@lb171
F4_000977 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_Root_Dir_File_Pos = $08 To $0A
	Movlw 8
	Movlb 2
ram_bank = 2
	Movwf SD_ROOT_DIR_FILE_POS
fr@lb172
	Movlb 0
ram_bank = 0
	Movlw 11
	Movlb 2
ram_bank = 2
	Subwf SD_ROOT_DIR_FILE_POS,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb173
F4_000978 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE_POS,W
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000979 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_File_Ext[SD_Root_Dir_File_Pos - $08]
	Movlw 8
	Subwf SD_ROOT_DIR_FILE_POS,W
	Lfsr 0,SD_FILE_EXT
	Movf PLUSW0,W,0
	Movwf SD_DATA_IO
F4_000980 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000981 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_Root_Dir_File_Pos
	Movlb 2
ram_bank = 2
	Incf SD_ROOT_DIR_FILE_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb172
nx@lb173
F4_000982 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + $0B
	Movlw 11
	Movlb 2
ram_bank = 2
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000983 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = %00100000
	Movlw 32
	Movwf SD_DATA_IO
F4_000984 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000985 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + $0D
	Movlw 13
	Movlb 2
ram_bank = 2
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000986 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Set_File_Time_Create
	Movlb 0
ram_bank = 0
	F@Call SD_SET_FILE_TIME_CREATE
F4_000987 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos + $1A
	Movlw 26
	Movlb 2
ram_bank = 2
	Addwf SD_ROOT_DIR_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_ROOT_DIR_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_000988 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_Cluster_Num.BYTE0
	Movff SD_CLUSTER_NUM,SD_DATA_IO
F4_000989 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000990 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Write_Buffer_Pos
	Movlb 2
ram_bank = 2
	Infsnz SD_WRITE_BUFFER_POS,F
	Incf SD_WRITE_BUFFER_POSH,F
F4_000991 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = SD_Cluster_Num.BYTE1
	Movff SD_CLUSTER_NUMH,SD_DATA_IO
F4_000992 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_000993 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_000994 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = (SD_Cluster_Num - 2) * SD_Secs_Per_Cluster
	Movlw 254
	Movlb 2
ram_bank = 2
	Addwf SD_CLUSTER_NUM,W
	Movwf PP7,0
	Movlw 255
	Addwfc SD_CLUSTER_NUMH,W
	Movwf PP7H,0
	Movlw 255
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Addwfc PP7HHH,F,0
	Movff PP7HHH,PP0HHH
	Movff PP7HH,PP0HH
	Movff PP7H,PP0H
	Movff PP7,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call al@mul
	Movff PP0HHH,SD_DATA_SECHHH
	Movff PP0HH,SD_DATA_SECHH
	Movff PP0H,SD_DATA_SECH
	Movff PP0,SD_DATA_SEC
F4_000995 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = SD_Data_Sec + SD_Data_Area
	Movf SD_DATA_AREA,W
	Addwf SD_DATA_SEC,F
	Movf SD_DATA_AREAH,W
	Addwfc SD_DATA_SECH,F
	Movf SD_DATA_AREAHH,W
	Addwfc SD_DATA_SECHH,F
	Movf SD_DATA_AREAHHH,W
	Addwfc SD_DATA_SECHHH,F
F4_000996 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = 1
	Movlw 1
	Movwf SD_SEC_IN_CLUSTER
F4_000997 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Data_Sec
	Movff SD_DATA_SECHHH,SD_SECTOR_NUMHHH
	Movff SD_DATA_SECHH,SD_SECTOR_NUMHH
	Movff SD_DATA_SECH,SD_SECTOR_NUMH
	Movff SD_DATA_SEC,SD_SECTOR_NUM
F4_000998 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 0
	Clrf SD_RW_OPTION
F4_000999 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_001001 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Buffer_Pos = 0
	Movlb 2
ram_bank = 2
	Clrf SD_DATA_BUFFER_POSH
	Clrf SD_DATA_BUFFER_POS
F4_001002 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size = 0
	Clrf SD_FILE_SIZEHHH
	Clrf SD_FILE_SIZEHH
	Clrf SD_FILE_SIZEH
	Clrf SD_FILE_SIZE
F4_001003 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Ptr = 0
	Clrf SD_BYTES_READHHH
	Clrf SD_BYTES_READHH
	Clrf SD_BYTES_READH
	Clrf SD_BYTES_READ
F4_001004 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
	Bsf _B#VR1,0
F4_001005 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Return_F = 1
	Movlw 1
	Movwf SD_RETURN_F
F4_001006 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001012 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Append_File MACRO
SD_APPEND_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	F@Call SD_APPEND_FILE_SUB
	if (RETURN_TYPE !=Byte)
	Error "(In Asm) SD_Append_File - Return variable should be a Byte variable"
	else
	if (RETURN_TYPE == Byte)
	byte_byte SD_Extended_Return, RETURN_VAR
	endif
	endif
	Endm
SD_APPEND_FILE_SUB
F4_001030 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Check_For_File_Sub
	F@Call SD_CHECK_FOR_FILE_SUB
F4_001031 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return_Root_Dir <> 0 Then
	Movlb 2
ram_bank = 2
	Movf SD_EXTENDED_RETURN_ROOT_DIR,F
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL174
F4_001032 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_001033 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001034 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL174
F4_001035 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num.BYTE0 = SD_Root_Dir_File[$1A]
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#26,W
	Movwf SD_CLUSTER_NUM
F4_001036 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num.BYTE1 = SD_Root_Dir_File[$1B]
	Movf SD_ROOT_DIR_FILE#27,W
	Movwf SD_CLUSTER_NUMH
F4_001037 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE0 = SD_Root_Dir_File[$1C]
	Movf SD_ROOT_DIR_FILE#28,W
	Movwf SD_FILE_SIZE
F4_001038 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE1 = SD_Root_Dir_File[$1D]
	Movf SD_ROOT_DIR_FILE#29,W
	Movwf SD_FILE_SIZEH
F4_001039 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE2 = SD_Root_Dir_File[$1E]
	Movf SD_ROOT_DIR_FILE#30,W
	Movwf SD_FILE_SIZEHH
F4_001040 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size.BYTE3 = SD_Root_Dir_File[$1F]
	Movf SD_ROOT_DIR_FILE#31,W
	Movwf SD_FILE_SIZEHHH
F4_001041 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size_Left = SD_File_Size
	Movff SD_FILE_SIZEHHH,SD_FILE_SIZE_LEFTHHH
	Movff SD_FILE_SIZEHH,SD_FILE_SIZE_LEFTHH
	Movff SD_FILE_SIZEH,SD_FILE_SIZE_LEFTH
	Movff SD_FILE_SIZE,SD_FILE_SIZE_LEFT
F4_001042 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = 0
	Clrf SD_SECTOR_NUMHHH,0
	Clrf SD_SECTOR_NUMHH,0
	Clrf SD_SECTOR_NUMH,0
	Clrf SD_SECTOR_NUM,0
F4_001043 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] While SD_File_Size_Left > (SD_Bytes_Per_Sec * SD_Secs_Per_Cluster)
bc@LL175
	Movlb 0
ram_bank = 0
	Movlb 2
ram_bank = 2
	Movf SD_SECS_PER_CLUSTER,W
	Mulwf SD_BYTES_PER_SEC
	Movff PRODL,PBP#VAR0
	Movff PRODH,PBP#VAR0H
	Mulwf SD_BYTES_PER_SECH
	Movf PRODL,W,0
	Addwf PBP#VAR0H,F,0
	Bcf STATUS,3,0
	Btfsc SD_FILE_SIZE_LEFTHHH,7
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL176
	Movlb 2
ram_bank = 2
	Movf SD_FILE_SIZE_LEFTHHH,F
	Bnz cp@lb25
	Movf SD_FILE_SIZE_LEFTHH,F
	Bnz cp@lb25
	Movf PBP#VAR0H,W,0
	Subwf SD_FILE_SIZE_LEFTH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL176
	Bnz cp@lb25
	Movlb 2
ram_bank = 2
	Movf SD_FILE_SIZE_LEFT,W
	Subwf PBP#VAR0,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL176
cp@lb25
F4_001044 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = SD_Cluster_Num / $100
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Movff SD_CLUSTER_NUMH,PP0H
	Movff SD_CLUSTER_NUM,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movlw 1
	Movwf PP2H,0
	Clrf PP2,0
	F@Call l@div
	Movff PP0HHH,SD_FAT_SECHHH
	Movff PP0HH,SD_FAT_SECHH
	Movff PP0H,SD_FAT_SECH
	Movff PP0,SD_FAT_SEC
F4_001045 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_Cluster_Num // $100
	Movff SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
	Movlb 2
ram_bank = 2
	Clrf SD_FAT_BUFFER_POSH
F4_001046 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_FAT_Buffer_Pos * 2
	Bcf STATUS,0,0
	Rlcf SD_FAT_BUFFER_POS,F
	Rlcf SD_FAT_BUFFER_POSH,F
F4_001047 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Sector_Num <> (SD_FAT1 + SD_FAT_Sec) Then
	Movf SD_FAT_SEC,W
	Addwf SD_FAT1,W
	Movwf PBP#VAR0,0
	Movf SD_FAT_SECH,W
	Addwfc SD_FAT1H,W
	Movwf PBP#VAR0H,0
	Movf SD_FAT_SECHH,W
	Addwfc SD_FAT1HH,W
	Movwf PBP#VAR0HH,0
	Movf SD_FAT_SECHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf PBP#VAR0HHH,0
	Movf PBP#VAR0,W,0
	Subwf SD_SECTOR_NUM,W,0
	Bnz cp@lb26
	Movf PBP#VAR0H,W,0
	Subwf SD_SECTOR_NUMH,W,0
	Bnz cp@lb26
	Movf PBP#VAR0HH,W,0
	Subwf SD_SECTOR_NUMHH,W,0
	Bnz cp@lb26
	Movf PBP#VAR0HHH,W,0
	Subwf SD_SECTOR_NUMHHH,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL178
cp@lb26
F4_001048 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_FAT1 + SD_FAT_Sec
	Movlb 2
ram_bank = 2
	Movf SD_FAT_SEC,W
	Addwf SD_FAT1,W
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT_SECH,W
	Addwfc SD_FAT1H,W
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT_SECHH,W
	Addwfc SD_FAT1HH,W
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT_SECHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf SD_SECTOR_NUMHHH,0
F4_001049 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_001050 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_001052 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL178
F4_001053 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Pos = SD_FAT_Buffer_Pos
	Movff SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
	Movff SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_001054 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_FAT_Entry
	F@Call SD_READ_FAT_ENTRY
F4_001055 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = SD_FAT_Entry
	Movff SD_FAT_ENTRYH,SD_CLUSTER_NUMH
	Movff SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_001056 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Size_Left = SD_File_Size_Left - (SD_Bytes_Per_Sec * SD_Secs_Per_Cluster)
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Movff SD_BYTES_PER_SECH,PP0H
	Movff SD_BYTES_PER_SEC,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call al@mul
	Movff PP0HHH,PP7HHH
	Movff PP0HH,PP7HH
	Movff PP0H,PP7H
	Movff PP0,PP7
	Movf PP7,W,0
	Movlb 2
ram_bank = 2
	Subwf SD_FILE_SIZE_LEFT,F
	Movf PP7H,W,0
	Subwfb SD_FILE_SIZE_LEFTH,F
	Movf PP7HH,W,0
	Subwfb SD_FILE_SIZE_LEFTHH,F
	Movf PP7HHH,W,0
	Subwfb SD_FILE_SIZE_LEFTHHH,F
F4_001057 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Wend
	Movlb 0
ram_bank = 0
	F@Jump bc@LL175
bc@LL176
F4_001058 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = SD_Cluster_Num / $100
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Movff SD_CLUSTER_NUMH,PP0H
	Movff SD_CLUSTER_NUM,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movlw 1
	Movwf PP2H,0
	Clrf PP2,0
	F@Call l@div
	Movff PP0HHH,SD_FAT_SECHHH
	Movff PP0HH,SD_FAT_SECHH
	Movff PP0H,SD_FAT_SECH
	Movff PP0,SD_FAT_SEC
F4_001059 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_Cluster_Num // $100
	Movff SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
	Movlb 2
ram_bank = 2
	Clrf SD_FAT_BUFFER_POSH
F4_001060 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_FAT_Buffer_Pos * 2
	Bcf STATUS,0,0
	Rlcf SD_FAT_BUFFER_POS,F
	Rlcf SD_FAT_BUFFER_POSH,F
F4_001061 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_File_Size_Left = 0 Then
	Movf SD_FILE_SIZE_LEFTHHH,W
	Iorwf SD_FILE_SIZE_LEFTHH,W
	Iorwf SD_FILE_SIZE_LEFTH,W
	Iorwf SD_FILE_SIZE_LEFT,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL180
F4_001062 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = 0
	Movlb 2
ram_bank = 2
	Clrf SD_SEC_IN_CLUSTER
	Movlb 0
ram_bank = 0
	F@Jump bc@LL181
bc@LL180
F4_001063 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_001064 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = (SD_File_Size_Left - 1) / SD_Bytes_Per_Sec
	Movlb 2
ram_bank = 2
	Decf SD_FILE_SIZE_LEFT,W
	Movwf PP7,0
	Movlw 0
	Subwfb SD_FILE_SIZE_LEFTH,W
	Movwf PP7H,0
	Movlw 0
	Subwfb SD_FILE_SIZE_LEFTHH,W
	Movwf PP7HH,0
	Movlw 0
	Subwfb SD_FILE_SIZE_LEFTHHH,W
	Movwf PP7HHH,0
	Movff PP7HHH,PP0HHH
	Movff PP7HH,PP0HH
	Movff PP7H,PP0H
	Movff PP7,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movff SD_BYTES_PER_SECH,PP2H
	Movff SD_BYTES_PER_SEC,PP2
	F@Call l@div
	Movff PP0,SD_SEC_IN_CLUSTER
F4_001065 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL181
	Movlb 0
ram_bank = 0
F4_001066 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = (SD_Cluster_Num - 2) * SD_Secs_Per_Cluster
	Movlw 254
	Movlb 2
ram_bank = 2
	Addwf SD_CLUSTER_NUM,W
	Movwf PP7,0
	Movlw 255
	Addwfc SD_CLUSTER_NUMH,W
	Movwf PP7H,0
	Movlw 255
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Addwfc PP7HHH,F,0
	Movff PP7HHH,PP0HHH
	Movff PP7HH,PP0HH
	Movff PP7H,PP0H
	Movff PP7,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call al@mul
	Movff PP0HHH,SD_DATA_SECHHH
	Movff PP0HH,SD_DATA_SECHH
	Movff PP0H,SD_DATA_SECH
	Movff PP0,SD_DATA_SEC
F4_001067 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = SD_Data_Sec + SD_Sec_in_Cluster
	Movf SD_SEC_IN_CLUSTER,W
	Addwf SD_DATA_SEC,W
	Movwf SD_DATA_SEC
	Movlw 0
	Addwfc SD_DATA_SECH,W
	Movwf SD_DATA_SECH
	Movlw 0
	Addwfc SD_DATA_SECHH,W
	Movwf SD_DATA_SECHH
	Movlw 0
	Addwfc SD_DATA_SECHHH,W
	Movwf SD_DATA_SECHHH
F4_001068 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Sec = SD_Data_Sec + SD_Data_Area
	Movf SD_DATA_AREA,W
	Addwf SD_DATA_SEC,F
	Movf SD_DATA_AREAH,W
	Addwfc SD_DATA_SECH,F
	Movf SD_DATA_AREAHH,W
	Addwfc SD_DATA_SECHH,F
	Movf SD_DATA_AREAHHH,W
	Addwfc SD_DATA_SECHHH,F
F4_001069 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sec_in_Cluster = SD_Sec_in_Cluster + 1
	Incf SD_SEC_IN_CLUSTER,F
F4_001070 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Data_Sec
	Movff SD_DATA_SECHHH,SD_SECTOR_NUMHHH
	Movff SD_DATA_SECHH,SD_SECTOR_NUMHH
	Movff SD_DATA_SECH,SD_SECTOR_NUMH
	Movff SD_DATA_SEC,SD_SECTOR_NUM
F4_001071 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_001072 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_001074 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Return = 1 Then
	Movlw 1
	Subwf SD_RETURN,W,0
	Btfss STATUS,2,0
	Go@to bc@LL183
F4_001075 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_001076 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001077 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL183
F4_001078 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Buffer_Pos = SD_File_Size_Left // SD_Bytes_Per_Sec
	Movff SD_FILE_SIZE_LEFTHHH,PP0HHH
	Movff SD_FILE_SIZE_LEFTHH,PP0HH
	Movff SD_FILE_SIZE_LEFTH,PP0H
	Movff SD_FILE_SIZE_LEFT,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movff SD_BYTES_PER_SECH,PP2H
	Movff SD_BYTES_PER_SEC,PP2
	F@Call l@mod
	Movff PP2H,SD_DATA_BUFFER_POSH
	Movff PP2,SD_DATA_BUFFER_POS
F4_001079 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Idx = SD_Data_Buffer_Pos
	Movff SD_DATA_BUFFER_POSH,SD_BUFFER_IDXH
	Movff SD_DATA_BUFFER_POS,SD_BUFFER_IDX
F4_001080 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Data_Buffer_Pos = 0 Then
	Movlb 2
ram_bank = 2
	Movf SD_DATA_BUFFER_POSH,W
	Iorwf SD_DATA_BUFFER_POS,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL185
F4_001081 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_File_Size_Left > 0 Then
	Bcf STATUS,3,0
	Movlb 2
ram_bank = 2
	Btfsc SD_FILE_SIZE_LEFTHHH,7
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL187
	Movlb 2
ram_bank = 2
	Movf SD_FILE_SIZE_LEFT,W
	Iorwf SD_FILE_SIZE_LEFTH,W
	Iorwf SD_FILE_SIZE_LEFTHH,W
	Iorwf SD_FILE_SIZE_LEFTHHH,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL187
	Bcf STATUS,3,0
	Movlb 2
ram_bank = 2
	Btfsc SD_FILE_SIZE_LEFTHHH,7
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL187
	Movlb 2
ram_bank = 2
	Movf SD_FILE_SIZE_LEFTH,W
	Iorwf SD_FILE_SIZE_LEFTHH,W
	Iorwf SD_FILE_SIZE_LEFTHHH,W
	Bnz cp@lb28
	Movlw 1
	Subwf SD_FILE_SIZE_LEFT,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL187
cp@lb28
F4_001082 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Buffer_Pos = SD_Bytes_Per_Sec
	Movff SD_BYTES_PER_SECH,SD_DATA_BUFFER_POSH
	Movff SD_BYTES_PER_SEC,SD_DATA_BUFFER_POS
F4_001083 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Inc SD_Sector_Num
	Incf SD_SECTOR_NUM,F,0
	Movlw 0
	Addwfc SD_SECTOR_NUMH,F,0
	Addwfc SD_SECTOR_NUMHH,F,0
	Addwfc SD_SECTOR_NUMHHH,F,0
F4_001084 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL187
F4_001085 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL185
F4_001086 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Idx = 1
	Movlb 2
ram_bank = 2
	Clrf SD_CLUSTER_SEQ_IDXH
	Movlw 1
	Movwf SD_CLUSTER_SEQ_IDX
F4_001087 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Seq_Num = 1
	Clrf SD_CLUSTER_SEQ_NUMH
	Movlw 1
	Movwf SD_CLUSTER_SEQ_NUM
F4_001088 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_EOF = 1
	Bsf _B#VR1,0
F4_001089 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Ptr = SD_File_Size
	Movff SD_FILE_SIZEHHH,SD_BYTES_READHHH
	Movff SD_FILE_SIZEHH,SD_BYTES_READHH
	Movff SD_FILE_SIZEH,SD_BYTES_READH
	Movff SD_FILE_SIZE,SD_BYTES_READ
F4_001090 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 0
	Clrf SD_EXTENDED_RETURN
F4_001091 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001097 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Delete_File MACRO
SD_DELETE_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	F@Call SD_DELETE_FILE_SUB
	Endm
SD_DELETE_FILE_SUB
F4_001108 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Check_For_File_Sub
	F@Call SD_CHECK_FOR_FILE_SUB
F4_001109 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return_Root_Dir <> 0 Then
	Movlb 2
ram_bank = 2
	Movf SD_EXTENDED_RETURN_ROOT_DIR,F
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL189
F4_001110 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_001111 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001112 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL189
F4_001113 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num.BYTE0 = SD_Root_Dir_File[$1A]
	Movlb 2
ram_bank = 2
	Movf SD_ROOT_DIR_FILE#26,W
	Movwf SD_CLUSTER_NUM
F4_001114 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num.BYTE1 = SD_Root_Dir_File[$1B]
	Movf SD_ROOT_DIR_FILE#27,W
	Movwf SD_CLUSTER_NUMH
F4_001115 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_Root_Dir_Pos
	Movff SD_ROOT_DIR_POSH,SD_WRITE_BUFFER_POSH
	Movff SD_ROOT_DIR_POS,SD_WRITE_BUFFER_POS
F4_001116 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = $E5
	Movlw 229
	Movwf SD_DATA_IO
F4_001117 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_001118 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_001119 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 0
	Movlb 2
ram_bank = 2
	Clrf SD_RW_OPTION
F4_001120 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Repeat
bc@LL190
	Movlb 0
ram_bank = 0
F4_001121 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Sec = SD_Cluster_Num / $100
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Movff SD_CLUSTER_NUMH,PP0H
	Movff SD_CLUSTER_NUM,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movlw 1
	Movwf PP2H,0
	Clrf PP2,0
	F@Call l@div
	Movff PP0HHH,SD_FAT_SECHHH
	Movff PP0HH,SD_FAT_SECHH
	Movff PP0H,SD_FAT_SECH
	Movff PP0,SD_FAT_SEC
F4_001122 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_Cluster_Num // $100
	Movff SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
	Movlb 2
ram_bank = 2
	Clrf SD_FAT_BUFFER_POSH
F4_001123 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT_Buffer_Pos = SD_FAT_Buffer_Pos * 2
	Bcf STATUS,0,0
	Rlcf SD_FAT_BUFFER_POS,F
	Rlcf SD_FAT_BUFFER_POSH,F
F4_001124 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Sector_Num <> (SD_FAT1 + SD_FAT_Sec) Then
	Movf SD_FAT_SEC,W
	Addwf SD_FAT1,W
	Movwf PBP#VAR0,0
	Movf SD_FAT_SECH,W
	Addwfc SD_FAT1H,W
	Movwf PBP#VAR0H,0
	Movf SD_FAT_SECHH,W
	Addwfc SD_FAT1HH,W
	Movwf PBP#VAR0HH,0
	Movf SD_FAT_SECHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf PBP#VAR0HHH,0
	Movf PBP#VAR0,W,0
	Subwf SD_SECTOR_NUM,W,0
	Bnz cp@lb29
	Movf PBP#VAR0H,W,0
	Subwf SD_SECTOR_NUMH,W,0
	Bnz cp@lb29
	Movf PBP#VAR0HH,W,0
	Subwf SD_SECTOR_NUMHH,W,0
	Bnz cp@lb29
	Movf PBP#VAR0HHH,W,0
	Subwf SD_SECTOR_NUMHHH,W,0
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL193
cp@lb29
F4_001125 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_RW_Option > 0 Then
	Movlb 2
ram_bank = 2
	Movf SD_RW_OPTION,F
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL195
F4_001126 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_001127 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Sector_Num - SD_FAT1 + SD_FAT2
	Movlb 2
ram_bank = 2
	Movf SD_FAT1,W
	Subwf SD_SECTOR_NUM,W,0
	Movwf PP7,0
	Movf SD_FAT1H,W
	Subwfb SD_SECTOR_NUMH,W,0
	Movwf PP7H,0
	Movf SD_FAT1HH,W
	Subwfb SD_SECTOR_NUMHH,W,0
	Movwf PP7HH,0
	Movf SD_FAT1HHH,W
	Subwfb SD_SECTOR_NUMHHH,W,0
	Movwf PP7HHH,0
	Movf SD_FAT2,W
	Addwf PP7,W,0
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT2H,W
	Addwfc PP7H,W,0
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT2HH,W
	Addwfc PP7HH,W,0
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT2HHH,W
	Addwfc PP7HHH,W,0
	Movwf SD_SECTOR_NUMHHH,0
F4_001128 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	Movlb 0
ram_bank = 0
	F@Call SD_WRITE_SECTOR
F4_001129 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL195
F4_001130 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_FAT1 + SD_FAT_Sec
	Movlb 2
ram_bank = 2
	Movf SD_FAT_SEC,W
	Addwf SD_FAT1,W
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT_SECH,W
	Addwfc SD_FAT1H,W
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT_SECHH,W
	Addwfc SD_FAT1HH,W
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT_SECHHH,W
	Addwfc SD_FAT1HHH,W
	Movwf SD_SECTOR_NUMHHH,0
F4_001131 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movwf SD_RW_OPTION
F4_001132 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_001134 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL193
F4_001135 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Buffer_Pos = SD_FAT_Buffer_Pos
	Movff SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
	Movff SD_FAT_BUFFER_POS,SD_BUFFER_POS
F4_001136 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Read_FAT_Entry
	F@Call SD_READ_FAT_ENTRY
F4_001137 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Cluster_Num = SD_FAT_Entry
	Movff SD_FAT_ENTRYH,SD_CLUSTER_NUMH
	Movff SD_FAT_ENTRY,SD_CLUSTER_NUM
F4_001138 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_FAT_Buffer_Pos
	Movff SD_FAT_BUFFER_POSH,SD_WRITE_BUFFER_POSH
	Movff SD_FAT_BUFFER_POS,SD_WRITE_BUFFER_POS
F4_001139 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_IO = $00
	Movlb 2
ram_bank = 2
	Clrf SD_DATA_IO
F4_001140 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_001141 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Buffer_Pos = SD_FAT_Buffer_Pos + 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Addwf SD_FAT_BUFFER_POS,W
	Movwf SD_WRITE_BUFFER_POS
	Movlw 0
	Addwfc SD_FAT_BUFFER_POSH,W
	Movwf SD_WRITE_BUFFER_POSH
F4_001142 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Insert_Byte_Into_Buffer
	Movlb 0
ram_bank = 0
	F@Call SD_INSERT_BYTE_INTO_BUFFER
F4_001143 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Until SD_Cluster_Num = $FFFF
	Movlb 2
ram_bank = 2
	Incf SD_CLUSTER_NUM,W
	Bnz cp@lb30
	Incf SD_CLUSTER_NUMH,W
cp@lb30
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL190
bc@LL191
F4_001144 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	F@Call SD_WRITE_SECTOR
F4_001145 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Sector_Num - SD_FAT1 + SD_FAT2
	Movlb 2
ram_bank = 2
	Movf SD_FAT1,W
	Subwf SD_SECTOR_NUM,W,0
	Movwf PP7,0
	Movf SD_FAT1H,W
	Subwfb SD_SECTOR_NUMH,W,0
	Movwf PP7H,0
	Movf SD_FAT1HH,W
	Subwfb SD_SECTOR_NUMHH,W,0
	Movwf PP7HH,0
	Movf SD_FAT1HHH,W
	Subwfb SD_SECTOR_NUMHHH,W,0
	Movwf PP7HHH,0
	Movf SD_FAT2,W
	Addwf PP7,W,0
	Movwf SD_SECTOR_NUM,0
	Movf SD_FAT2H,W
	Addwfc PP7H,W,0
	Movwf SD_SECTOR_NUMH,0
	Movf SD_FAT2HH,W
	Addwfc PP7HH,W,0
	Movwf SD_SECTOR_NUMHH,0
	Movf SD_FAT2HHH,W
	Addwfc PP7HHH,W,0
	Movwf SD_SECTOR_NUMHHH,0
F4_001146 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Sector
	Movlb 0
ram_bank = 0
	F@Call SD_WRITE_SECTOR
F4_001147 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 0
	Movlb 2
ram_bank = 2
	Clrf SD_EXTENDED_RETURN
F4_001148 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001154 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Init_FS_MSSP MACRO P1
SD_INIT_FS_MSSP	Macro P1,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	if (PRM_COUNT > 1)
	Error "(In Asm) SD_Init_FS_MSSP - Too many parameters"
	else
	if (PRM_COUNT == 0)
	Movlw 32
	Movwf SSPCON1,0
	else
	if (PRM_1 != Byte) && (PRM_1 != NUM8)
	Error "(In Asm) SD_Init_FS_MSSP - Speed(Param1) should be a Byte variable or number"
	endif
	if (PRM_1 == Byte)
	byte_byte P1, SSPCON1
	Bsf SSPCON1,5,0
	endif
	if (PRM_1 == NUM8)
	num_dword P1, SSPCON1
ram_bank = 0
	Bsf SSPCON1,5,0
	endif
	endif
	endif
	F@Call SD_INIT_FS_MSSP_SUB
	if (SD_Init_FS_MSSP_RETURN != 1)
	else
	if (RETURN_TYPE != Byte)
	Error "(In Asm) SD_Init_FS_MSSP - Return variable should be a Byte variable"
	endif
	if (RETURN_TYPE == Byte)
	byte_byte SD_Extended_Return, RETURN_VAR
	endif
	endif
	Endm
SD_INIT_FS_MSSP_SUB
F4_001193 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return_Int = SD_Init_MSSP SSPCON1
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_INIT_MSSP_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=SSPCON1
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=SD_EXTENDED_RETURN_INT,SD_INIT_MSSP_RETURN=1,PRM_COUNT=1
	SD_INIT_MSSP SSPCON1,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=SD_EXTENDED_RETURN_INT,SD_INIT_MSSP_RETURN=1,PRM_COUNT=1
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_INIT_MSSP_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=SSPCON1
F4_001194 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return_Int = 1 Then
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_EXTENDED_RETURN_INT,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL197
F4_001195 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_EXTENDED_RETURN
F4_001196 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001197 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL197
F4_001198 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = $00
	Clrf SD_SECTOR_NUMHHH,0
	Clrf SD_SECTOR_NUMHH,0
	Clrf SD_SECTOR_NUMH,0
	Clrf SD_SECTOR_NUM,0
F4_001199 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_RW_OPTION
F4_001200 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_001202 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Buffer0[0] = $EB And SD_Buffer0[2] = $90 Then
	Movf SD_BUFFER0#0,W,0
	Movwf PBP#VAR0,0
	Movlw 235
	Subwf PBP#VAR0,W,0
	Movlw 1
	Btfss STATUS,2,0
	Movlw 0
	Movwf SP#P9,0
	Movf SD_BUFFER0#2,W,0
	Movwf PBP#VAR0,0
	Movlw 144
	Subwf PBP#VAR0,W,0
	Movlw 1
	Btfss STATUS,2,0
	Movlw 0
	Andwf SP#P9,W,0
	Btfsc STATUS,2,0
	Go@to bc@LL199
F4_001204 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Boot_Record = $0000
	Movlb 2
ram_bank = 2
	Clrf SD_BOOT_RECORDH
	Clrf SD_BOOT_RECORD
	Movlb 0
ram_bank = 0
	F@Jump bc@LL198
F4_001205 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] ElseIf SD_Buffer0[0] = $E9 Then
bc@LL199
	Movf SD_BUFFER0#0,W,0
	Movwf PBP#VAR0,0
	Movlw 233
	Subwf PBP#VAR0,W,0
	Btfss STATUS,2,0
	Go@to bc@LL200
F4_001207 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Boot_Record = $0000
	Movlb 2
ram_bank = 2
	Clrf SD_BOOT_RECORDH
	Clrf SD_BOOT_RECORD
	Movlb 0
ram_bank = 0
	F@Jump bc@LL201
bc@LL200
F4_001208 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Else
F4_001210 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Boot_Record = SD_Buffer1[$0C6] + 0
	Movlb 2
ram_bank = 2
	Movf SD_BUFFER1#198,W
	Movwf PBP#VAR1,0
	Clrf SD_BOOT_RECORDH
	Movff PBP#VAR1,SD_BOOT_RECORD
F4_001211 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] EndIf
bc@LL201
	Movlb 0
ram_bank = 0
bc@LL198
F4_001212 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Boot_Record
	Clrf SD_SECTOR_NUMHHH,0
	Clrf SD_SECTOR_NUMHH,0
	Movff SD_BOOT_RECORDH,SD_SECTOR_NUMH
	Movff SD_BOOT_RECORD,SD_SECTOR_NUM
F4_001213 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_RW_Option = 1
	Movlw 1
	Movlb 2
ram_bank = 2
	Movwf SD_RW_OPTION
F4_001214 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Sector_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_SECTOR_SUB
F4_001216 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Bytes_Per_Sec.BYTE0 = SD_Buffer0[$0B]
	Movf SD_BUFFER0#11,W,0
	Movlb 2
ram_bank = 2
	Movwf SD_BYTES_PER_SEC
F4_001217 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Bytes_Per_Sec.BYTE1 = SD_Buffer0[$0C]
	Movf SD_BUFFER0#12,W,0
	Movwf SD_BYTES_PER_SECH
F4_001218 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Secs_Per_Cluster = SD_Buffer0[$0D]
	Movf SD_BUFFER0#13,W,0
	Movwf SD_SECS_PER_CLUSTER
F4_001219 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Reserved_Secs.BYTE0 = SD_Buffer0[$0E]
	Movf SD_BUFFER0#14,W,0
	Movwf SD_RESERVED_SECS
F4_001220 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Reserved_Secs.BYTE1 = SD_Buffer0[$0F]
	Movf SD_BUFFER0#15,W,0
	Movwf SD_RESERVED_SECSH
F4_001221 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_FATs = SD_Buffer0[$10]
	Movf SD_BUFFER0#16,W,0
	Movwf SD_NUM_OF_FATS
F4_001222 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_Root_Entries.BYTE0 = SD_Buffer0[$11]
	Movf SD_BUFFER0#17,W,0
	Movwf SD_NUM_OF_ROOT_ENTRIES
F4_001223 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_Root_Entries.BYTE1 = SD_Buffer0[$12]
	Movf SD_BUFFER0#18,W,0
	Movwf SD_NUM_OF_ROOT_ENTRIESH
F4_001224 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Secs_Per_FAT.BYTE0 = SD_Buffer0[$16]
	Movf SD_BUFFER0#22,W,0
	Movwf SD_SECS_PER_FAT
F4_001225 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Secs_Per_FAT.BYTE1 = SD_Buffer0[$17]
	Movf SD_BUFFER0#23,W,0
	Movwf SD_SECS_PER_FATH
F4_001226 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_Secs.BYTE0 = SD_Buffer0[$20]
	Movf SD_BUFFER0#32,W,0
	Movwf SD_NUM_OF_SECS
F4_001227 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_Secs.BYTE1 = SD_Buffer0[$21]
	Movf SD_BUFFER0#33,W,0
	Movwf SD_NUM_OF_SECSH
F4_001228 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_Secs.BYTE2 = SD_Buffer0[$22]
	Movf SD_BUFFER0#34,W,0
	Movwf SD_NUM_OF_SECSHH
F4_001229 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Num_of_Secs.BYTE3 = SD_Buffer0[$23]
	Movf SD_BUFFER0#35,W,0
	Movwf SD_NUM_OF_SECSHHH
F4_001230 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT1 = SD_Boot_Record + SD_Reserved_Secs
	Movf SD_RESERVED_SECS,W
	Addwf SD_BOOT_RECORD,W
	Movwf SD_FAT1
	Movf SD_RESERVED_SECSH,W
	Addwfc SD_BOOT_RECORDH,W
	Movwf SD_FAT1H
	Movlw 0
	Clrf SD_FAT1HH
	Addwfc SD_FAT1HH,F
	Clrf SD_FAT1HHH
F4_001231 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_FAT2 = SD_Boot_Record + SD_Reserved_Secs + SD_Secs_Per_FAT
	Movf SD_RESERVED_SECS,W
	Addwf SD_BOOT_RECORD,W
	Movwf PP7,0
	Movf SD_RESERVED_SECSH,W
	Addwfc SD_BOOT_RECORDH,W
	Movwf PP7H,0
	Movlw 0
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Movf SD_SECS_PER_FAT,W
	Addwf PP7,W,0
	Movwf SD_FAT2
	Movf SD_SECS_PER_FATH,W
	Addwfc PP7H,W,0
	Movwf SD_FAT2H
	Movlw 0
	Addwfc PP7HH,W,0
	Movwf SD_FAT2HH
	Movlw 0
	Addwfc PP7HHH,W,0
	Movwf SD_FAT2HHH
F4_001232 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Root_Dir = SD_Num_of_FATs * SD_Secs_Per_FAT
	Clrf PP0HHH,0
	Clrf PP0HH,0
	Clrf PP0H,0
	Movff SD_NUM_OF_FATS,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Movff SD_SECS_PER_FATH,PP2H
	Movff SD_SECS_PER_FAT,PP2
	F@Call al@mul
	Movff PP0HHH,SD_ROOT_DIRHHH
	Movff PP0HH,SD_ROOT_DIRHH
	Movff PP0H,SD_ROOT_DIRH
	Movff PP0,SD_ROOT_DIR
F4_001233 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Root_Dir = SD_Boot_Record + SD_Reserved_Secs + SD_Root_Dir
	Movf SD_RESERVED_SECS,W
	Addwf SD_BOOT_RECORD,W
	Movwf PP7,0
	Movf SD_RESERVED_SECSH,W
	Addwfc SD_BOOT_RECORDH,W
	Movwf PP7H,0
	Movlw 0
	Clrf PP7HH,0
	Addwfc PP7HH,F,0
	Clrf PP7HHH,0
	Movf PP7,W,0
	Addwf SD_ROOT_DIR,F
	Movf PP7H,W,0
	Addwfc SD_ROOT_DIRH,F
	Movf PP7HH,W,0
	Addwfc SD_ROOT_DIRHH,F
	Movf PP7HHH,W,0
	Addwfc SD_ROOT_DIRHHH,F
F4_001234 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Secs_in_Root = SD_Num_of_Root_Entries * 32
	Movf SD_NUM_OF_ROOT_ENTRIESH,W
	Mullw 32
	Movff PRODL,SD_SECS_IN_ROOTH
	Movf SD_NUM_OF_ROOT_ENTRIES,W
	Mullw 32
	Movff PRODL,SD_SECS_IN_ROOT
	Movf PRODH,W,0
	Addwf SD_SECS_IN_ROOTH,F
F4_001235 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Secs_in_Root = SD_Secs_in_Root / SD_Bytes_Per_Sec
	Movff SD_SECS_IN_ROOTH,PP0H
	Movff SD_SECS_IN_ROOT,PP0
	Movff SD_BYTES_PER_SECH,PP1H
	Movff SD_BYTES_PER_SEC,PP1
	F@Call d@vd
	Movwf SD_SECS_IN_ROOT
	Movff PP0H,SD_SECS_IN_ROOTH
F4_001236 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Data_Area = SD_Root_Dir + SD_Secs_in_Root
	Movf SD_SECS_IN_ROOT,W
	Addwf SD_ROOT_DIR,W
	Movwf SD_DATA_AREA
	Movf SD_SECS_IN_ROOTH,W
	Addwfc SD_ROOT_DIRH,W
	Movwf SD_DATA_AREAH
	Movlw 0
	Addwfc SD_ROOT_DIRHH,W
	Movwf SD_DATA_AREAHH
	Movlw 0
	Addwfc SD_ROOT_DIRHHH,W
	Movwf SD_DATA_AREAHHH
F4_001238 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Boot_Record + SD_Num_of_Secs - 1
	Movf SD_BOOT_RECORD,W
	Addwf SD_NUM_OF_SECS,W
	Movwf PP7,0
	Movf SD_BOOT_RECORDH,W
	Addwfc SD_NUM_OF_SECSH,W
	Movwf PP7H,0
	Movlw 0
	Addwfc SD_NUM_OF_SECSHH,W
	Movwf PP7HH,0
	Movlw 0
	Addwfc SD_NUM_OF_SECSHHH,W
	Movwf PP7HHH,0
	Decf PP7,W,0
	Movwf SD_SECTOR_NUM,0
	Movlw 0
	Subwfb PP7H,W,0
	Movwf SD_SECTOR_NUMH,0
	Movlw 0
	Subwfb PP7HH,W,0
	Movwf SD_SECTOR_NUMHH,0
	Movlw 0
	Subwfb PP7HHH,W,0
	Movwf SD_SECTOR_NUMHHH,0
F4_001239 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Sector_Num - SD_Data_Area + 1
	Movf SD_DATA_AREA,W
	Subwf SD_SECTOR_NUM,W,0
	Movwf PP7,0
	Movf SD_DATA_AREAH,W
	Subwfb SD_SECTOR_NUMH,W,0
	Movwf PP7H,0
	Movf SD_DATA_AREAHH,W
	Subwfb SD_SECTOR_NUMHH,W,0
	Movwf PP7HH,0
	Movf SD_DATA_AREAHHH,W
	Subwfb SD_SECTOR_NUMHHH,W,0
	Movwf PP7HHH,0
	Incf PP7,W,0
	Movwf SD_SECTOR_NUM,0
	Movlw 0
	Addwfc PP7H,W,0
	Movwf SD_SECTOR_NUMH,0
	Movlw 0
	Addwfc PP7HH,W,0
	Movwf SD_SECTOR_NUMHH,0
	Movlw 0
	Addwfc PP7HHH,W,0
	Movwf SD_SECTOR_NUMHHH,0
F4_001240 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Sector_Num = SD_Sector_Num / SD_Secs_Per_Cluster
	Movff SD_SECTOR_NUMHHH,PP0HHH
	Movff SD_SECTOR_NUMHH,PP0HH
	Movff SD_SECTOR_NUMH,PP0H
	Movff SD_SECTOR_NUM,PP0
	Clrf PP2HHH,0
	Clrf PP2HH,0
	Clrf PP2H,0
	Movff SD_SECS_PER_CLUSTER,PP2
	F@Call l@div
	Movff PP0HHH,SD_SECTOR_NUMHHH
	Movff PP0HH,SD_SECTOR_NUMHH
	Movff PP0H,SD_SECTOR_NUMH
	Movff PP0,SD_SECTOR_NUM
F4_001241 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Last_Cluster = SD_Sector_Num + 1
	Movlw 1
	Addwf SD_SECTOR_NUM,W,0
	Movwf SD_LAST_CLUSTER
	Movlw 0
	Addwfc SD_SECTOR_NUMH,W,0
	Movwf SD_LAST_CLUSTERH
F4_001243 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Name = "        "
	Lfsr 0,SD_FILE_NAME
	Movlw ((str@lb1 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb1 & 255)
	Movwf TBLPTRL,0
	F@Call load@mstr
	Clrf INDF0,0
F4_001244 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Ext = "   "
	Lfsr 0,SD_FILE_EXT
	Movlw 32
	Movwf POSTINC0,0
	Movwf POSTINC0,0
	Movwf POSTINC0,0
	Clrf INDF0,0
F4_001245 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Day = 1
	Movlw 1
	Movwf SD_DAY
F4_001246 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Month = 1
	Movlw 1
	Movwf SD_MONTH
F4_001247 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Year = 0
	Clrf SD_YEAR
F4_001248 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_MSeconds = 0
	Clrf SD_MSECONDS
F4_001249 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Seconds = 0
	Clrf SD_SECONDS
F4_001250 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Minutes = 0
	Clrf SD_MINUTES
F4_001251 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Hours = 0
	Clrf SD_HOURS
F4_001252 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_File_Num = 0
	Clrf SD_FILE_NUMH
	Clrf SD_FILE_NUM
F4_001253 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Extended_Return = 0
	Clrf SD_EXTENDED_RETURN
F4_001254 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Movlb 0
ram_bank = 0
	Return 0
F4_001260 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_Byte_To_File MACRO P1
SD_WRITE_BYTE_TO_FILE	Macro P1,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	if (PRM_COUNT >  1)
	Error "(In Asm) SD_Write_Byte_to_File - Too many parameters"
	else
	if (PRM_COUNT <  1)
	Error "(In Asm) SD_Write_Byte_to_File - Too few parameters"
	else
	if (PRM_1 != Byte) && (PRM_1 != NUM8) && (PRM_1 != NUM16) && (PRM_1 != NUM32) && (PRM_1 != Word) && (PRM_1 != DWord)
	Error "(In Asm) SD_Write_Byte_to_File - Byte(Param 1) should be a Byte, Word or DWord variable or number"
	endif
	if (PRM_1 == Byte)
	byte_byte P1, SD_IO_Byte
	endif
	if (PRM_1 == NUM8)
	num_byte P1, SD_IO_Byte
ram_bank = 0
	endif
	if (PRM_1 == NUM16)
	num_byte P1, SD_IO_Byte
ram_bank = 0
	endif
	if (PRM_1 == NUM32)
	num_byte P1, SD_IO_Byte
ram_bank = 0
	endif
	if (PRM_1 == Word)
	byte_byte P1, SD_IO_Byte
	endif
	if (PRM_1 == DWord)
	byte_byte P1, SD_IO_Byte
	endif
	if (PRM_1 == Float)
	float_byte P1, SD_IO_Byte
	endif
	F@Call SD_WRITE_BYTE_TO_FILE_SUB
	if (SD_Write_Byte_To_File_RETURN != 1)
	else
	if (RETURN_TYPE != Byte)
	Error "(In Asm) SD_Write_Byte_To_File - Return variable should be a Byte variable"
	endif
	if (RETURN_TYPE == Byte)
	byte_byte SD_Extended_Return, RETURN_VAR
	endif
	endif
	endif
	endif
	Endm
F4_001318 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_Write_String_To_File MACRO
SD_WRITE_STRING_TO_FILE	Macro .,.,.,.,.,.,.,.,.,.
 Local PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 Local NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
	if (PRM_COUNT != 0)
	Error "(In Asm) No parameters required for SD_Write_String_To_File"
	Exitm
	endif
	F@Call SD_WRITE_STRING_TO_FILE_SUB
	if (SD_Write_String_To_File_RETURN != 1)
	else
	if (RETURN_TYPE != Byte)
	Error "(In Asm) SD_Write_String_To_File - Return variable should be a Byte variable"
	endif
	if (RETURN_TYPE == Byte)
	byte_byte SD_Extended_Return, RETURN_VAR
	endif
	endif
	Endm
SD_WRITE_STRING_TO_FILE_SUB
F4_001345 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_IO_String_Length = Len(SD_IO_String)
	Lfsr 0,SD_IO_STRING
	Clrf WREG,0
	Movf POSTINC0,F,0
	Bz $ + 6
	Incfsz WREG,F,0
	Bra $ - 6
	Movlb 2
ram_bank = 2
	Movwf SD_IO_STRING_LENGTH
F4_001346 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_IO_String_Length = SD_IO_String_Length - 1
	Decf SD_IO_STRING_LENGTH,F
F4_001347 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] For SD_IO_String_Pos = 0 To SD_IO_String_Length
	Clrf SD_IO_STRING_POS
fr@lb203
	Movlb 0
ram_bank = 0
	Movlb 2
ram_bank = 2
	Movf SD_IO_STRING_POS,W
	Subwf SD_IO_STRING_LENGTH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to nx@lb204
F4_001348 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] SD_IO_Byte = SD_IO_String[SD_IO_String_Pos]
	Lfsr 0,SD_IO_STRING
	Movlb 2
ram_bank = 2
	Movf SD_IO_STRING_POS,W
	Addwf FSR0L,F,0
	Movlw 0
	Addwfc FSR0H,F,0
	Movf INDF0,W,0
	Movwf SD_IO_BYTE
F4_001349 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] GoSub SD_Write_Byte_To_File_Sub
	Movlb 0
ram_bank = 0
	F@Call SD_WRITE_BYTE_TO_FILE_SUB
F4_001350 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] If SD_Extended_Return = 1 Then Return
	Movlw 1
	Movlb 2
ram_bank = 2
	Subwf SD_EXTENDED_RETURN,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL205
	Return 0
bc@LL205
F4_001351 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Next SD_IO_String_Pos
	Movlb 2
ram_bank = 2
	Incf SD_IO_STRING_POS,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb203
nx@lb204
F4_001352 equ $ ; in [V4.0 RFID 2ND GENERATION_LIB.PBP] Return
	Return 0
OVERLIBCODE
F4_EOF equ $ ; V4.0 RFID 2ND GENERATION_LIB.PBP
F2_EOF equ $ ; V4.0 RFID 2ND GENERATION.PRP
F1_SOF equ $ ; V4.0 RFID 2ND GENERATION.BAS
F5_SOF equ $ ; INITIALIZE.INC
F5_000036 equ $ ; in [INITIALIZE.INC] ALL_DIGITAL = TRUE
	Movlw 7
	Movwf CMCON,0
	Movlw 15
	Movwf ADCON1,0
F5_EOF equ $ ; INITIALIZE.INC
F1_000043 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] DelayMS 200               'Allow chip to settle
	Movlw 200
	F@Call dl@ms
F1_000045 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Input SD_Detect           'Set SD Detect port as input...
	Bsf TRISA,1,0
F1_000048 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Low RFIDEnable                ' Turn off RFID Reader
	Bcf TRISD,4,0
	Bcf PORTD,4,0
F1_000049 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] User_Pointer.LowByte = ERead UPA_L    'Read the low and high bytes of...
	Movlw 0
	F@Call Ee@rd
	Movlb 3
ram_bank = 3
	Movwf USER_POINTER
F1_000050 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] User_Pointer.HighByte = ERead UPA_H    '..user pointer address from EEprom
	Movlw 1
	F@Call Ee@rd
	Movwf USER_POINTERH
F1_000052 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] If User_Pointer = 0XFFFF Then             'If the value read from EEprom is OXFFFF then this is a new chip so....
	Incf USER_POINTER,W
	Bnz cp@lb31
	Incf USER_POINTERH,W
cp@lb31
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL207
F1_000053 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] User_Pointer = BUA                   '...we write the low and ..
	Movlw 156
	Movlb 3
ram_bank = 3
	Movwf USER_POINTERH
	Movlw 80
	Movwf USER_POINTER
F1_000054 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] EWrite UPA_L, [User_Pointer.LowByte]  '...high bytes of the base user address (0X9C500...
	Clrf EEADRH,0
	Clrf EEADR,0
	Movf USER_POINTER,W
	F@Call ee@wr@w
F1_000055 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] EWrite UPA_H, [User_Pointer.HighByte]  '...into the EEProm Pointer storage spot (0X000 and 0X001)
	Clrf EEADRH,0
	Movlw 1
	Movwf EEADR,0
	Movf USER_POINTERH,W
	F@Call ee@wr@w
F1_000056 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] EWrite num_UHE, [0X00]              'Initialize number of User histories to zero
	Clrf EEADRH,0
	Movlw 3
	Movwf EEADR,0
	Movlw 0
	F@Call ee@wr@w
F1_000057 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] EWrite num_MHE, [0X00]               'Initialize number of Manager histories to zero
	Clrf EEADRH,0
	Movlw 4
	Movwf EEADR,0
	Movlw 0
	F@Call ee@wr@w
F1_000058 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] EndIf
bc@LL207
	Movlb 0
ram_bank = 0
F1_000071 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Pause 3000
	Movlw 11
	Movwf PP1H,0
	Movlw 184
	F@Call dly@w
START
START2
F1_000078 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] GoSub Read_Tag
	F@Call READ_TAG
F1_000080 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Cls
	F@Call Lcd@Cls
F1_000081 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Print "Checking TAG"
	Movlw ((str@lb2 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb2 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F1_000083 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] GoSub Check_Tag
	F@Call CHECK_TAG
F1_000084 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] If Response = 1 Then
	Movlw 1
	Movlb 3
ram_bank = 3
	Subwf RESPONSE,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL209
F1_000085 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Cls
	F@Call Lcd@Cls
F1_000086 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Print At 1,1, "Got a match"
	Movlw 128
	Movwf BPFH,0
	Movlw 128
	F@Call LCD@crs
	Movlw ((str@lb3 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb3 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F1_000087 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Print At 2,1, Str UserIn
	Movlw 128
	Movwf BPFH,0
	Movlw 192
	F@Call LCD@crs
	Movlw 4
	Movwf GEN4,0
	Movlw 3
	Movwf PP2H,0
	Movlw 208
	F@Call sb@strout
F1_000088 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] GoSub WriteH
	F@Call WRITEH
F1_000089 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Cls
	F@Call Lcd@Cls
F1_000090 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Print "History DONE!"
	Movlw ((str@lb4 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb4 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F1_000091 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F1_000092 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] GoTo Start2
	F@Jump START2
	F@Jump bc@LL212
bc@LL209
F1_000093 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Else
F1_000094 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Cls
	F@Call Lcd@Cls
F1_000095 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Print "No Match"
	Movlw ((str@lb5 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb5 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F1_000096 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F1_000097 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] GoTo Start2
	F@Jump START2
F1_000098 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] EndIf
bc@LL212
F1_000099 equ $ ; in [V4.0 RFID 2ND GENERATION.BAS] Stop
Pb@lb214
	Bra Pb@lb214
F6_SOF equ $ ; READ TAG.INC
READ_TAG
F6_000012 equ $ ; in [READ TAG.INC] Cls
	F@Call Lcd@Cls
F6_000013 equ $ ; in [READ TAG.INC] Print At 1,1, "ATTEMPTING TO"
	Movlw 128
	Movwf BPFH,0
	Movlw 128
	F@Call LCD@crs
	Movlw ((str@lb6 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb6 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F6_000014 equ $ ; in [READ TAG.INC] Print At 2,1, "READ TAG...."
	Movlw 128
	Movwf BPFH,0
	Movlw 192
	F@Call LCD@crs
	Movlw ((str@lb7 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb7 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F6_000016 equ $ ; in [READ TAG.INC] Flag = 0                  'Used to indicate a good read
	Movlb 2
ram_bank = 2
	Bcf _B#VR1,1
F6_000017 equ $ ; in [READ TAG.INC] High RFIDEnable                 ' Turn on RFID Reader
	Bcf TRISD,4,0
	Bsf PORTD,4,0
F6_000018 equ $ ; in [READ TAG.INC] Pause 10               'Time for Reader to settle
	Movlw 10
	F@Call dl@ms
F6_000020 equ $ ; in [READ TAG.INC] HSerIn 30000, Timeout, [Wait (0X82) ,Str TagIn]  'Wait for header (0X82)
	Movlw 117
	Movwf GENH,0
	Movlw 48
	Movwf GEN,0
Pb@lb215
	Movlb 0
ram_bank = 0
	F@Call HRsin2
	Btfss STATUS,0,0
	Go@to TIMEOUT
	Sublw 130
	Btfss STATUS,2,0
	Go@to Pb@lb215
	Lfsr 0,TAGIN
	Movlw 10
	Movwf PRODL,0
Pb@lb218
	Bsf STATUS,0,0
	F@Call HRsin2
	Btfss STATUS,0,0
	Go@to TIMEOUT
	Movwf POSTINC0,0
	Decfsz PRODL,F,0
	Bra Pb@lb218
F6_000022 equ $ ; in [READ TAG.INC] HSerIn [CheckSum]                'Check Sum
	F@Call HRsin
	Movlb 3
ram_bank = 3
	Movwf CHECKSUM
F6_000023 equ $ ; in [READ TAG.INC] HSerIn [ETX]                      'End of Transmission (Footer...Should be 0X83)
	F@Call HRsin
	Movwf ETX
F6_000024 equ $ ; in [READ TAG.INC] Low RFIDEnable                ' Turn off RFID Reader
	Bcf TRISD,4,0
	Bcf PORTD,4,0
F6_000025 equ $ ; in [READ TAG.INC] If ETX <> 0X83 Then  GoTo Read_Tag 'Tag Footer was not correct
	Movlw 131
	Subwf ETX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL219
	F@Jump READ_TAG
bc@LL219
F6_000029 equ $ ; in [READ TAG.INC] For Index = 0 To 9
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb221
	Movlb 0
ram_bank = 0
	Movlw 10
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb222
F6_000030 equ $ ; in [READ TAG.INC] Select TagIn[Index]
	Lfsr 0,TAGIN
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Movf PLUSW0,W,0
	Movwf PBP#VAR1,0
F6_000031 equ $ ; in [READ TAG.INC] Case 0XB0 To 0XB9
	Movlw 176
	Subwf PBP#VAR1,W,0
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL223
	Movlw 186
	Subwf PBP#VAR1,W,0
	Btfsc STATUS,0,0
	Go@to bc@LL223
F6_000032 equ $ ; in [READ TAG.INC] TV1 = TagIn[Index]
	Lfsr 0,TAGIN
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Movf PLUSW0,W,0
	Movwf TV1
F6_000033 equ $ ; in [READ TAG.INC] ClearBit TV1 , 7
	Bcf TV1,7
F6_000034 equ $ ; in [READ TAG.INC] TagIn[Index] = TV1
	Lfsr 0,TAGIN
	Movf INDEX,W
	Movff TV1,PLUSW0
	Movlb 0
ram_bank = 0
	F@Jump bc@LL222
bc@LL223
F6_000036 equ $ ; in [READ TAG.INC] Case 0X81 To 0X86
	Movlw 129
	Subwf PBP#VAR1,W,0
	Btfss STATUS,0,0
	Go@to bc@LL226
	Movlw 135
	Subwf PBP#VAR1,W,0
	Btfsc STATUS,0,0
	Go@to bc@LL226
F6_000037 equ $ ; in [READ TAG.INC] TV1 = TagIn[Index]
	Lfsr 0,TAGIN
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Movf PLUSW0,W,0
	Movwf TV1
F6_000038 equ $ ; in [READ TAG.INC] ClearBit TV1 , 7
	Bcf TV1,7
F6_000039 equ $ ; in [READ TAG.INC] SetBit TV1, 6
	Bsf TV1,6
F6_000040 equ $ ; in [READ TAG.INC] TagIn[Index] = TV1
	Lfsr 0,TAGIN
	Movf INDEX,W
	Movff TV1,PLUSW0
F6_000042 equ $ ; in [READ TAG.INC] End Select
bc@LL226
	Movlb 0
ram_bank = 0
bc@LL222
F6_000043 equ $ ; in [READ TAG.INC] Next Index
	Movlb 3
ram_bank = 3
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb221
nx@lb222
F6_000044 equ $ ; in [READ TAG.INC] Cls
	F@Call Lcd@Cls
F6_000045 equ $ ; in [READ TAG.INC] Print "Thank You"
	Movlw ((str@lb8 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb8 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F6_000046 equ $ ; in [READ TAG.INC] Stop
Pb@lb228
	Bra Pb@lb228
F6_000047 equ $ ; in [READ TAG.INC] Return
	Return 0
TIMEOUT
F6_000049 equ $ ; in [READ TAG.INC] Timeout: Low RFIDEnable       ' Turn off RFID Reader ..No Tag detected for 30 sec
	Bcf TRISD,4,0
	Bcf PORTD,4,0
F6_000051 equ $ ; in [READ TAG.INC] Cls
	F@Call Lcd@Cls
F6_000052 equ $ ; in [READ TAG.INC] Print At 1,1, "No Tag Detected"
	Movlw 128
	Movwf BPFH,0
	Movlw 128
	F@Call LCD@crs
	Movlw ((str@lb9 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb9 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F6_000053 equ $ ; in [READ TAG.INC] DelayMS 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F6_000054 equ $ ; in [READ TAG.INC] Sleep
	Sleep
F6_EOF equ $ ; READ TAG.INC
F7_SOF equ $ ; READ SD.INC
READ_SD
F7_000012 equ $ ; in [READ SD.INC] MyCount = 0
	Movlb 3
ram_bank = 3
	Clrf MYCOUNT
F7_000014 equ $ ; in [READ SD.INC] For Index = 0 To 7
	Clrf INDEX
fr@lb229
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb230
F7_000015 equ $ ; in [READ SD.INC] ModNum[Index] = CRead 0X9C40 + Index    'Read the Module number into Variable
	Movlw 64
	Movlb 3
ram_bank = 3
	Addwf INDEX,W
	Clrf TBLPTRLH,0
	Movwf TBLPTRL,0
	Movlw 156
	Addwfc TBLPTRLH,F,0
	Clrf EECON1,0
	Bsf EECON1,EEPGD,0
	Tblrd*
	Movff TABLAT,PBP#VAR1
	Lfsr 0,MODNUM
	Movf INDEX,W
	Movff PBP#VAR1,PLUSW0
F7_000016 equ $ ; in [READ SD.INC] Next
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb229
nx@lb230
F7_000018 equ $ ; in [READ SD.INC] SD_File_Name = Str ModNum          'File Name, upper case only
	Lfsr 0,SD_FILE_NAME
	Lfsr 1,MODNUM
	Movlw 7
	Movwf PRODL,0
	Movf POSTINC1,W,0
	Bz $ + 8
	Movwf POSTINC0,0
	Decfsz PRODL,F,0
	Bra $ - 8
	Clrf INDF0,0
F7_000019 equ $ ; in [READ SD.INC] SD_File_Ext = "TXT"                'File Ext, upper case only!
	Lfsr 0,SD_FILE_EXT
	Movlw 84
	Movwf POSTINC0,0
	Movlw 88
	Movwf POSTINC0,0
	Movlw 84
	Movwf POSTINC0,0
	Clrf INDF0,0
F7_000020 equ $ ; in [READ SD.INC] Response = SD_Open_File
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_OPEN_FILE_RETURN=1,PRM_COUNT=0
	SD_OPEN_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_OPEN_FILE_RETURN=1,PRM_COUNT=0
F7_000021 equ $ ; in [READ SD.INC] If Response = 1 Then
	Movlw 1
	Movlb 3
ram_bank = 3
	Subwf RESPONSE,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL231
F7_000022 equ $ ; in [READ SD.INC] Cls
	F@Call Lcd@Cls
F7_000023 equ $ ; in [READ SD.INC] Print "File not found"
	Movlw ((str@lb10 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb10 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F7_000025 equ $ ; in [READ SD.INC] Sleep
	Sleep
F7_000026 equ $ ; in [READ SD.INC] EndIf
bc@LL231
F7_000029 equ $ ; in [READ SD.INC] User_Pointer = BUA                   '...we write the low and ..
	Movlw 156
	Movlb 3
ram_bank = 3
	Movwf USER_POINTERH
	Movlw 80
	Movwf USER_POINTER
F7_000030 equ $ ; in [READ SD.INC] EWrite UPA_L, [User_Pointer.LowByte]  '...high bytes of the base user address (0X9C500...
	Clrf EEADRH,0
	Clrf EEADR,0
	Movf USER_POINTER,W
	F@Call ee@wr@w
F7_000031 equ $ ; in [READ SD.INC] EWrite UPA_H, [User_Pointer.HighByte]  '...into the EEProm Pointer storage spot (0X000 and 0X001)
	Clrf EEADRH,0
	Movlw 1
	Movwf EEADR,0
	Movf USER_POINTERH,W
	F@Call ee@wr@w
F7_000033 equ $ ; in [READ SD.INC] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F7_000035 equ $ ; in [READ SD.INC] While SD_EOF < 1
bc@LL232
	Movlb 0
ram_bank = 0
	Bcf STATUS,3,0
	Movlb 2
ram_bank = 2
	Btfsc _B#VR1,0
	Bsf STATUS,3,0
	Movlb 0
ram_bank = 0
	G@oto bc@LL233
F7_000037 equ $ ; in [READ SD.INC] Response = SD_Read_Byte_From_File
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
	SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000039 equ $ ; in [READ SD.INC] If Response <> 0X5E Then       'first character for each user should be "^"
	Movlw 94
	Movlb 3
ram_bank = 3
	Subwf RESPONSE,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL235
F7_000040 equ $ ; in [READ SD.INC] If Response = 0X40 Then
	Movlw 64
	Movlb 3
ram_bank = 3
	Subwf RESPONSE,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL237
F7_000042 equ $ ; in [READ SD.INC] EWrite NOU, [MyCount]     'Write total # of Users to EEProm
	Clrf EEADRH,0
	Movlw 2
	Movwf EEADR,0
	Movlb 3
ram_bank = 3
	Movf MYCOUNT,W
	F@Call ee@wr@w
F7_000043 equ $ ; in [READ SD.INC] GoTo Write_Manager     'We are finished with the User table
	Movlb 0
ram_bank = 0
	F@Jump WRITE_MANAGER
F7_000044 equ $ ; in [READ SD.INC] Return
	Return 0
F7_000045 equ $ ; in [READ SD.INC] EndIf
bc@LL237
F7_000046 equ $ ; in [READ SD.INC] Cls
	F@Call Lcd@Cls
F7_000047 equ $ ; in [READ SD.INC] Print At 1,1, "No 5E (^)"
	Movlw 128
	Movwf BPFH,0
	Movlw 128
	F@Call LCD@crs
	Movlw ((str@lb11 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb11 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F7_000048 equ $ ; in [READ SD.INC] Print At 2,1, "Stopped!"
	Movlw 128
	Movwf BPFH,0
	Movlw 192
	F@Call LCD@crs
	Movlw ((str@lb12 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb12 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F7_000049 equ $ ; in [READ SD.INC] Pause 3000
	Movlw 11
	Movwf PP1H,0
	Movlw 184
	F@Call dly@w
F7_000050 equ $ ; in [READ SD.INC] SD_Close_File
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F7_000051 equ $ ; in [READ SD.INC] Stop
Pb@lb239
	Bra Pb@lb239
F7_000052 equ $ ; in [READ SD.INC] Sleep
	Sleep
F7_000054 equ $ ; in [READ SD.INC] Cls
	F@Call Lcd@Cls
F7_000055 equ $ ; in [READ SD.INC] Print Response,"^ Problem.."      '*******Eventually will flash LED *************
	Movlb 3
ram_bank = 3
	Movf RESPONSE,W
	F@Call Print
	Movlw ((str@lb13 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb13 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F7_000056 equ $ ; in [READ SD.INC] SD_Close_File
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F7_000057 equ $ ; in [READ SD.INC] Pause 4000
	Movlw 15
	Movwf PP1H,0
	Movlw 160
	F@Call dly@w
F7_000058 equ $ ; in [READ SD.INC] Sleep
	Sleep
F7_000059 equ $ ; in [READ SD.INC] EndIf
bc@LL235
	Movlb 0
ram_bank = 0
F7_000063 equ $ ; in [READ SD.INC] For Index = 0 To 3                'next 3 characters will be the User ID number
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb240
	Movlb 0
ram_bank = 0
	Movlw 4
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb241
F7_000064 equ $ ; in [READ SD.INC] UTag[Index] = SD_Read_Byte_From_File
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
	SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
	Lfsr 0,UTAG
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Movff PBP#VAR1,PLUSW0
F7_000065 equ $ ; in [READ SD.INC] Next
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb240
nx@lb241
F7_000067 equ $ ; in [READ SD.INC] Response = SD_Read_Byte_From_File
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
	SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000069 equ $ ; in [READ SD.INC] If Response <> 0X3A Then       'first character for each tag should be ":"
	Movlw 58
	Movlb 3
ram_bank = 3
	Subwf RESPONSE,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,2,0
	Go@to bc@LL242
F7_000070 equ $ ; in [READ SD.INC] Cls
	F@Call Lcd@Cls
F7_000071 equ $ ; in [READ SD.INC] Print At 1,1, "No 3A (:).."      '*******Eventually will flash LED *************
	Movlw 128
	Movwf BPFH,0
	Movlw 128
	F@Call LCD@crs
	Movlw ((str@lb14 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb14 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F7_000072 equ $ ; in [READ SD.INC] Print At 2,1, "Stopped!"
	Movlw 128
	Movwf BPFH,0
	Movlw 192
	F@Call LCD@crs
	Movlw ((str@lb15 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb15 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F7_000073 equ $ ; in [READ SD.INC] Pause 3000
	Movlw 11
	Movwf PP1H,0
	Movlw 184
	F@Call dly@w
F7_000074 equ $ ; in [READ SD.INC] SD_Close_File
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F7_000075 equ $ ; in [READ SD.INC] Sleep
	Sleep
F7_000076 equ $ ; in [READ SD.INC] EndIf
bc@LL242
F7_000078 equ $ ; in [READ SD.INC] For Index = 4 To 13                'next 9 characters will be the User Tag number
	Movlw 4
	Movlb 3
ram_bank = 3
	Movwf INDEX
fr@lb244
	Movlb 0
ram_bank = 0
	Movlw 14
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb245
F7_000079 equ $ ; in [READ SD.INC] UTag[Index] = SD_Read_Byte_From_File
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
	SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
	Lfsr 0,UTAG
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Movff PBP#VAR1,PLUSW0
F7_000080 equ $ ; in [READ SD.INC] Next
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb244
nx@lb245
F7_000082 equ $ ; in [READ SD.INC] UTag[14] = 0XFF   'Dummy byte
	Movlb 3
ram_bank = 3
	Setf UTAG#14
F7_000083 equ $ ; in [READ SD.INC] UTag[15] = 0XFF   'Dummy byte
	Setf UTAG#15
F7_000084 equ $ ; in [READ SD.INC] For Index = 0 To 15
	Clrf INDEX
fr@lb246
	Movlb 0
ram_bank = 0
	Movlw 16
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb247
F7_000085 equ $ ; in [READ SD.INC] CWrite User_Pointer + Index, [UTag[Index]]    'Here we are writing 16 byte chunk to the program memory (Must be written in 8 or 16 byte chunks)
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Addwf USER_POINTER,W
	Movwf TBLPTRL,0
	Movlw 0
	Addwfc USER_POINTERH,W
	Movwf TBLPTRLH,0
	Lfsr 0,UTAG
	Movf INDEX,W
	Movf PLUSW0,W,0
	F@Call c@write
F7_000086 equ $ ; in [READ SD.INC] Next
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb246
nx@lb247
F7_000087 equ $ ; in [READ SD.INC] User_Pointer = User_Pointer + 16      'Here we will update the user pointer to reflect..
	Movlw 16
	Movlb 3
ram_bank = 3
	Addwf USER_POINTER,F
	Movlw 0
	Addwfc USER_POINTERH,F
F7_000088 equ $ ; in [READ SD.INC] EWrite UPA_L, [User_Pointer.LowByte]   'our progress so far. If a problem arises then we have not lost all
	Clrf EEADRH,0
	Clrf EEADR,0
	Movf USER_POINTER,W
	F@Call ee@wr@w
F7_000089 equ $ ; in [READ SD.INC] EWrite UPA_H, [User_Pointer.HighByte]
	Clrf EEADRH,0
	Movlw 1
	Movwf EEADR,0
	Movf USER_POINTERH,W
	F@Call ee@wr@w
F7_000090 equ $ ; in [READ SD.INC] Inc MyCount    'Keeps track of how many Users we have added
	Incf MYCOUNT,F
F7_000092 equ $ ; in [READ SD.INC] Wend
	Movlb 0
ram_bank = 0
	F@Jump bc@LL232
bc@LL233
F7_EOF equ $ ; READ SD.INC
F8_SOF equ $ ; WRITE SD.INC
WRITE_SD
F8_000016 equ $ ; in [WRITE SD.INC] SD_File_Name = Str ModNum + "W"      'Module File Name with 'W' appended to differeniate from Input file, upper case only!
	Lfsr 0,SD_FILE_NAME
	Lfsr 1,MODNUM
	Movlw 7
	Movwf PRODL,0
	Movf POSTINC1,W,0
	Bz $ + 8
	Movwf POSTINC0,0
	Decfsz PRODL,F,0
	Bra $ - 8
	Movlw 87
	Movwf POSTINC0,0
	Clrf INDF0,0
F8_000017 equ $ ; in [WRITE SD.INC] SD_File_Ext = "TXT"                  'File Ext, upper case only!
	Lfsr 0,SD_FILE_EXT
	Movlw 84
	Movwf POSTINC0,0
	Movlw 88
	Movwf POSTINC0,0
	Movlw 84
	Movwf POSTINC0,0
	Clrf INDF0,0
F8_000018 equ $ ; in [WRITE SD.INC] Response = SD_Check_For_File         'Check if file exists already
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
	SD_CHECK_FOR_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
F8_000019 equ $ ; in [WRITE SD.INC] If Response = 0 Then
	Movlb 3
ram_bank = 3
	Movf RESPONSE,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL248
F8_000020 equ $ ; in [WRITE SD.INC] SD_Delete_File               ' If file exists then delete it........
 Variable MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
	SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F8_000021 equ $ ; in [WRITE SD.INC] EndIf
bc@LL248
F8_000022 equ $ ; in [WRITE SD.INC] SD_New_File     'Create new file
 Variable MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
	SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F8_000023 equ $ ; in [WRITE SD.INC] SD_Close_File   'Close file now that is has been created... Only one file at a time can be opened
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F8_000025 equ $ ; in [WRITE SD.INC] SD_File_Name = Str ModNum + "W"      'Module File Name with 'W' appended to differeniate from Input file, upper case only!
	Lfsr 0,SD_FILE_NAME
	Lfsr 1,MODNUM
	Movlw 7
	Movwf PRODL,0
	Movf POSTINC1,W,0
	Bz $ + 8
	Movwf POSTINC0,0
	Decfsz PRODL,F,0
	Bra $ - 8
	Movlw 87
	Movwf POSTINC0,0
	Clrf INDF0,0
F8_000026 equ $ ; in [WRITE SD.INC] SD_File_Ext = "TXT"                'File Ext, upper case only!
	Lfsr 0,SD_FILE_EXT
	Movlw 84
	Movwf POSTINC0,0
	Movlw 88
	Movwf POSTINC0,0
	Movlw 84
	Movwf POSTINC0,0
	Clrf INDF0,0
F8_000027 equ $ ; in [WRITE SD.INC] Response = SD_Append_File     'Here we are going to 'Append' the Output file with data so far
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_APPEND_FILE_RETURN=1,PRM_COUNT=0
	SD_APPEND_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_APPEND_FILE_RETURN=1,PRM_COUNT=0
F8_000028 equ $ ; in [WRITE SD.INC] If Response = 1 Then
	Movlw 1
	Movlb 3
ram_bank = 3
	Subwf RESPONSE,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL250
F8_000029 equ $ ; in [WRITE SD.INC] Cls
	F@Call Lcd@Cls
F8_000030 equ $ ; in [WRITE SD.INC] Print "File not found"
	Movlw ((str@lb16 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb16 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F8_000032 equ $ ; in [WRITE SD.INC] Sleep
	Sleep
F8_000033 equ $ ; in [WRITE SD.INC] EndIf
bc@LL250
CLOSE_FILE
F8_000039 equ $ ; in [WRITE SD.INC] SD_Close_File                                           'Close file
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F8_000040 equ $ ; in [WRITE SD.INC] Return
	Return 0
F8_EOF equ $ ; WRITE SD.INC
F9_SOF equ $ ; INIT SD.INC
INIT_SD
F9_000013 equ $ ; in [INIT SD.INC] For Index = 0 To 2   'We allow 3 tries to intialize the SD card
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb252
	Movlb 0
ram_bank = 0
	Movlw 3
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb253
F9_000015 equ $ ; in [INIT SD.INC] Response = SD_Init_FS_MSSP SD_SPI_FOSC_04
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_INIT_FS_MSSP_LST_PRM=0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_INIT_FS_MSSP_RETURN=1,PRM_COUNT=1
	SD_INIT_FS_MSSP 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_INIT_FS_MSSP_RETURN=1,PRM_COUNT=1
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_INIT_FS_MSSP_LST_PRM=0
F9_000016 equ $ ; in [INIT SD.INC] If Response = 0 Then
	Movlb 3
ram_bank = 3
	Movf RESPONSE,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL254
F9_000017 equ $ ; in [INIT SD.INC] Return
	Return 0
F9_000018 equ $ ; in [INIT SD.INC] EndIf
bc@LL254
F9_000019 equ $ ; in [INIT SD.INC] Next Index     'Next try to intitialize card
	Movlb 3
ram_bank = 3
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb252
nx@lb253
F9_000022 equ $ ; in [INIT SD.INC] Cls
	F@Call Lcd@Cls
F9_000023 equ $ ; in [INIT SD.INC] Print "No Init!"     'Eventually we will flash a LED here to tell operator the Init failed
	Movlw ((str@lb17 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb17 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F9_000024 equ $ ; in [INIT SD.INC] Pause 3000
	Movlw 11
	Movwf PP1H,0
	Movlw 184
	F@Call dly@w
F9_000025 equ $ ; in [INIT SD.INC] Return
	Return 0
F9_EOF equ $ ; INIT SD.INC
F10_SOF equ $ ; CHECK TAG.INC
CHECK_TAG
F10_000004 equ $ ; in [CHECK TAG.INC] Check_Tag:    Response = 0        'Process will set Response to 1 if Tag is found
	Movlb 3
ram_bank = 3
	Clrf RESPONSE
F10_000005 equ $ ; in [CHECK TAG.INC] If User_Pointer = BUA Then    'there are no User entries in the table
	Movf USER_POINTERH,W
	Xorlw 156
	Movlw 80
	Btfsc STATUS,2,0
	Xorwf USER_POINTER,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL256
F10_000006 equ $ ; in [CHECK TAG.INC] Cls
	F@Call Lcd@Cls
F10_000007 equ $ ; in [CHECK TAG.INC] Print "No Users"
	Movlw ((str@lb18 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb18 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F10_000008 equ $ ; in [CHECK TAG.INC] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F10_000009 equ $ ; in [CHECK TAG.INC] Return
	Return 0
F10_000010 equ $ ; in [CHECK TAG.INC] EndIf
bc@LL256
F10_000011 equ $ ; in [CHECK TAG.INC] Word_Var = BUA   ' Start search in first user memory spot
	Movlw 156
	Movlb 3
ram_bank = 3
	Movwf WORD_VARH
	Movlw 80
	Movwf WORD_VAR
NEXTTAG
	Movlb 0
ram_bank = 0
F10_000012 equ $ ; in [CHECK TAG.INC] NextTag:  Index = 0
	Movlb 3
ram_bank = 3
	Clrf INDEX
F10_000013 equ $ ; in [CHECK TAG.INC] Response = 0     'Process will set Flag to 1 if Tag is found
	Clrf RESPONSE
F10_000014 equ $ ; in [CHECK TAG.INC] Repeat      'Repeat until all Tag digits are checked
bc@LL257
	Movlb 0
ram_bank = 0
F10_000015 equ $ ; in [CHECK TAG.INC] TV1 = CRead TagOffset + Word_Var + Index   'TagOffset jumps over User #
	Movlw 4
	Movlb 3
ram_bank = 3
	Addwf WORD_VAR,W
	Movwf PP7,0
	Movlw 0
	Addwfc WORD_VARH,W
	Movwf PP7H,0
	Movf INDEX,W
	Addwf PP7,W,0
	Movwf TBLPTRL,0
	Movlw 0
	Addwfc PP7H,W,0
	Movwf TBLPTRLH,0
	Clrf EECON1,0
	Bsf EECON1,EEPGD,0
	Tblrd*
	Movff TABLAT,TV1
F10_000016 equ $ ; in [CHECK TAG.INC] If TV1 = TagIn[Index] Then
	Lfsr 0,TAGIN
	Movf INDEX,W
	Movf PLUSW0,W,0
	Movwf PBP#VAR1,0
	Movf TV1,W
	Subwf PBP#VAR1,W,0
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL260
F10_000017 equ $ ; in [CHECK TAG.INC] Response = 1      'Digits Match
	Movlw 1
	Movlb 3
ram_bank = 3
	Movwf RESPONSE
F10_000018 equ $ ; in [CHECK TAG.INC] Inc Index      'Check Next Digit
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	F@Jump bc@LL261
bc@LL260
F10_000019 equ $ ; in [CHECK TAG.INC] Else
F10_000020 equ $ ; in [CHECK TAG.INC] Response = 0     'Digit does not match, therefore
	Movlb 3
ram_bank = 3
	Clrf RESPONSE
F10_000021 equ $ ; in [CHECK TAG.INC] Index = 10  'we are finished with this Tag
	Movlw 10
	Movwf INDEX
F10_000022 equ $ ; in [CHECK TAG.INC] EndIf
bc@LL261
	Movlb 0
ram_bank = 0
F10_000023 equ $ ; in [CHECK TAG.INC] Until Index > 9
	Movlw 10
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,0,0
	Go@to bc@LL257
bc@LL258
F10_000024 equ $ ; in [CHECK TAG.INC] If Response = 1 Then      'Write User of Tag into UserIn variable array
	Movlw 1
	Movlb 3
ram_bank = 3
	Subwf RESPONSE,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL263
F10_000025 equ $ ; in [CHECK TAG.INC] For Index = 0 To 3
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb265
	Movlb 0
ram_bank = 0
	Movlw 4
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb266
F10_000026 equ $ ; in [CHECK TAG.INC] UserIn[Index] = CRead Word_Var + Index
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Addwf WORD_VAR,W
	Movwf TBLPTRL,0
	Movlw 0
	Addwfc WORD_VARH,W
	Movwf TBLPTRLH,0
	Clrf EECON1,0
	Bsf EECON1,EEPGD,0
	Tblrd*
	Movff TABLAT,PBP#VAR1
	Lfsr 0,USERIN
	Movf INDEX,W
	Movff PBP#VAR1,PLUSW0
F10_000027 equ $ ; in [CHECK TAG.INC] Next
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb265
nx@lb266
F10_000028 equ $ ; in [CHECK TAG.INC] Return
	Return 0
F10_000029 equ $ ; in [CHECK TAG.INC] EndIf
bc@LL263
F10_000031 equ $ ; in [CHECK TAG.INC] Word_Var = Word_Var + 16
	Movlw 16
	Movlb 3
ram_bank = 3
	Addwf WORD_VAR,F
	Movlw 0
	Addwfc WORD_VARH,F
F10_000032 equ $ ; in [CHECK TAG.INC] If Word_Var = User_Pointer Then Return
	Movf USER_POINTERH,W
	Subwf WORD_VARH,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL267
	Movlb 3
ram_bank = 3
	Movf USER_POINTER,W
	Subwf WORD_VAR,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL267
	Return 0
bc@LL267
F10_000034 equ $ ; in [CHECK TAG.INC] GoTo NextTag
	F@Jump NEXTTAG
F10_EOF equ $ ; CHECK TAG.INC
F11_SOF equ $ ; WRITE_U_H.INC
WRITEH
F11_000012 equ $ ; in [WRITE_U_H.INC] For Index = num_UH To 0 Step -1          'Here we move all old history down one notch to ready 1st place for new entry
	Movlw 200
	Movlb 3
ram_bank = 3
	Movwf INDEX
fr@lb269
	Movlb 0
ram_bank = 0
F11_000013 equ $ ; in [WRITE_U_H.INC] For Index2 = 0 To 3
	Movlb 3
ram_bank = 3
	Clrf INDEX2
fr@lb271
	Movlb 0
ram_bank = 0
	Movlw 4
	Movlb 3
ram_bank = 3
	Subwf INDEX2,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb272
F11_000014 equ $ ; in [WRITE_U_H.INC] TV1 = ERead (Index * 4) + Index2 + UHA
	Clrf PP7H,0
	Movff INDEX,PP7
	Bcf STATUS,0,0
	Rlcf PP7,F,0
	Rlcf PP7H,F,0
	Bcf STATUS,0,0
	Rlcf PP7,F,0
	Rlcf PP7H,F,0
	Movlb 3
ram_bank = 3
	Movf INDEX2,W
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 16
	Addwf PP7,W,0
	Movwf EEADR,0
	Movlw 0
	Addwfc PP7H,W,0
	Movwf EEADRH,0
	F@Call Ee@rd@w
	Movwf TV1
F11_000015 equ $ ; in [WRITE_U_H.INC] EWrite (Index * 4) + Index2 + 4 + UHA,[TV1]
	Clrf PP7H,0
	Movff INDEX,PP7
	Bcf STATUS,0,0
	Rlcf PP7,F,0
	Rlcf PP7H,F,0
	Bcf STATUS,0,0
	Rlcf PP7,F,0
	Rlcf PP7H,F,0
	Movf INDEX2,W
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 4
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 16
	Addwf PP7,W,0
	Movwf EEADR,0
	Movlw 0
	Addwfc PP7H,W,0
	Movwf EEADRH,0
	Movf TV1,W
	F@Call ee@wr@w
F11_000016 equ $ ; in [WRITE_U_H.INC] WOrd_Var = (Index * 4) + Index2 + 4 + UHA
	Clrf PP7H,0
	Movff INDEX,PP7
	Bcf STATUS,0,0
	Rlcf PP7,F,0
	Rlcf PP7H,F,0
	Bcf STATUS,0,0
	Rlcf PP7,F,0
	Rlcf PP7H,F,0
	Movf INDEX2,W
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 4
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 16
	Addwf PP7,W,0
	Movwf WORD_VAR
	Movlw 0
	Addwfc PP7H,W,0
	Movwf WORD_VARH
F11_000017 equ $ ; in [WRITE_U_H.INC] Next Index2
	Incf INDEX2,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb271
nx@lb272
F11_000018 equ $ ; in [WRITE_U_H.INC] Next Index
	Movlw 1
	Movlb 3
ram_bank = 3
	Subwf INDEX,F
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to fr@lb269
nx@lb270
F11_000020 equ $ ; in [WRITE_U_H.INC] Cls
	F@Call Lcd@Cls
F11_000022 equ $ ; in [WRITE_U_H.INC] For Index = 0 To 3               'Write User # to History
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb273
	Movlb 0
ram_bank = 0
	Movlw 4
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb274
F11_000023 equ $ ; in [WRITE_U_H.INC] TV1 = UserIn[Index]
	Lfsr 0,USERIN
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Movf PLUSW0,W,0
	Movwf TV1
F11_000024 equ $ ; in [WRITE_U_H.INC] EWrite UHA + Index, [TV1]
	Movlw 16
	Addwf INDEX,W
	Clrf EEADRH,0
	Movwf EEADR,0
	Rlcf EEADRH,F,0
	Movf TV1,W
	F@Call ee@wr@w
F11_000025 equ $ ; in [WRITE_U_H.INC] Next 'Index
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb273
nx@lb274
F11_000026 equ $ ; in [WRITE_U_H.INC] TV1 = ERead num_UHE
	Movlw 3
	F@Call Ee@rd
	Movlb 3
ram_bank = 3
	Movwf TV1
F11_000027 equ $ ; in [WRITE_U_H.INC] If TV1 < num_UH Then
	Movlw 200
	Subwf TV1,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL275
F11_000028 equ $ ; in [WRITE_U_H.INC] Inc TV1
	Movlb 3
ram_bank = 3
	Incf TV1,F
F11_000029 equ $ ; in [WRITE_U_H.INC] EWrite num_UHE, [TV1]
	Clrf EEADRH,0
	Movlw 3
	Movwf EEADR,0
	Movf TV1,W
	F@Call ee@wr@w
F11_000030 equ $ ; in [WRITE_U_H.INC] EndIf
bc@LL275
	Movlb 0
ram_bank = 0
F11_000031 equ $ ; in [WRITE_U_H.INC] Return
	Return 0
F11_EOF equ $ ; WRITE_U_H.INC
F12_SOF equ $ ; WRITE_M_H.INC
WRITE_MANAGER
F12_000013 equ $ ; in [WRITE_M_H.INC] For Index = num_MH To 0 Step -1       'Here we move all old history down one notch to ready 1st place for new entry
	Movlw 10
	Movlb 3
ram_bank = 3
	Movwf INDEX
fr@lb277
	Movlb 0
ram_bank = 0
F12_000014 equ $ ; in [WRITE_M_H.INC] For Index2 = 0 To 7
	Movlb 3
ram_bank = 3
	Clrf INDEX2
fr@lb279
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 3
ram_bank = 3
	Subwf INDEX2,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb280
F12_000015 equ $ ; in [WRITE_M_H.INC] TV1 = ERead (Index * 8) + Index2 + MHA
	Clrf PP7H,0
	Movff INDEX,PP7
	Movf PP7H,W,0
	Mullw 8
	Movff PRODL,PP7H
	Movf PP7,W,0
	Mullw 8
	Movff PRODL,PP7
	Movf PRODH,W,0
	Addwf PP7H,F,0
	Movlb 3
ram_bank = 3
	Movf INDEX2,W
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 144
	Addwf PP7,W,0
	Movwf EEADR,0
	Movlw 3
	Addwfc PP7H,W,0
	Movwf EEADRH,0
	F@Call Ee@rd@w
	Movwf TV1
F12_000016 equ $ ; in [WRITE_M_H.INC] EWrite (Index * 8) + Index2 + 8 + MHA,[TV1]
	Clrf PP7H,0
	Movff INDEX,PP7
	Movf PP7H,W,0
	Mullw 8
	Movff PRODL,PP7H
	Movf PP7,W,0
	Mullw 8
	Movff PRODL,PP7
	Movf PRODH,W,0
	Addwf PP7H,F,0
	Movf INDEX2,W
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 8
	Addwf PP7,F,0
	Movlw 0
	Addwfc PP7H,F,0
	Movlw 144
	Addwf PP7,W,0
	Movwf EEADR,0
	Movlw 3
	Addwfc PP7H,W,0
	Movwf EEADRH,0
	Movf TV1,W
	F@Call ee@wr@w
F12_000017 equ $ ; in [WRITE_M_H.INC] Next Index2
	Incf INDEX2,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb279
nx@lb280
F12_000018 equ $ ; in [WRITE_M_H.INC] Next Index
	Movlw 1
	Movlb 3
ram_bank = 3
	Subwf INDEX,F
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to fr@lb277
nx@lb278
F12_000020 equ $ ; in [WRITE_M_H.INC] For Index = 0 To 7    'Write Manager ID and date to history file in spot 1
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb281
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb282
F12_000021 equ $ ; in [WRITE_M_H.INC] Response = SD_Read_Byte_From_File
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
	SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F12_000022 equ $ ; in [WRITE_M_H.INC] EWrite MHA + Index, [Response]
	Movlw 144
	Movlb 3
ram_bank = 3
	Addwf INDEX,W
	Clrf EEADRH,0
	Movwf EEADR,0
	Movlw 3
	Addwfc EEADRH,F,0
	Movf RESPONSE,W
	F@Call ee@wr@w
F12_000023 equ $ ; in [WRITE_M_H.INC] Next 'Index
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb281
nx@lb282
F12_000024 equ $ ; in [WRITE_M_H.INC] TV1 = ERead num_MHE
	Movlw 4
	F@Call Ee@rd
	Movlb 3
ram_bank = 3
	Movwf TV1
F12_000025 equ $ ; in [WRITE_M_H.INC] If TV1 < num_MH Then
	Movlw 10
	Subwf TV1,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to bc@LL283
F12_000026 equ $ ; in [WRITE_M_H.INC] Inc TV1
	Movlb 3
ram_bank = 3
	Incf TV1,F
F12_000027 equ $ ; in [WRITE_M_H.INC] EWrite num_MHE, [TV1]
	Clrf EEADRH,0
	Movlw 4
	Movwf EEADR,0
	Movf TV1,W
	F@Call ee@wr@w
F12_000028 equ $ ; in [WRITE_M_H.INC] EndIf
bc@LL283
	Movlb 0
ram_bank = 0
F12_000029 equ $ ; in [WRITE_M_H.INC] SD_Close_File
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F12_000030 equ $ ; in [WRITE_M_H.INC] Cls
	F@Call Lcd@Cls
F12_000031 equ $ ; in [WRITE_M_H.INC] Print "Manager Done"
	Movlw ((str@lb19 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb19 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F12_000032 equ $ ; in [WRITE_M_H.INC] Return
	Return 0
F12_EOF equ $ ; WRITE_M_H.INC
F13_SOF equ $ ; WRITE_M_SD.INC
WRITE_M_SD
F13_000013 equ $ ; in [WRITE_M_SD.INC] GoSub Read_Mod
	F@Call READ_MOD
F13_000015 equ $ ; in [WRITE_M_SD.INC] SD_File_Name = Str ModNum          'File Name, upper case only
	Lfsr 0,SD_FILE_NAME
	Lfsr 1,MODNUM
	Movlw 7
	Movwf PRODL,0
	Movf POSTINC1,W,0
	Bz $ + 8
	Movwf POSTINC0,0
	Decfsz PRODL,F,0
	Bra $ - 8
	Clrf INDF0,0
F13_000016 equ $ ; in [WRITE_M_SD.INC] SD_File_Name = SD_File_Name +"M"
	Lfsr 0,SD_FILE_NAME
	Movf POSTINC0,W,0
	Bnz $ - 2
	Movf POSTDEC0,F,0
	Movlw 77
	Movwf POSTINC0,0
	Clrf INDF0,0
F13_000017 equ $ ; in [WRITE_M_SD.INC] SD_File_Ext = "TXT"                'File Ext, upper case only!
	Lfsr 0,SD_FILE_EXT
	Movlw 84
	Movwf POSTINC0,0
	Movlw 88
	Movwf POSTINC0,0
	Movlw 84
	Movwf POSTINC0,0
	Clrf INDF0,0
F13_000019 equ $ ; in [WRITE_M_SD.INC] SD_Delete_File          'If file already exists then delete it..
 Variable MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
	SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F13_000022 equ $ ; in [WRITE_M_SD.INC] SD_New_File
 Variable MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
	SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F13_000023 equ $ ; in [WRITE_M_SD.INC] Index2 = ERead num_MHE   'Load number of Manager History entries
	Movlw 4
	F@Call Ee@rd
	Movlb 3
ram_bank = 3
	Movwf INDEX2
F13_000024 equ $ ; in [WRITE_M_SD.INC] MyNum = Str$ (Dec,Index2) 'Change number into a string to send to SD card
	Lfsr 0,MYNUM
	Movlw 2
	Movwf BPFH,0
	Movf INDEX2,W
	F@Call out@decb
	Clrf INDF0,0
F13_000025 equ $ ; in [WRITE_M_SD.INC] If Index2 = 0 Then  'If there is no Manager History then..
	Movf INDEX2,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL285
F13_000026 equ $ ; in [WRITE_M_SD.INC] SD_IO_String = "No Manager History"
	Lfsr 0,SD_IO_STRING
	Movlw ((str@lb20 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb20 & 255)
	Movwf TBLPTRL,0
	F@Call load@mstr
	Clrf INDF0,0
F13_000027 equ $ ; in [WRITE_M_SD.INC] SD_Write_String_To_File
 Variable MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
	SD_WRITE_STRING_TO_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
F13_000028 equ $ ; in [WRITE_M_SD.INC] SD_CLOSE_FILE
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F13_000029 equ $ ; in [WRITE_M_SD.INC] Return
	Return 0
F13_000030 equ $ ; in [WRITE_M_SD.INC] EndIf
bc@LL285
F13_000031 equ $ ; in [WRITE_M_SD.INC] SD_IO_String = MyNum   'Write number of Mangager History entries to SD
	Lfsr 0,SD_IO_STRING
	Lfsr 1,MYNUM
	Movlw 3
	Movf INDF1,F,0
	Bz $ + 10
	Movff POSTINC1,POSTINC0
	Decfsz WREG,F,0
	Bra $ - 10
	Clrf INDF0,0
F13_000032 equ $ ; in [WRITE_M_SD.INC] SD_Write_String_To_File
 Variable MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
	SD_WRITE_STRING_TO_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
F13_000033 equ $ ; in [WRITE_M_SD.INC] SD_Write_Byte_To_File "|"  ' Add a Separator
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
	SD_WRITE_BYTE_TO_FILE 124,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
F13_000035 equ $ ; in [WRITE_M_SD.INC] MyCount = 0
	Movlb 3
ram_bank = 3
	Clrf MYCOUNT
F13_000036 equ $ ; in [WRITE_M_SD.INC] Repeat
bc@LL286
	Movlb 0
ram_bank = 0
F13_000037 equ $ ; in [WRITE_M_SD.INC] For Index = 0 To 1
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb289
	Movlb 0
ram_bank = 0
	Movlw 2
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb290
F13_000038 equ $ ; in [WRITE_M_SD.INC] TV1 = ERead MHA + MyCount * 8 + Index
	Movlw 3
	Movwf PP7H,0
	Movlw 144
	Movwf PP7,0
	Clrf PP8H,0
	Movff MYCOUNT,PP8
	Movf PP8H,W,0
	Mullw 8
	Movff PRODL,PP8H
	Movf PP8,W,0
	Mullw 8
	Movff PRODL,PP8
	Movf PRODH,W,0
	Addwf PP8H,F,0
	Movf PP8,W,0
	Addwf PP7,F,0
	Movf PP8H,W,0
	Addwfc PP7H,F,0
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Addwf PP7,W,0
	Movwf EEADR,0
	Movlw 0
	Addwfc PP7H,W,0
	Movwf EEADRH,0
	F@Call Ee@rd@w
	Movwf TV1
F13_000039 equ $ ; in [WRITE_M_SD.INC] SD_Write_Byte_To_File TV1
	Movlb 0
ram_bank = 0
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
	SD_WRITE_BYTE_TO_FILE TV1,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
F13_000040 equ $ ; in [WRITE_M_SD.INC] Next Index
	Movlb 3
ram_bank = 3
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb289
nx@lb290
F13_000041 equ $ ; in [WRITE_M_SD.INC] SD_Write_Byte_To_File ":"  ' Add a Separator
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
	SD_WRITE_BYTE_TO_FILE 58,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
F13_000042 equ $ ; in [WRITE_M_SD.INC] For Index = 2 To 7
	Movlw 2
	Movlb 3
ram_bank = 3
	Movwf INDEX
fr@lb291
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb292
F13_000043 equ $ ; in [WRITE_M_SD.INC] TV1 = ERead MHA + MyCount * 8 + Index
	Movlw 3
	Movwf PP7H,0
	Movlw 144
	Movwf PP7,0
	Clrf PP8H,0
	Movff MYCOUNT,PP8
	Movf PP8H,W,0
	Mullw 8
	Movff PRODL,PP8H
	Movf PP8,W,0
	Mullw 8
	Movff PRODL,PP8
	Movf PRODH,W,0
	Addwf PP8H,F,0
	Movf PP8,W,0
	Addwf PP7,F,0
	Movf PP8H,W,0
	Addwfc PP7H,F,0
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Addwf PP7,W,0
	Movwf EEADR,0
	Movlw 0
	Addwfc PP7H,W,0
	Movwf EEADRH,0
	F@Call Ee@rd@w
	Movwf TV1
F13_000044 equ $ ; in [WRITE_M_SD.INC] SD_Write_Byte_To_File TV1
	Movlb 0
ram_bank = 0
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
	SD_WRITE_BYTE_TO_FILE TV1,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
F13_000045 equ $ ; in [WRITE_M_SD.INC] Next Index
	Movlb 3
ram_bank = 3
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb291
nx@lb292
F13_000046 equ $ ; in [WRITE_M_SD.INC] SD_Write_Byte_To_File "/"  ' Add a Separator
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
	SD_WRITE_BYTE_TO_FILE 47,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
F13_000047 equ $ ; in [WRITE_M_SD.INC] Inc MyCount
	Movlb 3
ram_bank = 3
	Incf MYCOUNT,F
F13_000048 equ $ ; in [WRITE_M_SD.INC] Until MyCount = Index2
	Movf MYCOUNT,W
	Subwf INDEX2,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL286
bc@LL287
F13_000049 equ $ ; in [WRITE_M_SD.INC] SD_CLOSE_FILE
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F13_000050 equ $ ; in [WRITE_M_SD.INC] Return
	Return 0
F13_EOF equ $ ; WRITE_M_SD.INC
F14_SOF equ $ ; WRITE_USERS_SD.INC
WRITE_USERS_SD
F14_000014 equ $ ; in [WRITE_USERS_SD.INC] GoSub Read_Mod 'Get the Module # from chip
	F@Call READ_MOD
F14_000015 equ $ ; in [WRITE_USERS_SD.INC] SD_File_Name = Str ModNum          'File Name, upper case only
	Lfsr 0,SD_FILE_NAME
	Lfsr 1,MODNUM
	Movlw 7
	Movwf PRODL,0
	Movf POSTINC1,W,0
	Bz $ + 8
	Movwf POSTINC0,0
	Decfsz PRODL,F,0
	Bra $ - 8
	Clrf INDF0,0
F14_000016 equ $ ; in [WRITE_USERS_SD.INC] SD_File_Name = SD_File_Name + "R"
	Lfsr 0,SD_FILE_NAME
	Movf POSTINC0,W,0
	Bnz $ - 2
	Movf POSTDEC0,F,0
	Movlw 82
	Movwf POSTINC0,0
	Clrf INDF0,0
F14_000017 equ $ ; in [WRITE_USERS_SD.INC] SD_File_Ext = "TXT"
	Lfsr 0,SD_FILE_EXT
	Movlw 84
	Movwf POSTINC0,0
	Movlw 88
	Movwf POSTINC0,0
	Movlw 84
	Movwf POSTINC0,0
	Clrf INDF0,0
F14_000020 equ $ ; in [WRITE_USERS_SD.INC] SD_Delete_File          'If it does exist then delete it..
 Variable MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
	SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F14_000023 equ $ ; in [WRITE_USERS_SD.INC] SD_New_File
 Variable MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
	SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F14_000025 equ $ ; in [WRITE_USERS_SD.INC] If User_Pointer = BUA Then    'there are no User entries in the table
	Movlb 3
ram_bank = 3
	Movf USER_POINTERH,W
	Xorlw 156
	Movlw 80
	Btfsc STATUS,2,0
	Xorwf USER_POINTER,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL293
F14_000026 equ $ ; in [WRITE_USERS_SD.INC] Cls
	F@Call Lcd@Cls
F14_000027 equ $ ; in [WRITE_USERS_SD.INC] Print "No Users"
	Movlw ((str@lb21 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb21 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F14_000028 equ $ ; in [WRITE_USERS_SD.INC] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F14_000029 equ $ ; in [WRITE_USERS_SD.INC] SD_IO_String = "No Users Exist"
	Lfsr 0,SD_IO_STRING
	Movlw ((str@lb22 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb22 & 255)
	Movwf TBLPTRL,0
	F@Call load@mstr
	Clrf INDF0,0
F14_000030 equ $ ; in [WRITE_USERS_SD.INC] SD_Write_String_To_File
 Variable MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
	SD_WRITE_STRING_TO_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
F14_000031 equ $ ; in [WRITE_USERS_SD.INC] SD_CLOSE_FILE
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F14_000032 equ $ ; in [WRITE_USERS_SD.INC] Return
	Return 0
F14_000033 equ $ ; in [WRITE_USERS_SD.INC] EndIf
bc@LL293
F14_000036 equ $ ; in [WRITE_USERS_SD.INC] Index2 = ERead NOU    'Read number of users into Index2
	Movlw 2
	F@Call Ee@rd
	Movlb 3
ram_bank = 3
	Movwf INDEX2
F14_000037 equ $ ; in [WRITE_USERS_SD.INC] MyCount = 0
	Clrf MYCOUNT
F14_000038 equ $ ; in [WRITE_USERS_SD.INC] Word_Var = BUA   ' Start in first user memory spot
	Movlw 156
	Movwf WORD_VARH
	Movlw 80
	Movwf WORD_VAR
F14_000039 equ $ ; in [WRITE_USERS_SD.INC] Repeat
bc@LL294
	Movlb 0
ram_bank = 0
F14_000040 equ $ ; in [WRITE_USERS_SD.INC] For Index = 0 To 3     'Repeat until all Tag digits are checked
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb297
	Movlb 0
ram_bank = 0
	Movlw 4
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb298
F14_000041 equ $ ; in [WRITE_USERS_SD.INC] TV1 = CRead Word_Var + Index
	Movlb 3
ram_bank = 3
	Movf INDEX,W
	Addwf WORD_VAR,W
	Movwf TBLPTRL,0
	Movlw 0
	Addwfc WORD_VARH,W
	Movwf TBLPTRLH,0
	Clrf EECON1,0
	Bsf EECON1,EEPGD,0
	Tblrd*
	Movff TABLAT,TV1
F14_000042 equ $ ; in [WRITE_USERS_SD.INC] SD_Write_Byte_To_File TV1 'append to file.
	Movlb 0
ram_bank = 0
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
	SD_WRITE_BYTE_TO_FILE TV1,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
 Variable PRM_1=2
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=TV1
F14_000043 equ $ ; in [WRITE_USERS_SD.INC] Next Index
	Movlb 3
ram_bank = 3
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb297
nx@lb298
F14_000044 equ $ ; in [WRITE_USERS_SD.INC] SD_Write_Byte_To_File ":"
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
	SD_WRITE_BYTE_TO_FILE 58,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
 Variable PRM_1=8
 Variable PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
 Variable SD_WRITE_BYTE_TO_FILE_LST_PRM=0
F14_000045 equ $ ; in [WRITE_USERS_SD.INC] Word_Var = Word_Var + 16
	Movlw 16
	Movlb 3
ram_bank = 3
	Addwf WORD_VAR,F
	Movlw 0
	Addwfc WORD_VARH,F
F14_000046 equ $ ; in [WRITE_USERS_SD.INC] Inc MyCount
	Incf MYCOUNT,F
F14_000047 equ $ ; in [WRITE_USERS_SD.INC] Print MyCount
	Movf MYCOUNT,W
	F@Call Print
F14_000048 equ $ ; in [WRITE_USERS_SD.INC] Until MyCount = Index2
	Movf MYCOUNT,W
	Subwf INDEX2,W
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to bc@LL294
bc@LL295
F14_000051 equ $ ; in [WRITE_USERS_SD.INC] Cls
	F@Call Lcd@Cls
F14_000052 equ $ ; in [WRITE_USERS_SD.INC] Print "Done Users"
	Movlw ((str@lb23 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb23 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F14_000053 equ $ ; in [WRITE_USERS_SD.INC] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F14_000054 equ $ ; in [WRITE_USERS_SD.INC] SD_CLOSE_FILE
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
	SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
 Variable MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F14_000055 equ $ ; in [WRITE_USERS_SD.INC] Return
	Return 0
F14_EOF equ $ ; WRITE_USERS_SD.INC
F15_SOF equ $ ; READ_MOD.INC
READ_MOD
F15_000003 equ $ ; in [READ_MOD.INC] For Index = 0 To 7
	Movlb 3
ram_bank = 3
	Clrf INDEX
fr@lb299
	Movlb 0
ram_bank = 0
	Movlw 8
	Movlb 3
ram_bank = 3
	Subwf INDEX,W
	Movlb 0
ram_bank = 0
	Btfsc STATUS,0,0
	Go@to nx@lb300
F15_000004 equ $ ; in [READ_MOD.INC] ModNum[Index] = CRead 0X9C40 + Index    'Read the Module number into Variable
	Movlw 64
	Movlb 3
ram_bank = 3
	Addwf INDEX,W
	Clrf TBLPTRLH,0
	Movwf TBLPTRL,0
	Movlw 156
	Addwfc TBLPTRLH,F,0
	Clrf EECON1,0
	Bsf EECON1,EEPGD,0
	Tblrd*
	Movff TABLAT,PBP#VAR1
	Lfsr 0,MODNUM
	Movf INDEX,W
	Movff PBP#VAR1,PLUSW0
F15_000005 equ $ ; in [READ_MOD.INC] Next
	Incf INDEX,F
	Movlb 0
ram_bank = 0
	Btfss STATUS,2,0
	Go@to fr@lb299
nx@lb300
F15_000006 equ $ ; in [READ_MOD.INC] Return
	Return 0
F15_EOF equ $ ; READ_MOD.INC
F16_SOF equ $ ; GOSLEEP.INC
GOSLEEP
F16_000003 equ $ ; in [GOSLEEP.INC] Cls
	F@Call Lcd@Cls
F16_000004 equ $ ; in [GOSLEEP.INC] Print At 1,1, "Going to sleep.."
	Movlw 128
	Movwf BPFH,0
	Movlw 128
	F@Call LCD@crs
	Movlw ((str@lb24 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb24 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F16_000005 equ $ ; in [GOSLEEP.INC] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F16_000006 equ $ ; in [GOSLEEP.INC] INTCON.4 = 1 'Allow a the pulse on PortB.0 to wake program from sleep
	Bsf INTCON,4,0
F16_000007 equ $ ; in [GOSLEEP.INC] INTCON.1 = 0  'Clear the interrupt flag for PortB.0
	Bcf INTCON,1,0
F16_000010 equ $ ; in [GOSLEEP.INC] Sleep    'Chip goes into low power until it is triggered by a High to Low pulse on PortB.0
	Sleep
F16_000011 equ $ ; in [GOSLEEP.INC] INTCON.4 = 0 'Stop any pulse from waking up program cause we just woke up
	Bcf INTCON,4,0
F16_000012 equ $ ; in [GOSLEEP.INC] Cls
	F@Call Lcd@Cls
F16_000013 equ $ ; in [GOSLEEP.INC] Print At 1,1, "I just woke up!!"
	Movlw 128
	Movwf BPFH,0
	Movlw 128
	F@Call LCD@crs
	Movlw ((str@lb25 >> 8) & 255)
	Movwf TBLPTRLH,0
	Movlw (str@lb25 & 255)
	Movwf TBLPTRL,0
	F@Call print@mstr
F16_000018 equ $ ; in [GOSLEEP.INC] Pause 2000
	Movlw 7
	Movwf PP1H,0
	Movlw 208
	F@Call dly@w
F16_000026 equ $ ; in [GOSLEEP.INC] GoTo GoSleep      'Go back to sleep
	F@Jump GOSLEEP
F16_EOF equ $ ; GOSLEEP.INC
	Org 40000
	DB 65,50,55,66,56,51
	DB 66,0
F1_EOF equ $ ; V4.0 RFID 2ND GENERATION.BAS
 LIST
;---------------------------------------------

CONFIG OSC = XT
CONFIG PWRT = ON
CONFIG BOREN = OFF
CONFIG MCLRE = ON
CONFIG PBADEN = OFF
CONFIG STVREN = OFF
CONFIG LVP = ON
	END

