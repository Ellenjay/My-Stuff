;----------------------------------------------------------
; Code Produced by the Proton 3.5.0.6
; Copyright Rosetta Technologies/Crownhill Associates Ltd
; Written by Les Johnson. June 2010
;----------------------------------------------------------
;
#DEFINE CONFIG_REQ 1
 LIST  P = 18F4525, F = INHX32, W = 2, X = ON, R = DEC, MM = ON, N = 0, C = 255, T=ON
PORTA EQU 0X0F80
PORTB EQU 0X0F81
PORTC EQU 0X0F82
PORTD EQU 0X0F83
PORTE EQU 0X0F84
LATA EQU 0X0F89
LATB EQU 0X0F8A
LATC EQU 0X0F8B
LATD EQU 0X0F8C
LATE EQU 0X0F8D
DDRA EQU 0X0F92
TRISA EQU 0X0F92
DDRB EQU 0X0F93
TRISB EQU 0X0F93
DDRC EQU 0X0F94
TRISC EQU 0X0F94
DDRD EQU 0X0F95
TRISD EQU 0X0F95
DDRE EQU 0X0F96
TRISE EQU 0X0F96
OSCTUNE EQU 0X0F9B
PIE1 EQU 0X0F9D
PIR1 EQU 0X0F9E
IPR1 EQU 0X0F9F
PIE2 EQU 0X0FA0
PIR2 EQU 0X0FA1
IPR2 EQU 0X0FA2
EECON1 EQU 0X0FA6
EECON2 EQU 0X0FA7
EEDATL EQU 0X0FA8
EEDATA EQU 0X0FA8
EEADR EQU 0X0FA9
EEADRH EQU 0X0FAA
RCSTA EQU 0X0FAB
TXSTA EQU 0X0FAC
TXREG EQU 0X0FAD
RCREG EQU 0X0FAE
SPBRG EQU 0X0FAF
SPBRGH EQU 0X0FB0
T3CON EQU 0X0FB1
TMR3L EQU 0X0FB2
TMR3LH EQU 0X0FB3
TMR3H EQU 0X0FB3
CMCON EQU 0X0FB4
CVRCON EQU 0X0FB5
ECCP1AS EQU 0X0FB6
ECCPAS EQU 0X0FB6
PWM1CON EQU 0X0FB7
BAUDCON EQU 0X0FB8
BAUDCTL EQU 0X0FB8
CCP2CON EQU 0X0FBA
CCPR2 EQU 0X0FBB
CCPR2L EQU 0X0FBB
CCPR2LH EQU 0X0FBC
CCPR2H EQU 0X0FBC
CCP1CON EQU 0X0FBD
CCPR1 EQU 0X0FBE
CCPR1L EQU 0X0FBE
CCPR1LH EQU 0X0FBF
CCPR1H EQU 0X0FBF
ADCON2 EQU 0X0FC0
ADCON1 EQU 0X0FC1
ADCON0 EQU 0X0FC2
ADRES EQU 0X0FC3
ADRESL EQU 0X0FC3
ADRESLH EQU 0X0FC4
ADRESH EQU 0X0FC4
SSPCON2 EQU 0X0FC5
SSPCON1 EQU 0X0FC6
SSPSTAT EQU 0X0FC7
SSPADD EQU 0X0FC8
SSPBUF EQU 0X0FC9
T2CON EQU 0X0FCA
PR2 EQU 0X0FCB
TMR2 EQU 0X0FCC
T1CON EQU 0X0FCD
TMR1L EQU 0X0FCE
TMR1LH EQU 0X0FCF
TMR1H EQU 0X0FCF
RCON EQU 0X0FD0
WDTCON EQU 0X0FD1
HLVDCON EQU 0X0FD2
LVDCON EQU 0X0FD2
OSCCON EQU 0X0FD3
DEBUG EQU 0X0FD4
T0CON EQU 0X0FD5
TMR0L EQU 0X0FD6
TMR0LH EQU 0X0FD7
TMR0H EQU 0X0FD7
STATUS EQU 0X0FD8
FSR2L EQU 0X0FD9
FSR2LH EQU 0X0FDA
FSR2H EQU 0X0FDA
PLUSW2 EQU 0X0FDB
PREINC2 EQU 0X0FDC
POSTDEC2 EQU 0X0FDD
POSTINC2 EQU 0X0FDE
INDF2 EQU 0X0FDF
BSR EQU 0X0FE0
FSR1L EQU 0X0FE1
FSR1LH EQU 0X0FE2
FSR1H EQU 0X0FE2
PLUSW1 EQU 0X0FE3
PREINC1 EQU 0X0FE4
POSTDEC1 EQU 0X0FE5
POSTINC1 EQU 0X0FE6
INDF1 EQU 0X0FE7
WREG EQU 0X0FE8
FSR0L EQU 0X0FE9
FSR0LH EQU 0X0FEA
FSR0H EQU 0X0FEA
PLUSW0 EQU 0X0FEB
PREINC0 EQU 0X0FEC
POSTDEC0 EQU 0X0FED
POSTINC0 EQU 0X0FEE
INDF0 EQU 0X0FEF
INTCON3 EQU 0X0FF0
INTCON2 EQU 0X0FF1
INTCON EQU 0X0FF2
PRODL EQU 0X0FF3
PRODLH EQU 0X0FF4
PRODH EQU 0X0FF4
TABLAT EQU 0X0FF5
TBLPTRL EQU 0X0FF6
TBLPTRLH EQU 0X0FF7
TBLPTRH EQU 0X0FF7
TBLPTRU EQU 0X0FF8
TBLPTRLHH EQU 0X0FF8
PC EQU 0X0FF9
PCL EQU 0X0FF9
PCLATH EQU 0X0FFA
PCLATU EQU 0X0FFB
STKPTR EQU 0X0FFC
TOS EQU 0X0FFD
TOSL EQU 0X0FFD
TOSLH EQU 0X0FFE
TOSH EQU 0X0FFE
TOSU EQU 0X0FFF
_I2C_SCL_PORT = TRISC
_I2C_SCL_PIN = 3
_I2C_SDA_PORT = TRISC
_I2C_SDA_PIN = 4
RA0=0
RA1=1
RA2=2
RA3=3
RA4=4
RA5=5
RA6=6
RA7=7
T0CKI=4
AN4=5
SS=5
NOT_SS=5
LVDIN=5
HLVDIN=5
RB0=0
RB1=1
RB2=2
RB3=3
RB4=4
RB5=5
RB6=6
RB7=7
INT0=0
INT1=1
INT2=2
CCP2_PORTB=3
KBI0=4
KBI1=5
KBI2=6
KBI3=7
AN12=0
AN10=1
AN8=2
AN9=3
AN11=4
PGM=5
PGC=6
PGD=7
RC0=0
RC1=1
RC2=2
RC3=3
RC4=4
RC5=5
RC6=6
RC7=7
T1OSO=0
T1OSI=1
CCP1=2
SCK=3
SDI=4
SDO=5
TX=6
RX=7
T13CKI=0
CCP2_PORTC=1
SCL=3
SDA=4
CK=6
T1CKI=0
RD0=0
RD1=1
RD2=2
RD3=3
RD4=4
RD5=5
RD6=6
RD7=7
PSP0=0
PSP1=1
PSP2=2
PSP3=3
PSP4=4
PSP5=5
PSP6=6
PSP7=7
P1B=5
P1C=6
P1D=7
RE0=0
RE1=1
RE2=2
RE3=3
RD=0
PP_RD=0
WR=1
PP_WR=1
CS=2
MCLR=3
NOT_RD=0
NOT_WR=1
NOT_CS=2
NOT_MCLR=3
AN5=0
AN6=1
AN7=2
VPP=3
LATA0=0
LATA1=1
LATA2=2
LATA3=3
LATA4=4
LATA5=5
LATA6=6
LATA7=7
LATB0=0
LATB1=1
LATB2=2
LATB3=3
LATB4=4
LATB5=5
LATB6=6
LATB7=7
LATC0=0
LATC1=1
LATC2=2
LATC3=3
LATC4=4
LATC5=5
LATC6=6
LATC7=7
LATD0=0
LATD1=1
LATD2=2
LATD3=3
LATD4=4
LATD5=5
LATD6=6
LATD7=7
LATE0=0
LATE1=1
LATE2=2
RA0=0
RA1=1
RA2=2
RA3=3
RA4=4
RA5=5
RA6=6
RA7=7
TRISA0=0
TRISA1=1
TRISA2=2
TRISA3=3
TRISA4=4
TRISA5=5
TRISA6=6
TRISA7=7
RB0=0
RB1=1
RB2=2
RB3=3
RB4=4
RB5=5
RB6=6
RB7=7
TRISB0=0
TRISB1=1
TRISB2=2
TRISB3=3
TRISB4=4
TRISB5=5
TRISB6=6
TRISB7=7
RC0=0
RC1=1
RC2=2
RC3=3
RC4=4
RC5=5
RC6=6
RC7=7
TRISC0=0
TRISC1=1
TRISC2=2
TRISC3=3
TRISC4=4
TRISC5=5
TRISC6=6
TRISC7=7
RD0=0
RD1=1
RD2=2
RD3=3
RD4=4
RD5=5
RD6=6
RD7=7
TRISD0=0
TRISD1=1
TRISD2=2
TRISD3=3
TRISD4=4
TRISD5=5
TRISD6=6
TRISD7=7
RE0=0
RE1=1
RE2=2
RE3=3
TRISE0=0
TRISE1=1
TRISE2=2
TRISE4=4
TRISE5=5
TRISE6=6
TRISE7=7
PSPMODE=4
IBOV=5
OBF=6
IBF=7
TUN0=0
TUN1=1
TUN2=2
TUN3=3
TUN4=4
PLLEN=6
INTSRC=7
TMR1IE=0
TMR2IE=1
CCP1IE=2
SSPIE=3
TXIE=4
RCIE=5
ADIE=6
PSPIE=7
TMR1IF=0
TMR2IF=1
CCP1IF=2
SSPIF=3
TXIF=4
PP_TXIF=4
RCIF=5
PP_RCIF=5
ADIF=6
PSPIF=7
TMR1IP=0
TMR2IP=1
CCP1IP=2
SSPIP=3
TXIP=4
RCIP=5
ADIP=6
PSPIP=7
CCP2IE=0
TMR3IE=1
LVDIE=2
BCLIE=3
EEIE=4
CMIE=6
OSCFIE=7
HLVDIE=2
CCP2IF=0
TMR3IF=1
LVDIF=2
BCLIF=3
EEIF=4
CMIF=6
OSCFIF=7
HLVDIF=2
CCP2IP=0
TMR3IP=1
LVDIP=2
BCLIP=3
EEIP=4
CMIP=6
OSCFIP=7
HLVDIP=2
RD=0
PP_RD=0
WR=1
PP_WR=1
WREN=2
PP_WREN=2
WRERR=3
FREE=4
CFGS=6
EEPGD=7
PP_EEPGD=7
RX9D=0
OERR=1
PP_OERR=1
FERR=2
ADEN=3
CREN=4
PP_CREN=4
SREN=5
RX9=6
SPEN=7
ADDEN=3
TX9D=0
TRMT=1
BRGH=2
SENDB=3
SYNC=4
TXEN=5
TX9=6
CSRC=7
TMR3ON=0
TMR3CS=1
T3SYNC=2
T3CCP1=3
T3CKPS0=4
T3CKPS1=5
T3CCP2=6
RD16=7
NOT_T3SYNC=2
CM0=0
CM1=1
CM2=2
CIS=3
C1INV=4
C2INV=5
C1OUT=6
C2OUT=7
CVR0=0
CVR1=1
CVR2=2
CVR3=3
CVRSS=4
CVRR=5
CVROE=6
CVREN=7
PSSBD0=0
PSSBD1=1
PSSAC0=2
PSSAC1=3
ECCPAS0=4
ECCPAS1=5
ECCPAS2=6
ECCPASE=7
PSSBD0=0
PSSBD1=1
PSSAC0=2
PSSAC1=3
ECCPAS0=4
ECCPAS1=5
ECCPAS2=6
ECCPASE=7
PDC0=0
PDC1=1
PDC2=2
PDC3=3
PDC4=4
PDC5=5
PDC6=6
PRSEN=7
ABDEN=0
WUE=1
BRG16=3
SCKP=4
RCIDL=6
ABDOVF=7
TXCKP=4
RXDTP=5
RCMT=6
ABDEN=0
WUE=1
BRG16=3
SCKP=4
RCIDL=6
ABDOVF=7
TXCKP=4
RXDTP=5
RCMT=6
CCP2M0=0
CCP2M1=1
CCP2M2=2
CCP2M3=3
CCP2Y=4
CCP2X=5
DC2B0=4
DC2B1=5
CCP1M0=0
CCP1M1=1
CCP1M2=2
CCP1M3=3
CCP1Y=4
CCP1X=5
DC1B0=4
DC1B1=5
P1M0=6
P1M1=7
ADCS0=0
ADCS1=1
ADCS2=2
ACQT0=3
ACQT1=4
ACQT2=5
ADFM=7
PCFG0=0
PCFG1=1
PCFG2=2
PCFG3=3
VCFG0=4
VCFG1=5
ADON=0
PP_ADON=0
GO=1
CHS0=2
CHS1=3
CHS2=4
CHS3=5
DONE=1
NOT_DONE=1
GO_DONE=1
PP_GO_DONE=1
SEN=0
PP_SEN=0
RSEN=1
PP_RSEN=1
PEN=2
PP_PEN=2
RCEN=3
PP_RCEN=3
ACKEN=4
PP_ACKEN=4
ACKDT=5
PP_ACKDT=5
ACKSTAT=6
GCEN=7
SSPM0=0
SSPM1=1
SSPM2=2
SSPM3=3
CKP=4
SSPEN=5
SSPOV=6
WCOL=7
BF=0
UA=1
R=2
S=3
P=4
D=5
CKE=6
SMP=7
NOT_W=2
NOT_A=5
R_W=2
PP_R_W=2
D_A=5
NOT_WRITE=2
NOT_ADDRESS=5
T2CKPS0=0
PP_T2CKPS0=0
T2CKPS1=1
PP_T2CKPS1=1
TMR2ON=2
PP_TMR2ON=2
T2OUTPS0=3
T2OUTPS1=4
T2OUTPS2=5
T2OUTPS3=6
TOUTPS0=3
TOUTPS1=4
TOUTPS2=5
TOUTPS3=6
TMR1ON=0
TMR1CS=1
T1SYNC=2
T1OSCEN=3
T1CKPS0=4
T1CKPS1=5
T1RUN=6
RD16=7
NOT_T1SYNC=2
BOR=0
POR=1
PD=2
TO=3
RI=4
SBOREN=6
IPEN=7
NOT_BOR=0
NOT_POR=1
NOT_PD=2
NOT_TO=3
NOT_RI=4
SWDTEN=0
SWDTE=0
LVDL0=0
LVDL1=1
LVDL2=2
LVDL3=3
LVDEN=4
IRVST=5
LVV0=0
LVV1=1
LVV2=2
LVV3=3
BGST=5
HLVDL0=0
HLVDL1=1
HLVDL2=2
HLVDL3=3
HLVDEN=4
VDIRMAG=7
IVRST=5
LVDL0=0
LVDL1=1
LVDL2=2
LVDL3=3
LVDEN=4
IRVST=5
LVV0=0
LVV1=1
LVV2=2
LVV3=3
BGST=5
HLVDL0=0
HLVDL1=1
HLVDL2=2
HLVDL3=3
HLVDEN=4
VDIRMAG=7
IVRST=5
SCS0=0
SCS1=1
IOFS=2
OSTS=3
IRCF0=4
IRCF1=5
IRCF2=6
IDLEN=7
FLTS=2
T0PS0=0
T0PS1=1
T0PS2=2
PSA=3
T0SE=4
T0CS=5
T016BIT=6
TMR0ON=7
T08BIT=6
C=0
DC=1
Z=2
OV=3
N=4
INT1F=0
INT2F=1
INT1E=3
INT2E=4
INT1P=6
INT2P=7
INT1IF=0
INT2IF=1
INT1IE=3
INT2IE=4
INT1IP=6
INT2IP=7
RBIP=0
TMR0IP=2
INTEDG2=4
INTEDG1=5
INTEDG0=6
RBPU=7
NOT_RBPU=7
RBIF=0
INT0F=1
TMR0IF=2
RBIE=3
INT0E=4
TMR0IE=5
PEIE=6
GIE=7
INT0IF=1
T0IF=2
INT0IE=4
T0IE=5
GIEL=6
GIEH=7
STKPTR0=0
STKPTR1=1
STKPTR2=2
STKPTR3=3
STKPTR4=4
STKUNF=6
STKOVF=7
SP0=0
SP1=1
SP2=2
SP3=3
SP4=4
STKFUL=7
  __MAXRAM  0X0FFF
  __BADRAM  0X0F85-0X0F88
  __BADRAM  0X0F8E-0X0F91
  __BADRAM  0X0F97-0X0F9A
  __BADRAM  0X0F9C
  __BADRAM  0X0FA3-0X0FA5
  __BADRAM  0X0FB9
CONFIG1H EQU 0X300001
CONFIG2L EQU 0X300002
CONFIG2H EQU 0X300003
CONFIG3H EQU 0X300005
CONFIG4L EQU 0X300006
CONFIG5L EQU 0X300008
CONFIG5H EQU 0X300009
CONFIG6L EQU 0X30000A
CONFIG6H EQU 0X30000B
CONFIG7L EQU 0X30000C
CONFIG7H EQU 0X30000D
OSC_LP_1 EQU 0XF0
OSC_XT_1 EQU 0XF1
OSC_HS_1 EQU 0XF2
OSC_RC_1 EQU 0XF3
OSC_EC_1 EQU 0XF4
OSC_ECIO6_1 EQU 0XF5
OSC_HSPLL_1 EQU 0XF6
OSC_RCIO6_1 EQU 0XF7
OSC_INTIO67_1 EQU 0XF8
OSC_INTIO7_1 EQU 0XF9
FCMEN_OFF_1 EQU 0XBF
FCMEN_ON_1 EQU 0XFF
IESO_OFF_1 EQU 0X7F
IESO_ON_1 EQU 0XFF
PWRT_ON_2 EQU 0XFE
PWRT_OFF_2 EQU 0XFF
BOREN_OFF_2 EQU 0XF9
BOREN_ON_2 EQU 0XFB
BOREN_NOSLP_2 EQU 0XFD
BOREN_SBORDIS_2 EQU 0XFF
BORV_0_2 EQU 0XE7
BORV_1_2 EQU 0XEF
BORV_2_2 EQU 0XF7
BORV_3_2 EQU 0XFF
WDT_OFF_2 EQU 0XFE
WDT_ON_2 EQU 0XFF
WDTPS_1_2 EQU 0XE1
WDTPS_2_2 EQU 0XE3
WDTPS_4_2 EQU 0XE5
WDTPS_8_2 EQU 0XE7
WDTPS_16_2 EQU 0XE9
WDTPS_32_2 EQU 0XEB
WDTPS_64_2 EQU 0XED
WDTPS_128_2 EQU 0XEF
WDTPS_256_2 EQU 0XF1
WDTPS_512_2 EQU 0XF3
WDTPS_1024_2 EQU 0XF5
WDTPS_2048_2 EQU 0XF7
WDTPS_4096_2 EQU 0XF9
WDTPS_8192_2 EQU 0XFB
WDTPS_16384_2 EQU 0XFD
WDTPS_32768_2 EQU 0XFF
MCLRE_OFF_3 EQU 0X7F
MCLRE_ON_3 EQU 0XFF
LPT1OSC_OFF_3 EQU 0XFB
LPT1OSC_ON_3 EQU 0XFF
PBADEN_OFF_3 EQU 0XFD
PBADEN_ON_3 EQU 0XFF
CCP2MX_PORTBE_3 EQU 0XFE
CCP2MX_PORTC_3 EQU 0XFF
STVREN_OFF_4 EQU 0XFE
STVREN_ON_4 EQU 0XFF
LVP_OFF_4 EQU 0XFB
LVP_ON_4 EQU 0XFF
XINST_OFF_4 EQU 0XBF
XINST_ON_4 EQU 0XFF
DEBUG_ON_4 EQU 0X7F
DEBUG_OFF_4 EQU 0XFF
CP0_ON_5 EQU 0XFE
CP0_OFF_5 EQU 0XFF
CP1_ON_5 EQU 0XFD
CP1_OFF_5 EQU 0XFF
CP2_ON_5 EQU 0XFB
CP2_OFF_5 EQU 0XFF
CPB_ON_5 EQU 0XBF
CPB_OFF_5 EQU 0XFF
CPD_ON_5 EQU 0X7F
CPD_OFF_5 EQU 0XFF
WRT0_ON_6 EQU 0XFE
WRT0_OFF_6 EQU 0XFF
WRT1_ON_6 EQU 0XFD
WRT1_OFF_6 EQU 0XFF
WRT2_ON_6 EQU 0XFB
WRT2_OFF_6 EQU 0XFF
WRTB_ON_6 EQU 0XBF
WRTB_OFF_6 EQU 0XFF
WRTC_ON_6 EQU 0XDF
WRTC_OFF_6 EQU 0XFF
WRTD_ON_6 EQU 0X7F
WRTD_OFF_6 EQU 0XFF
EBTR0_ON_7 EQU 0XFE
EBTR0_OFF_7 EQU 0XFF
EBTR1_ON_7 EQU 0XFD
EBTR1_OFF_7 EQU 0XFF
EBTR2_ON_7 EQU 0XFB
EBTR2_OFF_7 EQU 0XFF
EBTRB_ON_7 EQU 0XBF
EBTRB_OFF_7 EQU 0XFF
DEVID1 EQU 0X3FFFFE
DEVID2 EQU 0X3FFFFF
IDLOC0 EQU 0X200000
__IDLOC0 EQU 0X200000
IDLOC1 EQU 0X200001
__IDLOC1 EQU 0X200001
IDLOC2 EQU 0X200002
__IDLOC2 EQU 0X200002
IDLOC3 EQU 0X200003
__IDLOC3 EQU 0X200003
IDLOC4 EQU 0X200004
__IDLOC4 EQU 0X200004
IDLOC5 EQU 0X200005
__IDLOC5 EQU 0X200005
IDLOC6 EQU 0X200006
__IDLOC6 EQU 0X200006
IDLOC7 EQU 0X200007
__IDLOC7 EQU 0X200007
#DEFINE __18F4525 1
#DEFINE XTAL 4
#DEFINE _CORE 16
#DEFINE _MAXRAM 3968
#DEFINE _RAM_END 3968
#DEFINE _MAXMEM 49152
#DEFINE _ADC 13
#DEFINE _ADC_RES 10
#DEFINE _EEPROM 1024
#DEFINE RAM_BANKS 15
#DEFINE _USART 1
#DEFINE _USB 0
#DEFINE _USB#RAM_START 0
#DEFINE _FLASH 1
#DEFINE _CWRITE_BLOCK 64
#DEFINE BANK0_START 128
#DEFINE BANK0_END 255
#DEFINE BANK1_START 256
#DEFINE BANK1_END 511
#DEFINE BANK2_START 512
#DEFINE BANK2_END 767
#DEFINE BANK3_START 768
#DEFINE BANK3_END 1023
#DEFINE BANK4_START 1024
#DEFINE BANK4_END 1279
#DEFINE BANK5_START 1280
#DEFINE BANK5_END 1535
#DEFINE BANK6_START 1536
#DEFINE BANK6_END 1791
#DEFINE BANK7_START 1792
#DEFINE BANK7_END 2047
#DEFINE BANK8_START 2048
#DEFINE BANK8_END 2303
#DEFINE BANK9_START 2304
#DEFINE BANK9_END 2559
#DEFINE BANK10_START 2560
#DEFINE BANK10_END 2815
#DEFINE BANK11_START 2816
#DEFINE BANK11_END 3071
#DEFINE BANK12_START 3072
#DEFINE BANK12_END 3327
#DEFINE BANK13_START 3328
#DEFINE BANK13_END 3583
#DEFINE BANK14_START 3584
#DEFINE BANK14_END 3839
#DEFINE BANKA_START 0
#DEFINE BANKA_END 127
#DEFINE _SYSTEM_VARIABLE_COUNT 54
RAM_BANK = 0
#DEFINE LCD#DTPORT PORTD
#DEFINE LCD#DTPIN 0
#DEFINE LCD#RSPORT PORTD
#DEFINE LCD#RSPIN 7
#DEFINE LCD#ENPORT PORTD
#DEFINE LCD#ENPIN 6
#DEFINE LCD#INTERFACE 4
#DEFINE LCD#LINES 2
#DEFINE LCD#TYPE 0
#DEFINE CLRW CLRF WREG
#DEFINE NEGW NEGF WREG
#DEFINE SKPC BTFSS STATUS,0
#DEFINE SKPNC BTFSC STATUS,0
#DEFINE CLRC BCF STATUS,0
#DEFINE SETC BSF STATUS,0
#DEFINE SKPZ BTFSS STATUS,2
#DEFINE SKPNZ BTFSC STATUS,2
#DEFINE CLRZ BCF STATUS,2
#DEFINE SETZ BSF STATUS,2
#DEFINE SD_INIT_MSSP#REQ 1
#DEFINE SD_OPEN_FILE#REQ 1
#DEFINE SD_READ_BYTE_FROM_FILE#REQ 1
#DEFINE SD_INIT_FS_MSSP#REQ 1
#DEFINE SD_CHECK_FOR_FILE#REQ 1
#DEFINE SD_CLOSE_FILE#REQ 1
#DEFINE SD_NEW_FILE#REQ 1
#DEFINE SD_APPEND_FILE#REQ 1
#DEFINE SD_DELETE_FILE#REQ 1
#DEFINE SD_WRITE_BYTE_TO_FILE#REQ 1
#DEFINE SD_WRITE_STRING_TO_FILE#REQ 1
MOVFW MACRO PVARIN
    MOVF PVARIN,W
    ENDM
RLF MACRO PVARIN,PDESTINATION
    RLCF PVARIN,PDESTINATION
    ENDM
RRF MACRO PVARIN,PDESTINATION
    RRCF PVARIN,PDESTINATION
    ENDM
JUMP MACRO PLABEL
    GOTO PLABEL
    ENDM
F@CALL MACRO PDESTINATION
IF (PDESTINATION < 1)
    CALL PDESTINATION
ELSE
IF (PDESTINATION > $)
    CALL PDESTINATION
ELSE
IF (PDESTINATION < ($ - 0X03FF))
    CALL PDESTINATION
ELSE
    RCALL PDESTINATION
ENDIF
ENDIF
ENDIF
    ENDM
F@JUMP MACRO PDESTINATION
IFDEF WATCHDOG_REQ
IF ($ == PDESTINATION)
    CLRWDT
ENDIF
ENDIF
IF (PDESTINATION < 1)
    GOTO PDESTINATION
ELSE
IF ((PDESTINATION) > $)
    GOTO PDESTINATION
ELSE
IF ((PDESTINATION) < ($ - 0X03FF))
    GOTO PDESTINATION
ELSE
    BRA PDESTINATION
ENDIF
ENDIF
ENDIF
    ENDM
IFDEF WATCHDOG_REQ
    CHK@SLF MACRO PDESTINATION
IF ($ == PDESTINATION)
    CLRWDT
ENDIF
    ENDM
ENDIF
G@OTO MACRO PDESTINATION
IF (PDESTINATION < 1)
    BTFSC STATUS,OV
    GOTO PDESTINATION
ELSE
IF (PDESTINATION > $)
    BTFSC STATUS,OV
    GOTO PDESTINATION
ELSE
IF (PDESTINATION < ($ - 127))
    BTFSC STATUS,OV
    GOTO PDESTINATION
ELSE
    BOV PDESTINATION
ENDIF
ENDIF
ENDIF
    ENDM
GO@TO MACRO PDESTINATION
IF (PDESTINATION < 1)
    GOTO PDESTINATION
ELSE
IF (PDESTINATION > $)
    GOTO PDESTINATION
ELSE
IF (PDESTINATION < ($ - 0X03FF))
    GOTO PDESTINATION
ELSE
    BRA PDESTINATION
ENDIF
ENDIF
ENDIF
    ENDM
S@B MACRO PVARIN
IF ((PVARIN > BANKA_END) & (PVARIN < 0X0F80))
IF ((PVARIN & 0X0F00) != (RAM_BANK << 8))
    MOVLB HIGH (PVARIN)
    RAM_BANK = (PVARIN >> 8)
ENDIF
ENDIF
    ENDM
R@B MACRO
IF(RAM_BANK != 0)
    MOVLB 0
    RAM_BANK = 0
ENDIF
    ENDM
WREG_BYTE MACRO PBYTEOUT
    MOVFF WREG,PBYTEOUT
    ENDM
WREG_BIT MACRO PVAROUT,PBITOUT
    S@B PVAROUT
    BTFSC WREG,0
    BSF PVAROUT,PBITOUT
    BTFSS WREG,0
    BCF PVAROUT,PBITOUT
    R@B
    ENDM
WREG_WORD MACRO PWORDOUT
    MOVFF WREG,PWORDOUT
    MOVLW 0
    MOVFF WREG,PWORDOUT+1
    ENDM
WREG_DWORD MACRO PDWORDOUT
    MOVFF WREG,PDWORDOUT
    MOVLW 0
    MOVFF WREG,PDWORDOUT+3
    MOVFF WREG,PDWORDOUT+2
    MOVFF WREG,PDWORDOUT+1
    ENDM
NUM_SFR MACRO PNUMIN,PSFROUT
    MOVLW PNUMIN
    MOVWF PSFROUT
    ENDM
BYTE_WREG MACRO PBYTEIN
    MOVFF PBYTEIN,WREG
    ENDM
NUM_WREG MACRO PNUMIN
    MOVLW (PNUMIN & 255)
    ENDM
NUM_BYTE MACRO PNUMIN,PBYTEOUT
    MOVLW (PNUMIN & 255)
    MOVFF WREG,PBYTEOUT
    ENDM
NUM_BIT MACRO PNUMIN,PVAROUT,PBITOUT
    S@B PVAROUT
IF((PNUMIN & 1) == 1)
    BSF PVAROUT,PBITOUT
ELSE
    BCF PVAROUT,PBITOUT
ENDIF
    R@B
    ENDM
NUM_WORD MACRO PNUMIN,PWORDOUT
IFDEF _USELFSR
IF(PWORDOUT == FSR0L)
    LFSR 0,PNUMIN
    EXITM
ENDIF
IF(PWORDOUT == FSR1L)
    LFSR 1,PNUMIN
    EXITM
ENDIF
IF(PWORDOUT == FSR2L)
    LFSR 2,PNUMIN
    EXITM
ENDIF
ENDIF
    S@B PWORDOUT
    MOVLW (PNUMIN & 255)
    MOVWF PWORDOUT
    S@B PWORDOUT+1
    MOVLW HIGH (PNUMIN)
    MOVWF PWORDOUT+1
    R@B
    ENDM
NUM_DWORD MACRO PNUMIN,PDWORDOUT
    S@B PDWORDOUT
    MOVLW LOW (PNUMIN)
    MOVWF PDWORDOUT
    S@B PDWORDOUT+1
    MOVLW HIGH (PNUMIN)
    MOVWF PDWORDOUT+1
    S@B PDWORDOUT+2
    MOVLW ((PNUMIN >> 16) & 255)
    MOVWF PDWORDOUT+2
    S@B PDWORDOUT+3
    MOVLW ((PNUMIN >> 24) & 255)
    MOVWF PDWORDOUT+3
    R@B
    ENDM
BIT_WREG MACRO PVARIN,PBITIN
    S@B PVARIN
    CLRW
    BTFSC PVARIN,PBITIN
    MOVLW 1
    R@B
    ENDM
BIT_BYTE MACRO PVARIN,PBITIN,PBYTEOUT
    S@B PVARIN
    CLRW
    BTFSC PVARIN,PBITIN
    MOVLW 1
    S@B PBYTEOUT
    MOVWF PBYTEOUT
    R@B
    ENDM
BIT_BIT MACRO PVARIN,PBITIN,PVAROUT,PBITOUT
IF ((PVARIN & 0X0F00) == (PVAROUT & 0X0F00))
    S@B PVARIN
    BTFSC PVARIN,PBITIN
    BSF PVAROUT,PBITOUT
    BTFSS PVARIN,PBITIN
    BCF PVAROUT,PBITOUT
ELSE
IF ((PVARIN <= BANKA_END) | (PVARIN >= 0X0F80))
    S@B PVAROUT
    BTFSC PVARIN,PBITIN
    BSF PVAROUT,PBITOUT
    BTFSS PVARIN,PBITIN
    BCF PVAROUT,PBITOUT
ELSE
IF ((PVAROUT <= BANKA_END) | (PVAROUT >= 0X0F80))
    S@B PVARIN
    BTFSC PVARIN,PBITIN
    BSF PVAROUT,PBITOUT
    BTFSS PVARIN,PBITIN
    BCF PVAROUT,PBITOUT
ELSE
    S@B PVARIN
    CLRDC
    BTFSC PVARIN,PBITIN
    SETDC
    S@B PVAROUT
    SKPNDC
    BSF PVAROUT,PBITOUT
    SKPDC
    BCF PVAROUT,PBITOUT
ENDIF
ENDIF
ENDIF
    R@B
    ENDM
BIT_WORD MACRO PVARIN,PBITIN,PWORDOUT
    S@B PWORDOUT+1
    CLRF PWORDOUT+1
    BIT_BYTE PVARIN,PBITIN,PWORDOUT
    ENDM
BIT_DWORD MACRO PVARIN,PBITIN,PDWORDOUT
    S@B PDWORDOUT+3
    CLRF PDWORDOUT+3
    S@B PDWORDOUT+2
    CLRF PDWORDOUT+2
    S@B PDWORDOUT+1
    CLRF PDWORDOUT+1
    BIT_BYTE PVARIN,PBITIN,PDWORDOUT
    ENDM
WORD_WREG MACRO PWORDIN
    BYTE_WREG PWORDIN
    ENDM
WORD_BYTE MACRO PWORDIN,PBYTEOUT
    BYTE_BYTE PWORDIN,PBYTEOUT
    ENDM
WORD_BIT MACRO PWORDIN,PVAROUT,PBITOUT
    BYTE_BIT PWORDIN, PVAROUT, PBITOUT
    ENDM
WORD_WORD MACRO PWORDIN,PWORDOUT
    MOVFF PWORDIN+1,PWORDOUT+1
    MOVFF PWORDIN,PWORDOUT
    ENDM
WORD_DWORD MACRO PWORDIN,PDWORDOUT
    MOVLW 0
    MOVFF WREG,PDWORDOUT+3
    MOVFF WREG,PDWORDOUT+2
    WORD_WORD PWORDIN,PDWORDOUT
    ENDM
BYTE_BYTE MACRO PBYTEIN,PBYTEOUT
    MOVFF PBYTEIN,PBYTEOUT
    ENDM
BYTE_WORD MACRO PBYTEIN,PWORDOUT
    MOVLW 0
    MOVFF WREG,PWORDOUT+1
    BYTE_BYTE PBYTEIN,PWORDOUT
    ENDM
BYTE_DWORD MACRO PBYTEIN,PDWORDOUT
    MOVLW 0
    MOVFF WREG,PDWORDOUT+3
    MOVFF WREG,PDWORDOUT+2
    MOVFF WREG,PDWORDOUT+1
    BYTE_BYTE PBYTEIN,PDWORDOUT
    ENDM
BYTE_BIT MACRO PBYTEIN,PVAROUT,PBITOUT
IF ((PBYTEIN & 0X0F00) == (PVAROUT & 0X0F00))
    S@B PBYTEIN
    BTFSC PBYTEIN,0
    BSF PVAROUT,PBITOUT
    BTFSS PBYTEIN,0
    BCF PVAROUT,PBITOUT
ELSE
IF ((PBYTEIN <= BANKA_END) | (PBYTEIN >= 0X0F80))
    S@B PVAROUT
    BTFSC PBYTEIN,0
    BSF PVAROUT,PBITOUT
    BTFSS PBYTEIN,0
    BCF PVAROUT,PBITOUT
ELSE
IF ((PVAROUT <= BANKA_END) | (PVAROUT >= 0X0F80))
    S@B PBYTEIN
    BTFSC PBYTEIN,0
    BSF PVAROUT,PBITOUT
    BTFSS PBYTEIN,0
    BCF PVAROUT,PBITOUT
ELSE
    S@B PBYTEIN
    RRF PBYTEIN,W
    S@B PVAROUT
    SKPNC
    BSF PVAROUT,PBITOUT
    SKPC
    BCF PVAROUT,PBITOUT
ENDIF
ENDIF
ENDIF
    R@B
    ENDM
DWORD_WREG MACRO PDWORDIN
    BYTE_WREG PDWORDIN
    ENDM
DWORD_BYTE MACRO PDWORDIN,PBYTEOUT
    BYTE_BYTE PDWORDIN,PBYTEOUT
    ENDM
DWORD_WORD MACRO PDWORDIN,PWORDOUT
    MOVFF PDWORDIN+1,PWORDOUT+1
    MOVFF PDWORDIN,PWORDOUT
    ENDM
DWORD_DWORD MACRO PDWORDIN,PDWORDOUT
    MOVFF PDWORDIN+3,PDWORDOUT+3
    MOVFF PDWORDIN+2,PDWORDOUT+2
    MOVFF PDWORDIN+1,PDWORDOUT+1
    MOVFF PDWORDIN,PDWORDOUT
    ENDM
DWORD_BIT MACRO PDWORDIN,PVAROUT,PBITOUT
    BYTE_BIT PDWORDIN,PVAROUT,PBITOUT
    ENDM
NUM_FLOAT MACRO PNUMIN,PFLOATOUT
    NUM_BYTE PNUMIN,PFLOATOUT+3
    NUM_BYTE ((PNUMIN >> 8) & 255),PFLOATOUT+2
    NUM_BYTE ((PNUMIN >> 16) & 255),PFLOATOUT+1
    NUM_BYTE ((PNUMIN >> 24) & 255),PFLOATOUT
    ENDM
WREG_FLOAT MACRO PFLOATOUT
    CALL INT08@TOFL32
    MOVFF PP_AARG,PFLOATOUT
    MOVFF PP_AARGH,PFLOATOUT+1
    MOVFF PP_AARGHH,PFLOATOUT+2
    MOVFF PP_AARGHHH,PFLOATOUT+3
    ENDM
BIT_FLOAT MACRO PVARIN,PBITIN,PFLOATOUT
    BIT_WREG PVARIN,PBITIN
    CALL INT08@TOFL32
    MOVFF PP_AARG,PFLOATOUT
    MOVFF PP_AARGH,PFLOATOUT+1
    MOVFF PP_AARGHH,PFLOATOUT+2
    MOVFF PP_AARGHHH,PFLOATOUT+3
    ENDM
BYTE_FLOAT MACRO PBYTEIN,PFLOATOUT
    BYTE_WREG PBYTEIN
    CALL INT08@TOFL32
    MOVFF PP_AARG,PFLOATOUT
    MOVFF PP_AARGH,PFLOATOUT+1
    MOVFF PP_AARGHH,PFLOATOUT+2
    MOVFF PP_AARGHHH,PFLOATOUT+3
    ENDM
WORD_FLOAT MACRO PWORDIN,PFLOATOUT
    BYTE_BYTE PWORDIN,PP_AARG
    BYTE_BYTE PWORDIN+1,PP_AARGH
    CALL INT16@TOFL32
    MOVFF PP_AARG,PFLOATOUT
    MOVFF PP_AARGH,PFLOATOUT+1
    MOVFF PP_AARGHH,PFLOATOUT+2
    MOVFF PP_AARGHHH,PFLOATOUT+3
    ENDM
DWORD_FLOAT MACRO PDWORDIN,PFLOATOUT
    MOVFF PDWORDIN,PP_AARG
    MOVFF PDWORDIN+1,PP_AARGH
    MOVFF PDWORDIN+2,PP_AARGHH
    MOVFF PDWORDIN+3,PP_AARGHHH
    CALL INT32@TOFL32
    MOVFF PP_AARG,PFLOATOUT
    MOVFF PP_AARGH,PFLOATOUT+1
    MOVFF PP_AARGHH,PFLOATOUT+2
    MOVFF PP_AARGHHH,PFLOATOUT+3
    ENDM
FLOAT_FLOAT MACRO PFLOATIN,PFLOATOUT
    MOVFF PFLOATIN,PFLOATOUT
    MOVFF PFLOATIN+1,PFLOATOUT+1
    MOVFF PFLOATIN+2,PFLOATOUT+2
    MOVFF PFLOATIN+3,PFLOATOUT+3
    ENDM
FLOAT_WREG MACRO PFLOATIN
    FLOAT_FLOAT PFLOATIN,PP_AARG
    CALL FL32@TOINT32
    ENDM
FLOAT_BIT MACRO PFLOATIN,PVAROUT,PBITOUT
    FLOAT_FLOAT PFLOATIN,PP_AARG
    CALL FL32@TOINT32
    WREG_BIT PVAROUT,PBITOUT
    ENDM
FLOAT_BYTE MACRO PFLOATIN,PBYTEOUT
    FLOAT_FLOAT PFLOATIN,PP_AARG
    CALL FL32@TOINT32
    WREG_BYTE PBYTEOUT
    ENDM
FLOAT_WORD MACRO PFLOATIN,PWORDOUT
    FLOAT_FLOAT PFLOATIN,PP_AARG
    CALL FL32@TOINT32
    MOVFF PP_AARGHHH,PWORDOUT
    MOVFF PP_AARGHH,PWORDOUT+1
    ENDM
FLOAT_DWORD MACRO PFLOATIN,PDWORDOUT
    FLOAT_FLOAT PFLOATIN,PP_AARG
    CALL FL32@TOINT32
    MOVFF PP_AARGHHH,PDWORDOUT
    MOVFF PP_AARGHH,PDWORDOUT+1
    MOVFF PP_AARGH,PDWORDOUT+2
    MOVFF PP_AARG,PDWORDOUT+3
    ENDM
NUM_FSR0 MACRO PNUMIN
    LFSR 0, PNUMIN
    ENDM
NUM_FSR1 MACRO PNUMIN
    LFSR 1, PNUMIN
    ENDM
NUM_FSR2 MACRO PNUMIN
    LFSR 2, PNUMIN
    ENDM
LABEL_WORD MACRO PLABELIN,PWORDOUT
    MOVLW LOW (PLABELIN)
    MOVFF WREG, PWORDOUT
    MOVLW HIGH (PLABELIN)
    MOVFF WREG, PWORDOUT+1
    ENDM
LABEL_POINTER MACRO PLABELIN
    MOVLW LOW (PLABELIN)
    MOVWF TBLPTRL
    MOVLW HIGH (PLABELIN)
    MOVWF TBLPTRH
    MOVLW UPPER (PLABELIN)
    MOVWF TBLPTRU
    ENDM
BPF = 0
BPFH = 1
GEN = 2
GEN4 = 3
GEN4H = 4
GENH = 5
GENL = 6
GPR = 7
PBP#RND = 8
PBP#RNDH = 9
PBP#VAR0 = 10
PBP#VAR0H = 11
PBP#VAR0HH = 12
PBP#VAR0HHH = 13
PBP#VAR1 = 14
PBP#VAR1H = 15
PBP#VAR1HH = 16
PBP#VAR1HHH = 17
PBP#VAR2 = 18
PBP#VAR3 = 19
PP0 = 20
PP0H = 21
PP0HH = 22
PP0HHH = 23
PP1 = 24
PP1H = 25
PP1HH = 26
PP1HHH = 27
PP2 = 28
PP2H = 29
PP2HH = 30
PP2HHH = 31
PP3 = 32
PP3H = 33
PP4 = 34
PP5 = 35
PP7 = 36
PP7H = 37
PP7HH = 38
PP7HHH = 39
PP8 = 40
PP8H = 41
PPZ = 42
PPZH = 43
PPZHH = 44
PPZHHH = 45
PP_AARG = 46
PP_AARGH = 47
PP_AARGHH = 48
PP_AARGHHH = 49
SP#P9 = 50
_FP_FLAGS = 51
_FP_TEMP = 52
_SIGN = 53
SD_BYTER = 54
SD_IDX = 55
SD_SECTOR_NUM = 56
SD_SECTOR_NUMH = 57
SD_SECTOR_NUMHH = 58
SD_SECTOR_NUMHHH = 59
SD_ADDRESS = 60
SD_ADDRESSH = 61
SD_ADDRESSHH = 62
SD_ADDRESSHHH = 63
SD_SEEK_RESPONSE_IDX = 64
SD_SEEK_RESPONSE_IDXH = 65
SD_SEEK_RESPONSE_REQD = 66
SD_SEEK_RESPONSE_RETURN = 67
SD_RETURN = 68
SD_BUFFER0 = 69
VARIABLE SD_BUFFER0#0=69,SD_BUFFER0#1=70,SD_BUFFER0#2=71,SD_BUFFER0#3=72
VARIABLE SD_BUFFER0#4=73,SD_BUFFER0#5=74,SD_BUFFER0#6=75,SD_BUFFER0#7=76
VARIABLE SD_BUFFER0#8=77,SD_BUFFER0#9=78,SD_BUFFER0#10=79,SD_BUFFER0#11=80
VARIABLE SD_BUFFER0#12=81,SD_BUFFER0#13=82,SD_BUFFER0#14=83,SD_BUFFER0#15=84
VARIABLE SD_BUFFER0#16=85,SD_BUFFER0#17=86,SD_BUFFER0#18=87,SD_BUFFER0#19=88
VARIABLE SD_BUFFER0#20=89,SD_BUFFER0#21=90,SD_BUFFER0#22=91,SD_BUFFER0#23=92
VARIABLE SD_BUFFER0#24=93,SD_BUFFER0#25=94,SD_BUFFER0#26=95,SD_BUFFER0#27=96
VARIABLE SD_BUFFER0#28=97,SD_BUFFER0#29=98,SD_BUFFER0#30=99,SD_BUFFER0#31=100
VARIABLE SD_BUFFER0#32=101,SD_BUFFER0#33=102,SD_BUFFER0#34=103,SD_BUFFER0#35=104
VARIABLE SD_BUFFER0#36=105,SD_BUFFER0#37=106,SD_BUFFER0#38=107,SD_BUFFER0#39=108
VARIABLE SD_BUFFER0#40=109,SD_BUFFER0#41=110,SD_BUFFER0#42=111,SD_BUFFER0#43=112
VARIABLE SD_BUFFER0#44=113,SD_BUFFER0#45=114,SD_BUFFER0#46=115,SD_BUFFER0#47=116
VARIABLE SD_BUFFER0#48=117,SD_BUFFER0#49=118,SD_BUFFER0#50=119,SD_BUFFER0#51=120
VARIABLE SD_BUFFER0#52=121,SD_BUFFER0#53=122,SD_BUFFER0#54=123,SD_BUFFER0#55=124
VARIABLE SD_BUFFER0#56=125,SD_BUFFER0#57=126,SD_BUFFER0#58=127,SD_BUFFER0#59=128
VARIABLE SD_BUFFER0#60=129,SD_BUFFER0#61=130,SD_BUFFER0#62=131,SD_BUFFER0#63=132
VARIABLE SD_BUFFER0#64=133,SD_BUFFER0#65=134,SD_BUFFER0#66=135,SD_BUFFER0#67=136
VARIABLE SD_BUFFER0#68=137,SD_BUFFER0#69=138,SD_BUFFER0#70=139,SD_BUFFER0#71=140
VARIABLE SD_BUFFER0#72=141,SD_BUFFER0#73=142,SD_BUFFER0#74=143,SD_BUFFER0#75=144
VARIABLE SD_BUFFER0#76=145,SD_BUFFER0#77=146,SD_BUFFER0#78=147,SD_BUFFER0#79=148
VARIABLE SD_BUFFER0#80=149,SD_BUFFER0#81=150,SD_BUFFER0#82=151,SD_BUFFER0#83=152
VARIABLE SD_BUFFER0#84=153,SD_BUFFER0#85=154,SD_BUFFER0#86=155,SD_BUFFER0#87=156
VARIABLE SD_BUFFER0#88=157,SD_BUFFER0#89=158,SD_BUFFER0#90=159,SD_BUFFER0#91=160
VARIABLE SD_BUFFER0#92=161,SD_BUFFER0#93=162,SD_BUFFER0#94=163,SD_BUFFER0#95=164
VARIABLE SD_BUFFER0#96=165,SD_BUFFER0#97=166,SD_BUFFER0#98=167,SD_BUFFER0#99=168
VARIABLE SD_BUFFER0#100=169,SD_BUFFER0#101=170,SD_BUFFER0#102=171,SD_BUFFER0#103=172
VARIABLE SD_BUFFER0#104=173,SD_BUFFER0#105=174,SD_BUFFER0#106=175,SD_BUFFER0#107=176
VARIABLE SD_BUFFER0#108=177,SD_BUFFER0#109=178,SD_BUFFER0#110=179,SD_BUFFER0#111=180
VARIABLE SD_BUFFER0#112=181,SD_BUFFER0#113=182,SD_BUFFER0#114=183,SD_BUFFER0#115=184
VARIABLE SD_BUFFER0#116=185,SD_BUFFER0#117=186,SD_BUFFER0#118=187,SD_BUFFER0#119=188
VARIABLE SD_BUFFER0#120=189,SD_BUFFER0#121=190,SD_BUFFER0#122=191,SD_BUFFER0#123=192
VARIABLE SD_BUFFER0#124=193,SD_BUFFER0#125=194,SD_BUFFER0#126=195,SD_BUFFER0#127=196
VARIABLE SD_BUFFER0#128=197,SD_BUFFER0#129=198,SD_BUFFER0#130=199,SD_BUFFER0#131=200
VARIABLE SD_BUFFER0#132=201,SD_BUFFER0#133=202,SD_BUFFER0#134=203,SD_BUFFER0#135=204
VARIABLE SD_BUFFER0#136=205,SD_BUFFER0#137=206,SD_BUFFER0#138=207,SD_BUFFER0#139=208
VARIABLE SD_BUFFER0#140=209,SD_BUFFER0#141=210,SD_BUFFER0#142=211,SD_BUFFER0#143=212
VARIABLE SD_BUFFER0#144=213,SD_BUFFER0#145=214,SD_BUFFER0#146=215,SD_BUFFER0#147=216
VARIABLE SD_BUFFER0#148=217,SD_BUFFER0#149=218,SD_BUFFER0#150=219,SD_BUFFER0#151=220
VARIABLE SD_BUFFER0#152=221,SD_BUFFER0#153=222,SD_BUFFER0#154=223,SD_BUFFER0#155=224
VARIABLE SD_BUFFER0#156=225,SD_BUFFER0#157=226,SD_BUFFER0#158=227,SD_BUFFER0#159=228
VARIABLE SD_BUFFER0#160=229,SD_BUFFER0#161=230,SD_BUFFER0#162=231,SD_BUFFER0#163=232
VARIABLE SD_BUFFER0#164=233,SD_BUFFER0#165=234,SD_BUFFER0#166=235,SD_BUFFER0#167=236
VARIABLE SD_BUFFER0#168=237,SD_BUFFER0#169=238,SD_BUFFER0#170=239,SD_BUFFER0#171=240
VARIABLE SD_BUFFER0#172=241,SD_BUFFER0#173=242,SD_BUFFER0#174=243,SD_BUFFER0#175=244
VARIABLE SD_BUFFER0#176=245,SD_BUFFER0#177=246,SD_BUFFER0#178=247,SD_BUFFER0#179=248
VARIABLE SD_BUFFER0#180=249,SD_BUFFER0#181=250,SD_BUFFER0#182=251,SD_BUFFER0#183=252
VARIABLE SD_BUFFER0#184=253,SD_BUFFER0#185=254,SD_BUFFER0#186=255,SD_BUFFER0#187=256
VARIABLE SD_BUFFER0#188=257,SD_BUFFER0#189=258,SD_BUFFER0#190=259,SD_BUFFER0#191=260
VARIABLE SD_BUFFER0#192=261,SD_BUFFER0#193=262,SD_BUFFER0#194=263,SD_BUFFER0#195=264
VARIABLE SD_BUFFER0#196=265,SD_BUFFER0#197=266,SD_BUFFER0#198=267,SD_BUFFER0#199=268
VARIABLE SD_BUFFER0#200=269,SD_BUFFER0#201=270,SD_BUFFER0#202=271,SD_BUFFER0#203=272
VARIABLE SD_BUFFER0#204=273,SD_BUFFER0#205=274,SD_BUFFER0#206=275,SD_BUFFER0#207=276
VARIABLE SD_BUFFER0#208=277,SD_BUFFER0#209=278,SD_BUFFER0#210=279,SD_BUFFER0#211=280
VARIABLE SD_BUFFER0#212=281,SD_BUFFER0#213=282,SD_BUFFER0#214=283,SD_BUFFER0#215=284
VARIABLE SD_BUFFER0#216=285,SD_BUFFER0#217=286,SD_BUFFER0#218=287,SD_BUFFER0#219=288
VARIABLE SD_BUFFER0#220=289,SD_BUFFER0#221=290,SD_BUFFER0#222=291,SD_BUFFER0#223=292
VARIABLE SD_BUFFER0#224=293,SD_BUFFER0#225=294,SD_BUFFER0#226=295,SD_BUFFER0#227=296
VARIABLE SD_BUFFER0#228=297,SD_BUFFER0#229=298,SD_BUFFER0#230=299,SD_BUFFER0#231=300
VARIABLE SD_BUFFER0#232=301,SD_BUFFER0#233=302,SD_BUFFER0#234=303,SD_BUFFER0#235=304
VARIABLE SD_BUFFER0#236=305,SD_BUFFER0#237=306,SD_BUFFER0#238=307,SD_BUFFER0#239=308
VARIABLE SD_BUFFER0#240=309,SD_BUFFER0#241=310,SD_BUFFER0#242=311,SD_BUFFER0#243=312
VARIABLE SD_BUFFER0#244=313,SD_BUFFER0#245=314,SD_BUFFER0#246=315,SD_BUFFER0#247=316
VARIABLE SD_BUFFER0#248=317,SD_BUFFER0#249=318,SD_BUFFER0#250=319,SD_BUFFER0#251=320
VARIABLE SD_BUFFER0#252=321,SD_BUFFER0#253=322,SD_BUFFER0#254=323,SD_BUFFER0#255=324
SD_BUFFER1 = 325
VARIABLE SD_BUFFER1#0=325,SD_BUFFER1#1=326,SD_BUFFER1#2=327,SD_BUFFER1#3=328
VARIABLE SD_BUFFER1#4=329,SD_BUFFER1#5=330,SD_BUFFER1#6=331,SD_BUFFER1#7=332
VARIABLE SD_BUFFER1#8=333,SD_BUFFER1#9=334,SD_BUFFER1#10=335,SD_BUFFER1#11=336
VARIABLE SD_BUFFER1#12=337,SD_BUFFER1#13=338,SD_BUFFER1#14=339,SD_BUFFER1#15=340
VARIABLE SD_BUFFER1#16=341,SD_BUFFER1#17=342,SD_BUFFER1#18=343,SD_BUFFER1#19=344
VARIABLE SD_BUFFER1#20=345,SD_BUFFER1#21=346,SD_BUFFER1#22=347,SD_BUFFER1#23=348
VARIABLE SD_BUFFER1#24=349,SD_BUFFER1#25=350,SD_BUFFER1#26=351,SD_BUFFER1#27=352
VARIABLE SD_BUFFER1#28=353,SD_BUFFER1#29=354,SD_BUFFER1#30=355,SD_BUFFER1#31=356
VARIABLE SD_BUFFER1#32=357,SD_BUFFER1#33=358,SD_BUFFER1#34=359,SD_BUFFER1#35=360
VARIABLE SD_BUFFER1#36=361,SD_BUFFER1#37=362,SD_BUFFER1#38=363,SD_BUFFER1#39=364
VARIABLE SD_BUFFER1#40=365,SD_BUFFER1#41=366,SD_BUFFER1#42=367,SD_BUFFER1#43=368
VARIABLE SD_BUFFER1#44=369,SD_BUFFER1#45=370,SD_BUFFER1#46=371,SD_BUFFER1#47=372
VARIABLE SD_BUFFER1#48=373,SD_BUFFER1#49=374,SD_BUFFER1#50=375,SD_BUFFER1#51=376
VARIABLE SD_BUFFER1#52=377,SD_BUFFER1#53=378,SD_BUFFER1#54=379,SD_BUFFER1#55=380
VARIABLE SD_BUFFER1#56=381,SD_BUFFER1#57=382,SD_BUFFER1#58=383,SD_BUFFER1#59=384
VARIABLE SD_BUFFER1#60=385,SD_BUFFER1#61=386,SD_BUFFER1#62=387,SD_BUFFER1#63=388
VARIABLE SD_BUFFER1#64=389,SD_BUFFER1#65=390,SD_BUFFER1#66=391,SD_BUFFER1#67=392
VARIABLE SD_BUFFER1#68=393,SD_BUFFER1#69=394,SD_BUFFER1#70=395,SD_BUFFER1#71=396
VARIABLE SD_BUFFER1#72=397,SD_BUFFER1#73=398,SD_BUFFER1#74=399,SD_BUFFER1#75=400
VARIABLE SD_BUFFER1#76=401,SD_BUFFER1#77=402,SD_BUFFER1#78=403,SD_BUFFER1#79=404
VARIABLE SD_BUFFER1#80=405,SD_BUFFER1#81=406,SD_BUFFER1#82=407,SD_BUFFER1#83=408
VARIABLE SD_BUFFER1#84=409,SD_BUFFER1#85=410,SD_BUFFER1#86=411,SD_BUFFER1#87=412
VARIABLE SD_BUFFER1#88=413,SD_BUFFER1#89=414,SD_BUFFER1#90=415,SD_BUFFER1#91=416
VARIABLE SD_BUFFER1#92=417,SD_BUFFER1#93=418,SD_BUFFER1#94=419,SD_BUFFER1#95=420
VARIABLE SD_BUFFER1#96=421,SD_BUFFER1#97=422,SD_BUFFER1#98=423,SD_BUFFER1#99=424
VARIABLE SD_BUFFER1#100=425,SD_BUFFER1#101=426,SD_BUFFER1#102=427,SD_BUFFER1#103=428
VARIABLE SD_BUFFER1#104=429,SD_BUFFER1#105=430,SD_BUFFER1#106=431,SD_BUFFER1#107=432
VARIABLE SD_BUFFER1#108=433,SD_BUFFER1#109=434,SD_BUFFER1#110=435,SD_BUFFER1#111=436
VARIABLE SD_BUFFER1#112=437,SD_BUFFER1#113=438,SD_BUFFER1#114=439,SD_BUFFER1#115=440
VARIABLE SD_BUFFER1#116=441,SD_BUFFER1#117=442,SD_BUFFER1#118=443,SD_BUFFER1#119=444
VARIABLE SD_BUFFER1#120=445,SD_BUFFER1#121=446,SD_BUFFER1#122=447,SD_BUFFER1#123=448
VARIABLE SD_BUFFER1#124=449,SD_BUFFER1#125=450,SD_BUFFER1#126=451,SD_BUFFER1#127=452
VARIABLE SD_BUFFER1#128=453,SD_BUFFER1#129=454,SD_BUFFER1#130=455,SD_BUFFER1#131=456
VARIABLE SD_BUFFER1#132=457,SD_BUFFER1#133=458,SD_BUFFER1#134=459,SD_BUFFER1#135=460
VARIABLE SD_BUFFER1#136=461,SD_BUFFER1#137=462,SD_BUFFER1#138=463,SD_BUFFER1#139=464
VARIABLE SD_BUFFER1#140=465,SD_BUFFER1#141=466,SD_BUFFER1#142=467,SD_BUFFER1#143=468
VARIABLE SD_BUFFER1#144=469,SD_BUFFER1#145=470,SD_BUFFER1#146=471,SD_BUFFER1#147=472
VARIABLE SD_BUFFER1#148=473,SD_BUFFER1#149=474,SD_BUFFER1#150=475,SD_BUFFER1#151=476
VARIABLE SD_BUFFER1#152=477,SD_BUFFER1#153=478,SD_BUFFER1#154=479,SD_BUFFER1#155=480
VARIABLE SD_BUFFER1#156=481,SD_BUFFER1#157=482,SD_BUFFER1#158=483,SD_BUFFER1#159=484
VARIABLE SD_BUFFER1#160=485,SD_BUFFER1#161=486,SD_BUFFER1#162=487,SD_BUFFER1#163=488
VARIABLE SD_BUFFER1#164=489,SD_BUFFER1#165=490,SD_BUFFER1#166=491,SD_BUFFER1#167=492
VARIABLE SD_BUFFER1#168=493,SD_BUFFER1#169=494,SD_BUFFER1#170=495,SD_BUFFER1#171=496
VARIABLE SD_BUFFER1#172=497,SD_BUFFER1#173=498,SD_BUFFER1#174=499,SD_BUFFER1#175=500
VARIABLE SD_BUFFER1#176=501,SD_BUFFER1#177=502,SD_BUFFER1#178=503,SD_BUFFER1#179=504
VARIABLE SD_BUFFER1#180=505,SD_BUFFER1#181=506,SD_BUFFER1#182=507,SD_BUFFER1#183=508
VARIABLE SD_BUFFER1#184=509,SD_BUFFER1#185=510,SD_BUFFER1#186=511,SD_BUFFER1#187=512
VARIABLE SD_BUFFER1#188=513,SD_BUFFER1#189=514,SD_BUFFER1#190=515,SD_BUFFER1#191=516
VARIABLE SD_BUFFER1#192=517,SD_BUFFER1#193=518,SD_BUFFER1#194=519,SD_BUFFER1#195=520
VARIABLE SD_BUFFER1#196=521,SD_BUFFER1#197=522,SD_BUFFER1#198=523,SD_BUFFER1#199=524
VARIABLE SD_BUFFER1#200=525,SD_BUFFER1#201=526,SD_BUFFER1#202=527,SD_BUFFER1#203=528
VARIABLE SD_BUFFER1#204=529,SD_BUFFER1#205=530,SD_BUFFER1#206=531,SD_BUFFER1#207=532
VARIABLE SD_BUFFER1#208=533,SD_BUFFER1#209=534,SD_BUFFER1#210=535,SD_BUFFER1#211=536
VARIABLE SD_BUFFER1#212=537,SD_BUFFER1#213=538,SD_BUFFER1#214=539,SD_BUFFER1#215=540
VARIABLE SD_BUFFER1#216=541,SD_BUFFER1#217=542,SD_BUFFER1#218=543,SD_BUFFER1#219=544
VARIABLE SD_BUFFER1#220=545,SD_BUFFER1#221=546,SD_BUFFER1#222=547,SD_BUFFER1#223=548
VARIABLE SD_BUFFER1#224=549,SD_BUFFER1#225=550,SD_BUFFER1#226=551,SD_BUFFER1#227=552
VARIABLE SD_BUFFER1#228=553,SD_BUFFER1#229=554,SD_BUFFER1#230=555,SD_BUFFER1#231=556
VARIABLE SD_BUFFER1#232=557,SD_BUFFER1#233=558,SD_BUFFER1#234=559,SD_BUFFER1#235=560
VARIABLE SD_BUFFER1#236=561,SD_BUFFER1#237=562,SD_BUFFER1#238=563,SD_BUFFER1#239=564
VARIABLE SD_BUFFER1#240=565,SD_BUFFER1#241=566,SD_BUFFER1#242=567,SD_BUFFER1#243=568
VARIABLE SD_BUFFER1#244=569,SD_BUFFER1#245=570,SD_BUFFER1#246=571,SD_BUFFER1#247=572
VARIABLE SD_BUFFER1#248=573,SD_BUFFER1#249=574,SD_BUFFER1#250=575,SD_BUFFER1#251=576
VARIABLE SD_BUFFER1#252=577,SD_BUFFER1#253=578,SD_BUFFER1#254=579,SD_BUFFER1#255=580
SD_BYTE0 = 581
SD_BYTE1 = 582
SD_BYTE2 = 583
SD_BYTE3 = 584
SD_BYTE4 = 585
SD_BYTE5 = 586
SD_BUFFER_IDX = 587
SD_BUFFER_IDXH = 588
SD_BYTE_RW = 589
SD_RW_OPTION = 590
SD_EXTENDED_RETURN = 591
SD_EXTENDED_RETURN_ROOT_DIR = 592
SD_DATA_IO = 593
SD_BUFFER_POS = 594
SD_BUFFER_POSH = 595
SD_ROOT_DIR_FILE_POS = 596
SD_SEC_NUM = 597
SD_SEC_NUMH = 598
SD_SEC_NUMHH = 599
SD_SEC_NUMHHH = 600
SD_SECS_PER_CLUSTER = 601
SD_RESERVED_SECS = 602
SD_RESERVED_SECSH = 603
SD_SECS_PER_FAT = 604
SD_SECS_PER_FATH = 605
SD_NUM_OF_FATS = 606
SD_NUM_OF_SECS = 607
SD_NUM_OF_SECSH = 608
SD_NUM_OF_SECSHH = 609
SD_NUM_OF_SECSHHH = 610
SD_BYTES_PER_SEC = 611
SD_BYTES_PER_SECH = 612
SD_NUM_OF_ROOT_ENTRIES = 613
SD_NUM_OF_ROOT_ENTRIESH = 614
SD_SECS_IN_ROOT = 615
SD_SECS_IN_ROOTH = 616
SD_BOOT_RECORD = 617
SD_BOOT_RECORDH = 618
SD_FAT1 = 619
SD_FAT1H = 620
SD_FAT1HH = 621
SD_FAT1HHH = 622
SD_FAT2 = 623
SD_FAT2H = 624
SD_FAT2HH = 625
SD_FAT2HHH = 626
SD_ROOT_DIR = 627
SD_ROOT_DIRH = 628
SD_ROOT_DIRHH = 629
SD_ROOT_DIRHHH = 630
SD_DATA_AREA = 631
SD_DATA_AREAH = 632
SD_DATA_AREAHH = 633
SD_DATA_AREAHHH = 634
SD_FAT_ENTRY = 635
SD_FAT_ENTRYH = 636
SD_FAT_SEC = 637
SD_FAT_SECH = 638
SD_FAT_SECHH = 639
SD_FAT_SECHHH = 640
SD_FAT_BUFFER_POS = 641
SD_FAT_BUFFER_POSH = 642
SD_FAT_SEC_PREV = 643
SD_FAT_SEC_PREVH = 644
SD_FAT_SEC_PREVHH = 645
SD_FAT_SEC_PREVHHH = 646
SD_FAT_BUFFER_POS_PREV = 647
SD_FAT_BUFFER_POS_PREVH = 648
SD_ROOT_DIR_SEC = 649
SD_ROOT_DIR_SECH = 650
SD_ROOT_DIR_SECHH = 651
SD_ROOT_DIR_SECHHH = 652
SD_ROOT_DIR_POS = 653
SD_ROOT_DIR_POSH = 654
SD_DATA_SEC = 655
SD_DATA_SECH = 656
SD_DATA_SECHH = 657
SD_DATA_SECHHH = 658
SD_DATA_BUFFER_POS = 659
SD_DATA_BUFFER_POSH = 660
SD_FILE_NAME = 661
VARIABLE SD_FILE_NAME#0=661,SD_FILE_NAME#1=662,SD_FILE_NAME#2=663,SD_FILE_NAME#3=664
VARIABLE SD_FILE_NAME#4=665,SD_FILE_NAME#5=666,SD_FILE_NAME#6=667,SD_FILE_NAME#7=668
VARIABLE SD_FILE_NAME#8=669
SD_FILE_EXT = 670
VARIABLE SD_FILE_EXT#0=670,SD_FILE_EXT#1=671,SD_FILE_EXT#2=672,SD_FILE_EXT#3=673
SD_ROOT_DIR_FILE = 674
VARIABLE SD_ROOT_DIR_FILE#0=674,SD_ROOT_DIR_FILE#1=675,SD_ROOT_DIR_FILE#2=676,SD_ROOT_DIR_FILE#3=677
VARIABLE SD_ROOT_DIR_FILE#4=678,SD_ROOT_DIR_FILE#5=679,SD_ROOT_DIR_FILE#6=680,SD_ROOT_DIR_FILE#7=681
VARIABLE SD_ROOT_DIR_FILE#8=682,SD_ROOT_DIR_FILE#9=683,SD_ROOT_DIR_FILE#10=684,SD_ROOT_DIR_FILE#11=685
VARIABLE SD_ROOT_DIR_FILE#12=686,SD_ROOT_DIR_FILE#13=687,SD_ROOT_DIR_FILE#14=688,SD_ROOT_DIR_FILE#15=689
VARIABLE SD_ROOT_DIR_FILE#16=690,SD_ROOT_DIR_FILE#17=691,SD_ROOT_DIR_FILE#18=692,SD_ROOT_DIR_FILE#19=693
VARIABLE SD_ROOT_DIR_FILE#20=694,SD_ROOT_DIR_FILE#21=695,SD_ROOT_DIR_FILE#22=696,SD_ROOT_DIR_FILE#23=697
VARIABLE SD_ROOT_DIR_FILE#24=698,SD_ROOT_DIR_FILE#25=699,SD_ROOT_DIR_FILE#26=700,SD_ROOT_DIR_FILE#27=701
VARIABLE SD_ROOT_DIR_FILE#28=702,SD_ROOT_DIR_FILE#29=703,SD_ROOT_DIR_FILE#30=704,SD_ROOT_DIR_FILE#31=705
SD_WRITE_SEC_NUM = 706
SD_WRITE_SEC_NUMH = 707
SD_WRITE_SEC_NUMHH = 708
SD_WRITE_SEC_NUMHHH = 709
SD_WRITE_BUFFER_POS = 710
SD_WRITE_BUFFER_POSH = 711
SD_NULL_F = 712
SD_CLUSTER_NUM = 713
SD_CLUSTER_NUMH = 714
SD_CLUSTER_NUM_PREV = 715
SD_CLUSTER_NUM_PREVH = 716
SD_LAST_CLUSTER = 717
SD_LAST_CLUSTERH = 718
SD_SEC_IN_CLUSTER = 719
SD_FILE_SIZE = 720
SD_FILE_SIZEH = 721
SD_FILE_SIZEHH = 722
SD_FILE_SIZEHHH = 723
SD_IO_BYTE = 724
SD_TEMP_BYTE = 725
SD_TEMP = 726
SD_TEMPH = 727
SD_TEMP_DWORD = 728
SD_TEMP_DWORDH = 729
SD_TEMP_DWORDHH = 730
SD_TEMP_DWORDHHH = 731
SD_CLUSTER_SEQ_NUM = 732
SD_CLUSTER_SEQ_NUMH = 733
SD_CLUSTER_SEQ_IDX = 734
SD_CLUSTER_SEQ_IDXH = 735
SD_CLUSTER_SEQ_NUM_PREV = 736
SD_CLUSTER_SEQ_NUM_PREVH = 737
SD_CLUSTER_SEQ_IDX_PREV = 738
SD_CLUSTER_SEQ_IDX_PREVH = 739
SD_FIND_ROOT_DIR_ENTRY_F = 740
SD_BYTES_READ = 741
SD_BYTES_READH = 742
SD_BYTES_READHH = 743
SD_BYTES_READHHH = 744
_B#VR1 = 745
SD_FILE_NUM = 746
SD_FILE_NUMH = 747
SD_DIR_DIRECTION = 748
SD_EXTENDED_RETURN_INT = 749
SD_FILE_SIZE_LEFT = 750
SD_FILE_SIZE_LEFTH = 751
SD_FILE_SIZE_LEFTHH = 752
SD_FILE_SIZE_LEFTHHH = 753
SD_TIMEOUT = 754
SD_DAY = 755
SD_MONTH = 756
SD_YEAR = 757
SD_MSECONDS = 758
SD_SECONDS = 759
SD_MINUTES = 760
SD_HOURS = 761
SD_IS_DIRTY = 762
SD_SSPSTAT = 763
SD_RETURN_F = 764
SD_IO_STRING_LENGTH = 765
SD_IO_STRING_POS = 766
SD_IO_STRING = 767
VARIABLE SD_IO_STRING#0=767,SD_IO_STRING#1=768,SD_IO_STRING#2=769,SD_IO_STRING#3=770
VARIABLE SD_IO_STRING#4=771,SD_IO_STRING#5=772,SD_IO_STRING#6=773,SD_IO_STRING#7=774
VARIABLE SD_IO_STRING#8=775,SD_IO_STRING#9=776,SD_IO_STRING#10=777,SD_IO_STRING#11=778
VARIABLE SD_IO_STRING#12=779,SD_IO_STRING#13=780,SD_IO_STRING#14=781,SD_IO_STRING#15=782
VARIABLE SD_IO_STRING#16=783,SD_IO_STRING#17=784,SD_IO_STRING#18=785,SD_IO_STRING#19=786
VARIABLE SD_IO_STRING#20=787,SD_IO_STRING#21=788,SD_IO_STRING#22=789,SD_IO_STRING#23=790
VARIABLE SD_IO_STRING#24=791,SD_IO_STRING#25=792,SD_IO_STRING#26=793,SD_IO_STRING#27=794
VARIABLE SD_IO_STRING#28=795,SD_IO_STRING#29=796,SD_IO_STRING#30=797,SD_IO_STRING#31=798
VARIABLE SD_IO_STRING#32=799,SD_IO_STRING#33=800,SD_IO_STRING#34=801,SD_IO_STRING#35=802
VARIABLE SD_IO_STRING#36=803,SD_IO_STRING#37=804,SD_IO_STRING#38=805,SD_IO_STRING#39=806
VARIABLE SD_IO_STRING#40=807,SD_IO_STRING#41=808,SD_IO_STRING#42=809,SD_IO_STRING#43=810
VARIABLE SD_IO_STRING#44=811,SD_IO_STRING#45=812,SD_IO_STRING#46=813,SD_IO_STRING#47=814
VARIABLE SD_IO_STRING#48=815,SD_IO_STRING#49=816,SD_IO_STRING#50=817,SD_IO_STRING#51=818
VARIABLE SD_IO_STRING#52=819,SD_IO_STRING#53=820,SD_IO_STRING#54=821,SD_IO_STRING#55=822
VARIABLE SD_IO_STRING#56=823,SD_IO_STRING#57=824,SD_IO_STRING#58=825,SD_IO_STRING#59=826
VARIABLE SD_IO_STRING#60=827,SD_IO_STRING#61=828,SD_IO_STRING#62=829,SD_IO_STRING#63=830
VARIABLE SD_IO_STRING#64=831,SD_IO_STRING#65=832,SD_IO_STRING#66=833,SD_IO_STRING#67=834
VARIABLE SD_IO_STRING#68=835,SD_IO_STRING#69=836,SD_IO_STRING#70=837,SD_IO_STRING#71=838
VARIABLE SD_IO_STRING#72=839,SD_IO_STRING#73=840,SD_IO_STRING#74=841,SD_IO_STRING#75=842
VARIABLE SD_IO_STRING#76=843,SD_IO_STRING#77=844,SD_IO_STRING#78=845,SD_IO_STRING#79=846
VARIABLE SD_IO_STRING#80=847,SD_IO_STRING#81=848,SD_IO_STRING#82=849,SD_IO_STRING#83=850
VARIABLE SD_IO_STRING#84=851,SD_IO_STRING#85=852,SD_IO_STRING#86=853,SD_IO_STRING#87=854
VARIABLE SD_IO_STRING#88=855,SD_IO_STRING#89=856,SD_IO_STRING#90=857,SD_IO_STRING#91=858
VARIABLE SD_IO_STRING#92=859,SD_IO_STRING#93=860,SD_IO_STRING#94=861,SD_IO_STRING#95=862
VARIABLE SD_IO_STRING#96=863,SD_IO_STRING#97=864,SD_IO_STRING#98=865,SD_IO_STRING#99=866
VARIABLE SD_IO_STRING#100=867,SD_IO_STRING#101=868,SD_IO_STRING#102=869,SD_IO_STRING#103=870
VARIABLE SD_IO_STRING#104=871,SD_IO_STRING#105=872,SD_IO_STRING#106=873,SD_IO_STRING#107=874
VARIABLE SD_IO_STRING#108=875,SD_IO_STRING#109=876,SD_IO_STRING#110=877,SD_IO_STRING#111=878
VARIABLE SD_IO_STRING#112=879,SD_IO_STRING#113=880,SD_IO_STRING#114=881,SD_IO_STRING#115=882
VARIABLE SD_IO_STRING#116=883,SD_IO_STRING#117=884,SD_IO_STRING#118=885,SD_IO_STRING#119=886
VARIABLE SD_IO_STRING#120=887,SD_IO_STRING#121=888,SD_IO_STRING#122=889,SD_IO_STRING#123=890
VARIABLE SD_IO_STRING#124=891,SD_IO_STRING#125=892,SD_IO_STRING#126=893,SD_IO_STRING#127=894
VARIABLE SD_IO_STRING#128=895,SD_IO_STRING#129=896,SD_IO_STRING#130=897,SD_IO_STRING#131=898
VARIABLE SD_IO_STRING#132=899,SD_IO_STRING#133=900,SD_IO_STRING#134=901,SD_IO_STRING#135=902
VARIABLE SD_IO_STRING#136=903,SD_IO_STRING#137=904,SD_IO_STRING#138=905,SD_IO_STRING#139=906
VARIABLE SD_IO_STRING#140=907,SD_IO_STRING#141=908,SD_IO_STRING#142=909,SD_IO_STRING#143=910
VARIABLE SD_IO_STRING#144=911,SD_IO_STRING#145=912,SD_IO_STRING#146=913,SD_IO_STRING#147=914
VARIABLE SD_IO_STRING#148=915,SD_IO_STRING#149=916,SD_IO_STRING#150=917,SD_IO_STRING#151=918
VARIABLE SD_IO_STRING#152=919,SD_IO_STRING#153=920,SD_IO_STRING#154=921,SD_IO_STRING#155=922
VARIABLE SD_IO_STRING#156=923,SD_IO_STRING#157=924,SD_IO_STRING#158=925,SD_IO_STRING#159=926
VARIABLE SD_IO_STRING#160=927,SD_IO_STRING#161=928,SD_IO_STRING#162=929,SD_IO_STRING#163=930
VARIABLE SD_IO_STRING#164=931,SD_IO_STRING#165=932,SD_IO_STRING#166=933,SD_IO_STRING#167=934
VARIABLE SD_IO_STRING#168=935,SD_IO_STRING#169=936,SD_IO_STRING#170=937,SD_IO_STRING#171=938
VARIABLE SD_IO_STRING#172=939,SD_IO_STRING#173=940,SD_IO_STRING#174=941,SD_IO_STRING#175=942
VARIABLE SD_IO_STRING#176=943,SD_IO_STRING#177=944,SD_IO_STRING#178=945,SD_IO_STRING#179=946
VARIABLE SD_IO_STRING#180=947,SD_IO_STRING#181=948,SD_IO_STRING#182=949,SD_IO_STRING#183=950
VARIABLE SD_IO_STRING#184=951,SD_IO_STRING#185=952,SD_IO_STRING#186=953,SD_IO_STRING#187=954
VARIABLE SD_IO_STRING#188=955,SD_IO_STRING#189=956,SD_IO_STRING#190=957,SD_IO_STRING#191=958
VARIABLE SD_IO_STRING#192=959,SD_IO_STRING#193=960,SD_IO_STRING#194=961,SD_IO_STRING#195=962
VARIABLE SD_IO_STRING#196=963,SD_IO_STRING#197=964,SD_IO_STRING#198=965,SD_IO_STRING#199=966
VARIABLE SD_IO_STRING#200=967
TAGIN = 968
VARIABLE TAGIN#0=968,TAGIN#1=969,TAGIN#2=970,TAGIN#3=971
VARIABLE TAGIN#4=972,TAGIN#5=973,TAGIN#6=974,TAGIN#7=975
VARIABLE TAGIN#8=976,TAGIN#9=977
TAGBYTE = 978
VARIABLE TAGBYTE#0=978,TAGBYTE#1=979,TAGBYTE#2=980,TAGBYTE#3=981
VARIABLE TAGBYTE#4=982,TAGBYTE#5=983,TAGBYTE#6=984,TAGBYTE#7=985
VARIABLE TAGBYTE#8=986,TAGBYTE#9=987
MODNUM = 988
VARIABLE MODNUM#0=988,MODNUM#1=989,MODNUM#2=990,MODNUM#3=991
VARIABLE MODNUM#4=992,MODNUM#5=993,MODNUM#6=994
M_U_CODE = 995
VARIABLE M_U_CODE#0=995,M_U_CODE#1=996,M_U_CODE#2=997,M_U_CODE#3=998
BBOOT_CNT = 999
BRESET_TYPE = 1000
ETX = 1001
CHECKSUM = 1002
RESPONSE = 1003
MYCOUNT = 1004
INDEX = 1005
INDEX2 = 1006
BYTE_VAR = 1007
WORD_VAR = 1008
WORD_VARH = 1009
MYNUM = 1010
VARIABLE MYNUM#0=1010,MYNUM#1=1011,MYNUM#2=1012,MYNUM#3=1013
RESET_CAUSE = 1014
VARIABLE RESET_CAUSE#0=1014,RESET_CAUSE#1=1015,RESET_CAUSE#2=1016,RESET_CAUSE#3=1017
VARIABLE RESET_CAUSE#4=1018,RESET_CAUSE#5=1019,RESET_CAUSE#6=1020,RESET_CAUSE#7=1021
VARIABLE RESET_CAUSE#8=1022,RESET_CAUSE#9=1023,RESET_CAUSE#10=1024
#DEFINE SD_CS PORTC,2
#DEFINE SD_DI PORTC,5
#DEFINE SD_CLK PORTC,3
#DEFINE SD_DO PORTC,4
#DEFINE SD_EOF _B#VR1,0
#DEFINE SD_RW_PTR SD_BYTES_READ
#DEFINE SD_RW_PTRH SD_BYTES_READH
#DEFINE SD_RW_PTRHH SD_BYTES_READHH
#DEFINE SD_RW_PTRHHH SD_BYTES_READHHH
#DEFINE SD_FREE_CLUSTER_NUM SD_CLUSTER_SEQ_NUM
#DEFINE SD_FREE_CLUSTER_NUMH SD_CLUSTER_SEQ_NUMH
#DEFINE SD_FREE_SPACE_KB SD_BYTES_READ
#DEFINE SD_FREE_SPACE_KBH SD_BYTES_READH
#DEFINE SD_FREE_SPACE_KBHH SD_BYTES_READHH
#DEFINE SD_FREE_SPACE_KBHHH SD_BYTES_READHHH
#DEFINE SD_DISK_SIZE_KB SD_BYTES_READ
#DEFINE SD_DISK_SIZE_KBH SD_BYTES_READH
#DEFINE SD_DISK_SIZE_KBHH SD_BYTES_READHH
#DEFINE SD_DISK_SIZE_KBHHH SD_BYTES_READHHH
#DEFINE SD_SPI_BF SSPSTAT,0
#DEFINE SD_SPI_IF PIR1,3
#DEFINE __LCD_DTPORT PORTD
#DEFINE __LCD_ENPORT PORTD
#DEFINE __LCD_RSPORT PORTD
#DEFINE SD_DETECT PORTC,1
#DEFINE RFIDENABLE PORTD,4
#DEFINE STARTENABLE PORTE,1
#DEFINE SP1 PORTC,0
#DEFINE RED PORTA,0
#DEFINE GREEN PORTA,1
#DEFINE VC PORTA,3
#DEFINE SDC PORTD,5
#DEFINE SD_FIRST 0
#DEFINE SD_NEXT 1
#DEFINE SD_PREVIOUS 2
#DEFINE SD_SPI_FOSC_64 2
#DEFINE SD_SPI_FOSC_16 1
#DEFINE SD_SPI_FOSC_04 0
#DEFINE __XTAL 4
#DEFINE __LCD_TYPE 0
#DEFINE __LCD_DTPIN 0
#DEFINE __LCD_ENPIN 6
#DEFINE __LCD_RSPIN 7
#DEFINE __LCD_INTERFACE 4
#DEFINE __LCD_LINES 2
#DEFINE __HSERIAL_BAUD 9600
#DEFINE __HSERIAL_RCSTA 144
#DEFINE __HSERIAL_TXSTA 32
#DEFINE BUA 40064
#DEFINE BUAH 156
#DEFINE NUM_USERS 1
#DEFINE NUM_UHE 2
#DEFINE NUM_MHE 3
#DEFINE DBO 4
#DEFINE TOP 5
#DEFINE SOO 6
#DEFINE MOP 7
#DEFINE EBOOT_CNT_LOCATION 16
#DEFINE UHA 26
#DEFINE MHA 912
#DEFINE MHAH 3
#DEFINE MAX_UH 50
#DEFINE MAX_MH 10
HSERIAL_SPBRG = 6
HSERIAL_TXSTA = 32
HSERIAL_RCSTA = 144
HSERIAL_BAUD = 9600
PROTON#CODE#START
        ORG 0
        GOTO PROTON#MAIN#START
        ORG 8
T@EB
        CLRF 21
T@EW
        CLRF 25
T@E
        MOVWF 24
        MOVLW 2
T@ST
        MOVWF 7
        MOVF 25,W
        SUBWF 21,W
        BNZ CN@EQ
        MOVF 24,W
        SUBWF 20,W
CN@EQ
        MOVLW 4
        BTFSC 4056,0
        MOVLW 1
        BTFSC 4056,2
        MOVLW 2
        ANDWF 7,W
        BTFSS 4056,2
        MOVLW 1
        RETURN
LCD@CLS
        MOVLW 128
        MOVWF 1
CLS
        MOVLW 254
        CALL CH@SND
        MOVLW 1
        CALL CH@SND
        MOVLW 117
        MOVWF 21
        MOVLW 48
        GOTO DLUS@W
LCD@CRS
        CLRF 1
        BSF 1,7
CURS@
        MOVWF 35
        MOVLW 254
        CALL CH@SND
        MOVF 35,W
        GOTO CH@SND
OUT@HEXB
        CLRF 4
OUT@HEXC
        MOVWF 28
        CLRF 29
OUT@HEX
        BCF 0,3
        MOVF 4,W
        BTFSC 4056,2
        BSF 0,3
        MOVLW 4
        MOVWF 3
        SWAPF 29,W
        RCALL H@DIG
        MOVF 29,W
        RCALL H@DIG
        SWAPF 28,W
        RCALL H@DIG
        MOVF 28,W
H@DIG
        ANDLW 15
        ADDLW 246
        BTFSC 4056,0
        ADDLW 7
        ADDLW 10
        BRA SEND@IT
SEND@IT
        MOVWF 20
        DCFSNZ 3,F
        BCF 0,3
        MOVF 4,W
        BZ $ + 8
        SUBWF 3,W
        BTFSC 4056,0
        BRA EX@SEND@IT
        MOVF 20,W
        BTFSS 4056,2
        BCF 0,3
        BTFSC 0,3
        BRA EX@SEND@IT
        ADDLW 48
        GOTO CH@SND
EX@SEND@IT
        RETURN
PRINT@MSTR
PRINT@MSTRL
        CLRF 4006
        BSF 4006,PP_EEPGD
PRT@MTL1
        TBLRD*+
        MOVF 4085,W
        BZ PRT@MTEXT
        RCALL PRINT
        BRA PRT@MTL1
PRT@MTEXT
        RETURN
PRINT
        MOVWF 33
        BCF LATD,6
        NOP
        BCF LATD,7
        BCF TRISD,6
        BCF TRISD,7
        MOVLW 240
        ANDWF TRISD,F
        MOVF 33,W
        BTFSC 0,1
        GOTO PRT@1
        MOVLW 58
        MOVWF 21
        MOVLW 152
        CALL DLUS@W
        MOVLW 51
        MOVWF 32
        RCALL PR@LP
        MOVLW 19
        MOVWF 21
        MOVLW 136
        CALL DLUS@W
        RCALL PR@LP
        MOVLW 100
        CALL DL@US
        RCALL PR@LP
        MOVLW 100
        CALL DL@US
        MOVLW 34
        MOVWF 32
        RCALL PR@LP
        MOVLW 40
        RCALL PR@CM
        MOVLW 12
        RCALL PR@CM
        MOVLW 6
        RCALL PR@CM
        BSF 0,1
        MOVF 33,W
        BRA PRT@1
PR@CM
        BSF 0,0
PRT@1
        MOVWF 32
        BTFSS 0,0
        BRA PR@CC
        BCF LATD,7
        SUBLW 3
        BNC PR@SD
        RCALL PR@SD
        MOVLW 7
        MOVWF 21
        MOVLW 208
        CALL DLUS@W
        BSF 4056,0
        RETURN
PR@CC
        BSF 0,0
        SUBLW 254
        BZ PR@EX
        BSF LATD,7
PR@SD
        SWAPF 32,F
        BTFSS 0,0
PR@LP
        BCF 0,0
        BSF LATD,6
        MOVLW 240
        ANDWF PORTD,F
        MOVF 32,W
        ANDLW 15
        IORWF PORTD,F
        BCF LATD,6
        SWAPF 32,F
        BTFSC 0,0
        BRA PR@LP
        MOVLW 50
        CALL DL@US
        BSF 4056,0
PR@EX
        MOVF 33,W
        RETURN
HRSIN2
        BTFSC 4011,PP_OERR
        BCF 4011,PP_CREN
        BSF 4011,PP_CREN
        MOVFF 2,20
        MOVFF 5,21
        CLRF 24
        CLRF 25
HRI@L0
        NOP
        BRA $ + 2
HRI@L
        NOP
        BTFSC 3998,PP_RCIF
        BRA H@RSIN
        SETF 4072
        ADDWF 24,F
        ADDWFC 25,F
        ADDWFC 20,F
        ADDWFC 21,F
        BTFSS 4056,0
        RETURN
        INFSNZ 24,W
        INCFSZ 25,W
        BRA HRI@L0
        MOVLW 61
        MOVWF 24
        CLRF 25
        BRA HRI@L
HRSIN
        BTFSC 4011,PP_OERR
        BCF 4011,PP_CREN
        BSF 4011,PP_CREN
        BTFSS 3998,PP_RCIF
        BRA $ - 2
H@RSIN
        MOVF 4014,W
        BSF 4056,0
        RETURN
CH@SND
        BTFSC 1,7
        GOTO PRINT
EE@RD
        CLRF 4010
        MOVWF 4009
EE@RD@W
        CLRF 4006
        BSF 4006,PP_RD
        MOVF 4008,W
        INFSNZ 4009,F
        INCF 4010,F
        RETURN
EE@WR
        CLRF 4010
EE@WR@W
        MOVWF 4008
        CLRF 4006
        BSF 4006,PP_WREN
        MOVLW 85
        MOVWF 4007
        MOVLW 170
        MOVWF 4007
        BSF 4006,PP_WR
        BTFSC 4006,PP_WR
        BRA $ - 2
        BCF 4006,PP_WREN
        INFSNZ 4009,F
        INCF 4010,F
        RETURN
C@WRITE
        MOVWF 4085
        TBLWT*
        INCF 4086,W
        ANDLW 63
        BNZ CR@EXIT
        MOVLW 132
        MOVWF 4006
        MOVLW 85
        MOVWF 4007
        MOVLW 170
        MOVWF 4007
        BSF 4006,PP_WR
        BRA $ + 2
        BCF 4006,PP_WREN
CR@EXIT
        INFSNZ 4086,F
        INCF 4087,F
        RETURN
NOISE
        MOVWF 25
        MOVLW 15
        MOVWF 4074
        MOVFF 2,4073
        COMF 5,W
        BSF 4073,4
        INCF 4073,F
        ANDWF 4076,F
        MOVFF 2,4073
        MOVF 25,W
        BTFSC 4056,2
        BRA SND@EXIT
        MOVLW 240
        MOVWF 29
SND@LP
        MOVF 24,W
        IORLW 128
        MOVWF 28
SND@LP1
        MOVLW 240
        DECF 29,F
        BTFSC 4056,2
        MOVWF 29
        BTFSC 4056,2
        DECF 25,F
        BTFSC 4056,2
        BRA SND@EXIT
        BRA $ + 2
        RCALL RN@DM
        BRA $ + 2
        CLRF 4072
        BTFSC 8,0
        MOVF 5,W
        BTFSS 24,7
        MOVF 5,W
        MOVF 24,F
        BTFSC 4056,2
        CLRF 4072
        INCFSZ 28,F
        BRA $ + 6
        XORWF 4079,F
        BRA SND@LP
        BRA $ + 2
        NOP
        BRA SND@LP1
SND@EXIT
        MOVF 5,W
        BSF 4073,4
        INCF 4073,F
        IORWF 4076,F
        RETURN
RN@DM
        MOVF 9,W
        IORWF 8,W
        BTFSC 4056,2
        INCF 8,F
        RLCF 9,W
        XORWF 9,W
        RLCF 4072,F
        SWAPF 9,F
        SWAPF 8,W
        RLNCF 4072,F
        XORWF 9,W
        SWAPF 9,F
        ANDLW 1
        RLCF 8,F
        XORWF 8,F
        RLCF 9,F
        MOVF 8,W
        RETURN
DL@MS
        CLRF 25
DLY@W
        MOVWF 24
DLY@P
        MOVLW 255
        ADDWF 24,F
        ADDWFC 25,F
        BRA $ + 2
        BTFSS 4056,0
        RETURN
        MOVLW 3
        MOVWF 21
        MOVLW 223
        RCALL DLUS@W
        BRA DLY@P
DL@US
        CLRF 21
DLUS@W
        ADDLW 233
        MOVWF 20
        MOVLW 252
        BNC $ + 12
        NOP
        NOP
        ADDWF 20,F
        BC $ - 4
        NOP
        ADDWF 20,F
        DECF 21,F
        BC $ - 12
        BTFSC 20,0
        BRA $ + 2
        BTFSS 20,1
        BRA $ + 6
        BRA $ + 2
        NOP
        RETURN
L@DIV
L@MOD
        MOVF 23,W
        XORWF 31,W
        ANDLW 128
        MOVWF 4084
        BTFSS 23,7
        BRA DIVS@32X32SKIP1
        BSF 4056,0
        MOVLW 0
        SUBFWB 20,F
        SUBFWB 21,F
        SUBFWB 22,F
        SUBFWB 23,F
DIVS@32X32SKIP1
        BTFSS 31,7
        BRA DIVS@32X32SKIP2
        BSF 4056,0
        MOVLW 0
        SUBFWB 28,F
        SUBFWB 29,F
        SUBFWB 30,F
        SUBFWB 31,F
DIVS@32X32SKIP2
        CLRF 24
        CLRF 25
        CLRF 26
        CLRF 27
        CLRF 42
        CLRF 43
        CLRF 44
        CLRF 45
        MOVF 31,W
        IORWF 30,W
        IORWF 29,W
        IORWF 28,W
        BZ DIVS@32X32SKIP5
        MOVLW 32
        MOVWF 4083
DIVS@32X32LOOP
        BCF 4056,0
        RLCF 20,F
        RLCF 21,F
        RLCF 22,F
        RLCF 23,F
        RLCF 42,F
        RLCF 43,F
        RLCF 44,F
        RLCF 45,F
        MOVF 28,W
        SUBWF 42,W
        MOVF 29,W
        SUBWFB 43,W
        MOVF 30,W
        SUBWFB 44,W
        MOVF 31,W
        SUBWFB 45,W
        BNC DIVS@32X32SKIP4
        MOVF 28,W
        SUBWF 42,F
        MOVF 29,W
        SUBWFB 43,F
        MOVF 30,W
        SUBWFB 44,F
        MOVF 31,W
        SUBWFB 45,F
        BSF 4056,0
DIVS@32X32SKIP4
        RLCF 24,F
        RLCF 25,F
        RLCF 26,F
        RLCF 27,F
        DECFSZ 4083,F
        BRA DIVS@32X32LOOP
DIVS@32X32SKIP5
        BTFSS 4084,7
        BRA DIVS@32X32EXIT
        BSF 4056,0
        MOVLW 0
        SUBFWB 24,F
        SUBFWB 25,F
        SUBFWB 26,F
        SUBFWB 27,F
DIVS@32X32EXIT
        MOVFF 24,20
        MOVFF 25,21
        MOVFF 26,22
        MOVFF 27,23
        MOVFF 42,28
        MOVFF 43,29
        MOVFF 44,30
        MOVFF 45,31
        RETURN
D@VD
        CLRF 29
        CLRF 28
D@VD2
        MOVLW 16
        MOVWF 4083
DV@LP
        RLCF 21,W
        RLCF 28,F
        RLCF 29,F
        MOVF 24,W
        SUBWF 28,W
        MOVF 25,W
        SUBWFB 29,W
        BNC D@K
        MOVF 24,W
        SUBWF 28,F
        MOVF 25,W
        SUBWFB 29,F
        BSF 4056,0
D@K
        RLCF 20,F
        RLCF 21,F
        DECFSZ 4083,F
        BRA DV@LP
        MOVF 20,W
        RETURN
AL@MUL
        MOVFF 23,45
        MOVFF 22,44
        MOVFF 21,43
        MOVFF 20,42
        MOVF 44,W
        MULWF 28
        MOVFF 4083,22
        MOVFF 4084,23
        MOVF 43,W
        MULWF 29
        MOVF 4083,W
        ADDWF 22,F
        MOVF 4084,W
        ADDWFC 23,F
        MOVF 42,W
        MULWF 30
        MOVF 4083,W
        ADDWF 22,F
        MOVF 4084,W
        ADDWFC 23,F
        MOVF 45,W
        MULWF 28
        MOVF 4083,W
        ADDWF 23,F
        MOVF 44,W
        MULWF 29
        MOVF 4083,W
        ADDWF 23,F
        MOVF 43,W
        MULWF 30
        MOVF 4083,W
        ADDWF 23,F
        MOVF 42,W
        MULWF 31
        MOVF 4083,W
        ADDWF 23,F
        MOVF 42,W
        MULWF 28
        MOVFF 4083,20
        MOVFF 4084,21
        MOVF 43,W
        MULWF 28
        MOVF 4083,W
        ADDWF 21,F
        MOVF 4084,W
        ADDWFC 22,F
        MOVLW 0
        ADDWFC 23,F
        MOVF 42,W
        MULWF 29
        MOVF 4083,W
        ADDWF 21,F
        MOVF 4084,W
        ADDWFC 22,F
        MOVLW 0
        ADDWFC 23,F
        RETURN
LOAD@MSTR
LOAD@MSTRL
        CLRF 4006
        BSF 4006,PP_EEPGD
        TBLRD*+
        MOVF 4085,W
        BZ $ + 6
        MOVWF 4078
        BRA $ - 8
        RETURN
FL32@TOINT32
        MOVFF 47,53
        MOVLW 127
        SUBWF 46,W
        MOVWF 52
        BC FI@L3
        CLRF 4072
        BRA FI@ASSIGNW
FI@L3
        BSF 47,7
        CLRF 46
        CLRF 42
        MOVF 52,W
        SUBLW 23
        MOVWF 52
        BC FI@L9
        MOVLW 8
        ADDWF 52,F
        BTFSS 4056,0
        BRA FI@OVERFLOW
FI@L7
        MOVFF 47,46
        MOVFF 48,47
        MOVFF 49,48
        CLRF 49
        BRA FI@L8
FI@L9
        MOVLW 8
        SUBWF 52,F
        BNC FI@L10
FI@L12
        MOVFF 49,42
        MOVFF 48,49
        MOVFF 47,48
        CLRF 47
        BRA FI@L9
FI@L10
        ADDWF 52,F
FI@L8
        MOVF 52,F
        BZ FI@L16
FI@L15
        BCF 4056,0
        RRCF 46,F
        RRCF 47,F
        RRCF 48,F
        RRCF 49,F
        RRCF 42,F
        DECFSZ 52,F
        BRA FI@L15
FI@L16
        BTFSC 46,0
        BRA FI@OVERFLOW
FI@L18
        BTFSS 51,6
        BRA FI@L30
        BTFSS 42,7
        BRA FI@L30
        INCF 49,F
        BNZ FI@L30
        INCF 48,F
        BNZ FI@L30
        INCF 47,F
        BNZ FI@L30
        INCF 47,F
FI@L30
        MOVF 46,W
        MOVFF 49,46
        MOVWF 49
        MOVF 47,W
        MOVFF 48,47
        MOVWF 48
        BTFSS 53,7
        BRA FI@L32
        BSF 4056,0
        MOVLW 0
        SUBFWB 46,F
        SUBFWB 47,F
        SUBFWB 48,F
        SUBFWB 49,F
FI@L32
        MOVF 46,W
        RETURN
FI@OVERFLOW
        BSF 51,5
        SETF 4072
FI@ASSIGNW
        MOVWF 46
        MOVWF 47
        MOVWF 48
        MOVWF 49
        RETURN
STR@LB1
        DB 32,32,32,32,32,32,32,32,0
STR@LB2
        DB 78,111,32,73,110,105,116,0
STR@LB3
        DB 83,68,32,69,114,114,111,114,0
STR@LB4
        DB 83,68,32,114,101,97,100,32,79,75,0
STR@LB5
        DB 84,97,103,32,82,101,97,100,0
STR@LB6
        DB 84,97,103,32,105,115,32,103,111,111,100,33,0
STR@LB7
        DB 65,84,84,69,77,80,84,73,78,71,32,84,79,0
STR@LB8
        DB 82,69,65,68,32,84,65,71,46,46,46,46,0
STR@LB9
        DB 84,104,97,110,107,32,89,111,117,0
STR@LB10
        DB 78,111,32,84,97,103,32,68,101,116,101,99,116,101,100,0
STR@LB11
        DB 68,111,110,101,32,111,110,101,0
STR@LB12
        DB 78,111,32,85,115,101,114,115,32,101,120,105,115,116,0
STR@LB13
        DB 71,111,105,110,103,32,116,111,32,115,108,101,101,112,46,46,0
STR@LB14
        DB 73,32,106,117,115,116,32,119,111,107,101,32,117,112,33,33,0
STR@LB15
        DB 85,110,105,116,32,99,97,110,32,110,111,119,0
STR@LB16
        DB 98,101,32,115,116,97,114,116,101,100,33,0
STR@LB17
        DB 70,105,108,101,32,110,111,116,32,102,111,117,110,100,0
STR@LB18
        DB 78,111,32,77,97,110,97,103,101,114,32,85,112,100,97,116,101,32,72,105
        DB 115,116,111,114,121,32,101,120,105,115,116,115,32,102,111,114,32,116,104,105
        DB 115,32,77,111,100,117,108,101,33,0
STR@LB19
        DB 78,111,32,85,115,101,114,115,32,104,97,118,101,32,98,101,101,110,32,97
        DB 115,115,105,103,110,101,100,32,116,111,32,116,104,105,115,32,77,111,100,117
        DB 108,101,33,0
STR@LB20
        DB 85,110,97,117,116,104,111,114,105,122,101,100,0
STR@LB21
        DB 83,108,101,101,112,105,110,103,32,78,111,119,0
STR@LB22
        DB 78,111,32,84,97,103,0
STR@LB23
        DB 83,108,101,101,112,105,110,103,32,78,111,119,0
STR@LB24
        DB 66,97,100,32,67,97,114,100,0
STR@LB25
        DB 83,108,101,101,112,105,110,103,32,78,111,119,0
STR@LB26
        DB 66,97,100,32,70,105,108,101,0
STR@LB27
        DB 83,108,101,101,112,105,110,103,32,78,111,119,0
STR@LB28
        DB 82,101,115,101,116,32,99,111,100,101,32,61,32,0
PROTON#MAIN#START
        CLRF 4088
        MOVLW 64
        MOVWF 51
        CLRF 0
        MOVLW 6
        MOVWF 4015
        MOVLW 32
        MOVWF 4012
        MOVLW 144
        MOVWF 4011
        MOVLB 0
F2_SOF EQU $ ; RFID V28.4.PRP
F3_SOF EQU $ ; RFID V28.4_FWD.PBP
F3_EOF EQU $ ; RFID V28.4_FWD.PBP
F4_SOF EQU $ ; RFID V28.4_LIB.PBP
        F@JUMP OVERLIBCODE
SD_WRITE_SUB
F4_000109 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_BUFFER_IDX > $FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL2
F4_000110 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER1[SD_BUFFER_IDX - $100] = SD_BYTE_RW
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTE_RW,INDF0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL3
BC@LL2
F4_000111 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000112 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER0[SD_BUFFER_IDX] = SD_BYTE_RW
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTE_RW,INDF0
F4_000113 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL3
        MOVLB 0
RAM_BANK = 0
F4_000114 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IS_DIRTY = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_IS_DIRTY
F4_000115 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_BUFFER_IDX = $1FF THEN
        INCF SD_BUFFER_IDX,W
        MOVLW 1
        BTFSC STATUS,2,0
        XORWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL5
F4_000116 EQU $ ; IN [RFID V28.4_LIB.PBP] REPEAT
BC@LL6
F4_000117 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000118 EQU $ ; IN [RFID V28.4_LIB.PBP] UNTIL SD_RETURN = 0
        MOVF SD_RETURN,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL6
BC@LL7
F4_000119 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IS_DIRTY = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_IS_DIRTY
F4_000120 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_IDX = 0
        CLRF SD_BUFFER_IDX
        CLRF SD_BUFFER_IDXH
F4_000121 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_SECTOR_NUM
        INCF SD_SECTOR_NUM,F,0
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,F,0
        ADDWFC SD_SECTOR_NUMHH,F,0
        ADDWFC SD_SECTOR_NUMHHH,F,0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL8
BC@LL5
F4_000122 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000123 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_IDX = SD_BUFFER_IDX + 1
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_BUFFER_IDX,F
        INCF SD_BUFFER_IDXH,F
F4_000124 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL8
        MOVLB 0
RAM_BANK = 0
F4_000125 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_SECTOR_SUB
F4_000128 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_IDX = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_IDX
        CLRF SD_BUFFER_IDXH
F4_000129 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_RW_OPTION = 0 THEN
        MOVF SD_RW_OPTION,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL10
F4_000130 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB12
F4_000131 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER0[SD_IDX] = 0
        LFSR 0,SD_BUFFER0
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        CLRF INDF0,0
F4_000132 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER1[SD_IDX] = 0
        LFSR 0,SD_BUFFER1
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        CLRF INDF0,0
F4_000133 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB12
NX@LB13
        F@JUMP BC@LL13
BC@LL10
F4_000134 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000135 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_SECTOR
        F@CALL SD_READ_SECTOR
F4_000136 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL13
F4_000137 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_SEEK_RESPONSE
F4_000151 EQU $ ; IN [RFID V28.4_LIB.PBP] REPEAT
BC@LL14
F4_000152 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000153 EQU $ ; IN [RFID V28.4_LIB.PBP] DEC SD_SEEK_RESPONSE_IDX
        DECF SD_SEEK_RESPONSE_IDX,F,0
        MOVLW 0
        SUBWFB SD_SEEK_RESPONSE_IDXH,F,0
F4_000154 EQU $ ; IN [RFID V28.4_LIB.PBP] UNTIL SD_BYTER = SD_SEEK_RESPONSE_REQD OR SD_SEEK_RESPONSE_IDX = 0
        MOVFF SD_BYTER,PP0
        MOVF SD_SEEK_RESPONSE_REQD,W,0
        F@CALL T@EB
        MOVWF SP#P9,0
        MOVF SD_SEEK_RESPONSE_IDXH,W,0
        IORWF SD_SEEK_RESPONSE_IDX,W,0
        BTFSC STATUS,2,0
        GO@TO CP@LB4
        MOVLW 0
        BRA $ + 4
CP@LB4
        MOVLW 1
        IORWF SP#P9,F,0
        BTFSC STATUS,2,0
        GO@TO BC@LL14
BC@LL15
F4_000155 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEEK_RESPONSE_IDX = 0 THEN
        MOVF SD_SEEK_RESPONSE_IDXH,W,0
        IORWF SD_SEEK_RESPONSE_IDX,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL17
F4_000156 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_RETURN = 1
        MOVLW 1
        MOVWF SD_SEEK_RESPONSE_RETURN,0
        F@JUMP BC@LL18
BC@LL17
F4_000157 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000158 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_RETURN = 0
        CLRF SD_SEEK_RESPONSE_RETURN,0
F4_000159 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL18
F4_000160 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_WRITE_SECTOR
F4_000163 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TIMEOUT = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_TIMEOUT
F4_000164 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
SD_WRITE_SECTOR_START
        MOVLB 0
RAM_BANK = 0
F4_000166 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ADDRESS = SD_SECTOR_NUM << 9
        BCF STATUS,0,0
        CLRF SD_ADDRESS,0
        RLCF SD_SECTOR_NUM,W,0
        MOVWF SD_ADDRESSH,0
        RLCF SD_SECTOR_NUMH,W,0
        MOVWF SD_ADDRESSHH,0
        RLCF SD_SECTOR_NUMHH,W,0
        MOVWF SD_ADDRESSHHH,0
F4_000168 EQU $ ; IN [RFID V28.4_LIB.PBP] LOW SD_CS
        BCF TRISC,2,0
        BCF LATC,2,0
F4_000169 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE0 = $58
        MOVLW 88
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000170 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE1 = SD_ADDRESS.BYTE3
        MOVFF SD_ADDRESSHHH,SD_BYTE1
F4_000171 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE2 = SD_ADDRESS.BYTE2
        MOVFF SD_ADDRESSHH,SD_BYTE2
F4_000172 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE3 = SD_ADDRESS.BYTE1
        MOVFF SD_ADDRESSH,SD_BYTE3
F4_000173 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE4 = SD_ADDRESS.BYTE0
        MOVFF SD_ADDRESS,SD_BYTE4
F4_000174 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000175 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_REQD = $00
        CLRF SD_SEEK_RESPONSE_REQD,0
F4_000176 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDX,0
        SETF SD_SEEK_RESPONSE_IDXH,0
F4_000177 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000178 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000179 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_WRITE_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL20
        F@JUMP SD_WRITE_SECTOR_ERROR
BC@LL20
F4_000181 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FE
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE5
F4_000182 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000184 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB22
F4_000185 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = SD_BUFFER0[SD_IDX]
        LFSR 0,SD_BUFFER0
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE5
F4_000186 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000187 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB22
NX@LB23
F4_000188 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB24
F4_000189 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = SD_BUFFER1[SD_IDX]
        LFSR 0,SD_BUFFER1
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE5
F4_000190 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000191 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB24
NX@LB25
F4_000193 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE5
F4_000194 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000195 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_BYTE
        F@CALL SD_SEND_BYTE
F4_000197 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_REQD = $FF
        SETF SD_SEEK_RESPONSE_REQD,0
F4_000198 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDX,0
        SETF SD_SEEK_RESPONSE_IDXH,0
F4_000199 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000200 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TEMP_BYTE = SD_BYTER
        MOVFF SD_BYTER,SD_TEMP_BYTE
F4_000201 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000202 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TEMP_BYTE = SD_TEMP_BYTE & $0F
        MOVLW 15
        MOVLB 2
RAM_BANK = 2
        ANDWF SD_TEMP_BYTE,F
F4_000203 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_TEMP_BYTE <> $05 THEN GOTO SD_WRITE_SECTOR_ERROR
        MOVLW 5
        SUBWF SD_TEMP_BYTE,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL26
        F@JUMP SD_WRITE_SECTOR_ERROR
BC@LL26
F4_000204 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_WRITE_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL28
        F@JUMP SD_WRITE_SECTOR_ERROR
BC@LL28
F4_000205 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN = 0
        CLRF SD_RETURN,0
F4_000206 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000207 EQU $ ; IN [RFID V28.4_LIB.PBP] GOTO SD_WRITE_SECTOR_END
        F@JUMP SD_WRITE_SECTOR_END
SD_WRITE_SECTOR_ERROR
F4_000209 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000210 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TIMEOUT = SD_TIMEOUT + 1
        MOVLB 2
RAM_BANK = 2
        INCF SD_TIMEOUT,F
F4_000211 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_TIMEOUT < $03 THEN
        MOVLW 3
        SUBWF SD_TIMEOUT,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL30
F4_000212 EQU $ ; IN [RFID V28.4_LIB.PBP] GOTO SD_WRITE_SECTOR_START
        F@JUMP SD_WRITE_SECTOR_START
F4_000213 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL30
SD_WRITE_SECTOR_END
F4_000215 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_READ_SECTOR
F4_000218 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TIMEOUT = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_TIMEOUT
F4_000219 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
SD_READ_SECTOR_START
        MOVLB 0
RAM_BANK = 0
F4_000221 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ADDRESS = SD_SECTOR_NUM << 9
        BCF STATUS,0,0
        CLRF SD_ADDRESS,0
        RLCF SD_SECTOR_NUM,W,0
        MOVWF SD_ADDRESSH,0
        RLCF SD_SECTOR_NUMH,W,0
        MOVWF SD_ADDRESSHH,0
        RLCF SD_SECTOR_NUMHH,W,0
        MOVWF SD_ADDRESSHHH,0
F4_000223 EQU $ ; IN [RFID V28.4_LIB.PBP] LOW SD_CS
        BCF TRISC,2,0
        BCF LATC,2,0
F4_000224 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE0 = $51
        MOVLW 81
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000225 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE1 = SD_ADDRESS.BYTE3
        MOVFF SD_ADDRESSHHH,SD_BYTE1
F4_000226 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE2 = SD_ADDRESS.BYTE2
        MOVFF SD_ADDRESSHH,SD_BYTE2
F4_000227 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE3 = SD_ADDRESS.BYTE1
        MOVFF SD_ADDRESSH,SD_BYTE3
F4_000228 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE4 = SD_ADDRESS.BYTE0
        MOVFF SD_ADDRESS,SD_BYTE4
F4_000229 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000230 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000231 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_REQD = $00
        CLRF SD_SEEK_RESPONSE_REQD,0
F4_000232 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDX,0
        SETF SD_SEEK_RESPONSE_IDXH,0
F4_000233 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000234 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_READ_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL32
        F@JUMP SD_READ_SECTOR_ERROR
BC@LL32
F4_000236 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_REQD = $FE
        MOVLW 254
        MOVWF SD_SEEK_RESPONSE_REQD,0
F4_000237 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FFFF
        SETF SD_SEEK_RESPONSE_IDX,0
        SETF SD_SEEK_RESPONSE_IDXH,0
F4_000238 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000239 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN GOTO SD_READ_SECTOR_ERROR
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL34
        F@JUMP SD_READ_SECTOR_ERROR
BC@LL34
F4_000241 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB36
F4_000242 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000243 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER0[SD_IDX] = SD_BYTER
        LFSR 0,SD_BUFFER0
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTER,INDF0
F4_000244 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB36
NX@LB37
F4_000245 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_IDX = 0 TO $FF
        CLRF SD_IDX,0
FR@LB38
F4_000246 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000247 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER1[SD_IDX] = SD_BYTER
        LFSR 0,SD_BUFFER1
        MOVF SD_IDX,W,0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_BYTER,INDF0
F4_000248 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_IDX
        INCF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO FR@LB38
NX@LB39
F4_000250 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000251 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_RECEIVE_BYTE
        F@CALL SD_RECEIVE_BYTE
F4_000252 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000253 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE5
F4_000254 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000255 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN = 0
        CLRF SD_RETURN,0
F4_000256 EQU $ ; IN [RFID V28.4_LIB.PBP] GOTO SD_READ_SECTOR_END
        F@JUMP SD_READ_SECTOR_END
SD_READ_SECTOR_ERROR
F4_000258 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000259 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TIMEOUT = SD_TIMEOUT + 1
        MOVLB 2
RAM_BANK = 2
        INCF SD_TIMEOUT,F
F4_000260 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_TIMEOUT < $03 THEN
        MOVLW 3
        SUBWF SD_TIMEOUT,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL40
F4_000261 EQU $ ; IN [RFID V28.4_LIB.PBP] GOTO SD_READ_SECTOR_START
        F@JUMP SD_READ_SECTOR_START
F4_000262 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL40
SD_READ_SECTOR_END
F4_000264 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_READ_FAT_ENTRY
F4_000267 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_BUFFER_POS > $0FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL42
F4_000268 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_ENTRY.BYTE0 = SD_BUFFER1[SD_BUFFER_POS - $100]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_POS,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRY
F4_000269 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_ENTRY.BYTE1 = SD_BUFFER1[SD_BUFFER_POS + 1 - $100]
        MOVLW 1
        ADDWF SD_BUFFER_POS,W
        MOVWF PP7,0
        MOVLW 0
        ADDWFC SD_BUFFER_POSH,W
        MOVWF PP7H,0
        MOVF PP7,W,0
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRYH
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL43
BC@LL42
F4_000270 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000271 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_ENTRY.BYTE0 = SD_BUFFER0[SD_BUFFER_POS]
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_POS,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRY
F4_000272 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_ENTRY.BYTE1 = SD_BUFFER0[SD_BUFFER_POS + 1]
        INCF SD_BUFFER_POS,W
        LFSR 0,SD_BUFFER0
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_FAT_ENTRYH
F4_000273 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL43
        MOVLB 0
RAM_BANK = 0
F4_000274 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_FIND_FREE_CLUSTER
F4_000277 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TEMP_DWORD = SD_FAT1 + SD_SECS_PER_FAT - 1
        MOVLB 2
RAM_BANK = 2
        MOVF SD_SECS_PER_FAT,W
        ADDWF SD_FAT1,W
        MOVWF PP7,0
        MOVF SD_SECS_PER_FATH,W
        ADDWFC SD_FAT1H,W
        MOVWF PP7H,0
        MOVLW 0
        ADDWFC SD_FAT1HH,W
        MOVWF PP7HH,0
        MOVLW 0
        ADDWFC SD_FAT1HHH,W
        MOVWF PP7HHH,0
        DECF PP7,W,0
        MOVWF SD_TEMP_DWORD
        MOVLW 0
        SUBWFB PP7H,W,0
        MOVWF SD_TEMP_DWORDH
        MOVLW 0
        SUBWFB PP7HH,W,0
        MOVWF SD_TEMP_DWORDHH
        MOVLW 0
        SUBWFB PP7HHH,W,0
        MOVWF SD_TEMP_DWORDHHH
F4_000278 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_SEC_NUM = (SD_FAT_SEC + SD_FAT1) TO SD_TEMP_DWORD
        MOVF SD_FAT1,W
        ADDWF SD_FAT_SEC,W
        MOVWF SD_SEC_NUM
        MOVF SD_FAT1H,W
        ADDWFC SD_FAT_SECH,W
        MOVWF SD_SEC_NUMH
        MOVF SD_FAT1HH,W
        ADDWFC SD_FAT_SECHH,W
        MOVWF SD_SEC_NUMHH
        MOVF SD_FAT1HHH,W
        ADDWFC SD_FAT_SECHHH,W
        MOVWF SD_SEC_NUMHHH
FR@LB45
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_SEC_NUM,W
        SUBWF SD_TEMP_DWORD,W
        MOVF SD_SEC_NUMH,W
        SUBWFB SD_TEMP_DWORDH,W
        MOVF SD_SEC_NUMHH,W
        SUBWFB SD_TEMP_DWORDHH,W
        MOVF SD_SEC_NUMHHH,W
        SUBWFB SD_TEMP_DWORDHHH,W
        MOVF SD_SEC_NUMHHH,W
        XORWF SD_TEMP_DWORDHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO NX@LB46
F4_000279 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_SEC_NUM
        MOVFF SD_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_SEC_NUM,SD_SECTOR_NUM
F4_000280 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_000281 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000283 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_BUFFER_POS = $0000 TO $1FF STEP 2
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_POS
        CLRF SD_BUFFER_POSH
FR@LB47
        MOVLB 0
RAM_BANK = 0
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB48
F4_000284 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEC_NUM > (SD_FAT_SEC + SD_FAT1) OR SD_BUFFER_POS >= (SD_FAT_BUFFER_POS + (2 * SD_CLUSTER_SEQ_NUM)) THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        ADDWF SD_FAT_SEC,W
        MOVWF PBP#VAR0,0
        MOVF SD_FAT1H,W
        ADDWFC SD_FAT_SECH,W
        MOVWF PBP#VAR0H,0
        MOVF SD_FAT1HH,W
        ADDWFC SD_FAT_SECHH,W
        MOVWF PBP#VAR0HH,0
        MOVF SD_FAT1HHH,W
        ADDWFC SD_FAT_SECHHH,W
        MOVWF PBP#VAR0HHH,0
        MOVF SD_SEC_NUM,W
        SUBWF PBP#VAR0,W,0
        MOVF SD_SEC_NUMH,W
        SUBWFB PBP#VAR0H,W,0
        MOVF SD_SEC_NUMHH,W
        SUBWFB PBP#VAR0HH,W,0
        MOVF SD_SEC_NUMHHH,W
        SUBWFB PBP#VAR0HHH,W,0
        MOVF SD_SEC_NUMHHH,W
        XORWF PBP#VAR0HHH,W,0
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO CP@LB9
        MOVLW 0
        BRA $ + 4
CP@LB9
        MOVLW 1
        MOVWF SP#P9,0
        CLRF PP0HHH,0
        CLRF PP0HH,0
        CLRF PP0H,0
        MOVLW 2
        MOVWF PP0,0
        MOVFF SD_CLUSTER_SEQ_NUM,PP2
        MOVFF SD_CLUSTER_SEQ_NUMH,PP2H
        CLRF PP2HH,0
        CLRF PP2HHH,0
        F@CALL AL@MUL
        MOVFF PP0HHH,PP7HHH
        MOVFF PP0HH,PP7HH
        MOVFF PP0H,PP7H
        MOVFF PP0,PP7
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_BUFFER_POS,W
        ADDWF PP7,W,0
        MOVWF PBP#VAR0,0
        MOVF SD_FAT_BUFFER_POSH,W
        ADDWFC PP7H,W,0
        MOVWF PBP#VAR0H,0
        MOVLW 0
        ADDWFC PP7HH,W,0
        MOVWF PBP#VAR0HH,0
        MOVLW 0
        ADDWFC PP7HHH,W,0
        MOVWF PBP#VAR0HHH,0
        MOVLB 0
RAM_BANK = 0
        BTFSC PBP#VAR0HHH,7,0
        GO@TO CP@LB10
        MOVF PBP#VAR0HHH,F,0
        BTFSS STATUS,2,0
        GO@TO CP@LB11
        MOVF PBP#VAR0HH,F,0
        BTFSS STATUS,2,0
        GO@TO CP@LB11
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_POSH,W
        SUBWF PBP#VAR0H,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO CP@LB10
        BTFSS STATUS,2,0
        GO@TO CP@LB11
        MOVF PBP#VAR0,W,0
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO CP@LB10
CP@LB11
        MOVLW 0
        BRA $ + 4
CP@LB10
        MOVLW 1
        IORWF SP#P9,F,0
        BTFSC STATUS,2,0
        GO@TO BC@LL49
F4_000285 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000286 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_FAT_ENTRY = $0000 THEN GOTO SD_STORE_FAT_POSITION
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_ENTRYH,W
        IORWF SD_FAT_ENTRY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL51
        F@JUMP SD_STORE_FAT_POSITION
BC@LL51
F4_000287 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL49
F4_000288 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_BUFFER_POS
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_BUFFER_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB47
        MOVLB 2
RAM_BANK = 2
        INCF SD_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB47
NX@LB48
F4_000289 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_SEC_NUM
        MOVLB 2
RAM_BANK = 2
        INCF SD_SEC_NUM,F
        MOVLW 0
        ADDWFC SD_SEC_NUMH,F
        ADDWFC SD_SEC_NUMHH,F
        ADDWFC SD_SEC_NUMHHH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB45
NX@LB46
F4_000290 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000291 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_STORE_FAT_POSITION
F4_000293 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = SD_SEC_NUM - SD_FAT1
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        SUBWF SD_SEC_NUM,W
        MOVWF SD_FAT_SEC
        MOVF SD_FAT1H,W
        SUBWFB SD_SEC_NUMH,W
        MOVWF SD_FAT_SECH
        MOVF SD_FAT1HH,W
        SUBWFB SD_SEC_NUMHH,W
        MOVWF SD_FAT_SECHH
        MOVF SD_FAT1HHH,W
        SUBWFB SD_SEC_NUMHHH,W
        MOVWF SD_FAT_SECHHH
F4_000294 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_BUFFER_POS
        MOVFF SD_BUFFER_POS,SD_FAT_BUFFER_POS
        MOVFF SD_BUFFER_POSH,SD_FAT_BUFFER_POSH
F4_000295 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_SEC * $100)
        MOVFF SD_FAT_SEC,SD_CLUSTER_NUMH
        CLRF SD_CLUSTER_NUM
F4_000296 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_BUFFER_POS / 2) + SD_CLUSTER_NUM
        BCF STATUS,0,0
        RRCF SD_FAT_BUFFER_POSH,W
        MOVWF PP7H,0
        RRCF SD_FAT_BUFFER_POS,W
        MOVWF PP7,0
        MOVF PP7,W,0
        ADDWF SD_CLUSTER_NUM,F
        MOVF PP7H,W,0
        ADDWFC SD_CLUSTER_NUMH,F
F4_000297 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_NUM = 0
        CLRF SD_CLUSTER_SEQ_NUM
        CLRF SD_CLUSTER_SEQ_NUMH
F4_000298 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_BUFFER_POS = SD_FAT_BUFFER_POS TO $1FF STEP 2
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
FR@LB53
        MOVLB 0
RAM_BANK = 0
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB54
F4_000299 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000300 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_FAT_ENTRY = $0000 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_ENTRYH,W
        IORWF SD_FAT_ENTRY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL55
F4_000301 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_CLUSTER_SEQ_NUM
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_CLUSTER_SEQ_NUM,F
        INCF SD_CLUSTER_SEQ_NUMH,F
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL56
BC@LL55
F4_000302 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000303 EQU $ ; IN [RFID V28.4_LIB.PBP] GOTO SD_STORE_CLUSTER_SEQ
        F@JUMP SD_STORE_CLUSTER_SEQ
F4_000304 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL56
F4_000305 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_BUFFER_POS
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_BUFFER_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB53
        MOVLB 2
RAM_BANK = 2
        INCF SD_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB53
NX@LB54
SD_STORE_CLUSTER_SEQ
F4_000307 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_IDX = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_CLUSTER_SEQ_IDX
        CLRF SD_CLUSTER_SEQ_IDXH
F4_000308 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_000309 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_MODIFY_FILE_NAME
F4_000312 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NULL_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NULL_F
F4_000313 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB58
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB59
F4_000314 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_NULL_F = 1 OR SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] = 0 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_NULL_F,W
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 1
        MOVF PBP#VAR0,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL60
F4_000315 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] = $20
        MOVLW 32
        MOVWF PRODL,0
        LFSR 0,SD_FILE_NAME
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PRODL,PLUSW0
F4_000316 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVWF SD_NULL_F
F4_000317 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL60
        MOVLB 0
RAM_BANK = 0
F4_000318 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB58
NX@LB59
F4_000319 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NULL_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NULL_F
F4_000320 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB62
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB63
F4_000321 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_NULL_F = 1 OR SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] = 0 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_NULL_F,W
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVLW 8
        SUBWF SD_ROOT_DIR_FILE_POS,W
        LFSR 0,SD_FILE_EXT
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 1
        MOVF PBP#VAR0,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL64
F4_000322 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] = $20
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        ADDLW SD_FILE_EXT
        MOVWF FSR0L,0
        MOVLW SD_FILE_EXT >> 8
        CLRF FSR0H,0
        ADDWFC FSR0H,F,0
        MOVLW 32
        MOVWF INDF0,0
F4_000323 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVWF SD_NULL_F
F4_000324 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL64
        MOVLB 0
RAM_BANK = 0
F4_000325 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB62
NX@LB63
F4_000326 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_FIND_ROOT_DIR_ENTRY
F4_000329 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_MODIFY_FILE_NAME
        F@CALL SD_MODIFY_FILE_NAME
F4_000330 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_ROOT_ENTRIES = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NUM_OF_ROOT_ENTRIES
        CLRF SD_NUM_OF_ROOT_ENTRIESH
F4_000331 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TEMP_DWORD = SD_ROOT_DIR + SD_SECS_IN_ROOT - 1
        MOVF SD_SECS_IN_ROOT,W
        ADDWF SD_ROOT_DIR,W
        MOVWF PP7,0
        MOVF SD_SECS_IN_ROOTH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF PP7H,0
        MOVLW 0
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF PP7HH,0
        MOVLW 0
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF PP7HHH,0
        DECF PP7,W,0
        MOVWF SD_TEMP_DWORD
        MOVLW 0
        SUBWFB PP7H,W,0
        MOVWF SD_TEMP_DWORDH
        MOVLW 0
        SUBWFB PP7HH,W,0
        MOVWF SD_TEMP_DWORDHH
        MOVLW 0
        SUBWFB PP7HHH,W,0
        MOVWF SD_TEMP_DWORDHHH
F4_000332 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_SEC_NUM = SD_ROOT_DIR TO SD_TEMP_DWORD
        MOVFF SD_ROOT_DIRHHH,SD_SEC_NUMHHH
        MOVFF SD_ROOT_DIRHH,SD_SEC_NUMHH
        MOVFF SD_ROOT_DIRH,SD_SEC_NUMH
        MOVFF SD_ROOT_DIR,SD_SEC_NUM
FR@LB66
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_SEC_NUM,W
        SUBWF SD_TEMP_DWORD,W
        MOVF SD_SEC_NUMH,W
        SUBWFB SD_TEMP_DWORDH,W
        MOVF SD_SEC_NUMHH,W
        SUBWFB SD_TEMP_DWORDHH,W
        MOVF SD_SEC_NUMHHH,W
        SUBWFB SD_TEMP_DWORDHHH,W
        MOVF SD_SEC_NUMHHH,W
        XORWF SD_TEMP_DWORDHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO NX@LB67
F4_000333 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_SEC_NUM
        MOVFF SD_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_SEC_NUM,SD_SECTOR_NUM
F4_000334 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_000335 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000337 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_BUFFER_POS = $000 TO $1FF STEP 32
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_POS
        CLRF SD_BUFFER_POSH
FR@LB68
        MOVLB 0
RAM_BANK = 0
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB69
F4_000338 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = 0 TO 31
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB70
        MOVLB 0
RAM_BANK = 0
        MOVLW 32
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB71
F4_000339 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_TEMP = SD_BUFFER_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_BUFFER_POS,W
        MOVWF SD_TEMP
        MOVLW 0
        ADDWFC SD_BUFFER_POSH,W
        MOVWF SD_TEMPH
F4_000340 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_TEMP > $0FF THEN
        MOVLW 1
        SUBWF SD_TEMPH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL72
F4_000341 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] = SD_BUFFER1[SD_TEMP - $100]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_TEMP,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF INDF0,PBP#VAR0
        LFSR 0,SD_ROOT_DIR_FILE
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PBP#VAR0,PLUSW0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL73
BC@LL72
F4_000342 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000343 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] = SD_BUFFER0[SD_TEMP]
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_TEMP,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF INDF0,PBP#VAR0
        LFSR 0,SD_ROOT_DIR_FILE
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PBP#VAR0,PLUSW0
F4_000344 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL73
        MOVLB 0
RAM_BANK = 0
F4_000345 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB70
NX@LB71
F4_000346 EQU $ ; IN [RFID V28.4_LIB.PBP] SELECT SD_FIND_ROOT_DIR_ENTRY_F
F4_000347 EQU $ ; IN [RFID V28.4_LIB.PBP] CASE 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FIND_ROOT_DIR_ENTRY_F,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL75
F4_000348 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_ROOT_DIR_FILE[0] = $00 OR SD_ROOT_DIR_FILE[0] = $E5 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVLW 1
        MOVF PBP#VAR0,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVLW 229
        SUBWF PBP#VAR0,W,0
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL78
F4_000349 EQU $ ; IN [RFID V28.4_LIB.PBP] GOTO SD_STORE_ROOT_DIRECT_POSITION
        F@JUMP SD_STORE_ROOT_DIRECT_POSITION
F4_000350 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL78
        F@JUMP BC@LL74
BC@LL75
F4_000351 EQU $ ; IN [RFID V28.4_LIB.PBP] CASE 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_FIND_ROOT_DIR_ENTRY_F,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL80
F4_000352 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NULL_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_NULL_F
F4_000353 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB82
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB83
F4_000354 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] <> SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] THEN
        LFSR 0,SD_ROOT_DIR_FILE
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
        MOVF PBP#VAR0,W,0
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL84
F4_000355 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_NULL_F
F4_000356 EQU $ ; IN [RFID V28.4_LIB.PBP] BREAK
        MOVLB 0
RAM_BANK = 0
        F@JUMP NX@LB83
F4_000357 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL84
F4_000358 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB82
NX@LB83
F4_000359 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB86
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB87
F4_000360 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS] <> SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] THEN
        LFSR 0,SD_ROOT_DIR_FILE
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 8
        SUBWF SD_ROOT_DIR_FILE_POS,W
        LFSR 0,SD_FILE_EXT
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
        MOVF PBP#VAR0,W,0
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL88
F4_000361 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NULL_F = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_NULL_F
F4_000362 EQU $ ; IN [RFID V28.4_LIB.PBP] BREAK
        MOVLB 0
RAM_BANK = 0
        F@JUMP NX@LB87
F4_000363 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL88
F4_000364 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB86
NX@LB87
F4_000365 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_NULL_F = 0 THEN GOTO SD_STORE_ROOT_DIRECT_POSITION
        MOVLB 2
RAM_BANK = 2
        MOVF SD_NULL_F,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL90
        F@JUMP SD_STORE_ROOT_DIRECT_POSITION
BC@LL90
        F@JUMP BC@LL74
BC@LL80
F4_000366 EQU $ ; IN [RFID V28.4_LIB.PBP] CASE 2
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_FIND_ROOT_DIR_ENTRY_F,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL92
F4_000367 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_ROOT_DIR_FILE[$0B] | %11110000 <> $FF THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#11,W
        MOVWF PBP#VAR1,0
        MOVLW 240
        IORWF PBP#VAR1,W,0
        MOVWF PBP#VAR0,0
        CLRF PBP#VAR0H,0
        INCF PBP#VAR0,W,0
        IORWF PBP#VAR0H,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL94
F4_000368 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_ROOT_DIR_FILE[$00] <> $00 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVF PBP#VAR0,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL96
F4_000369 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_ROOT_DIR_FILE[$00] <> $E5 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#0,W
        MOVWF PBP#VAR0,0
        MOVLW 229
        SUBWF PBP#VAR0,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL98
F4_000370 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_ROOT_DIR_FILE[$0B] & %00011110 = 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#11,W
        MOVWF PBP#VAR1,0
        MOVLW 30
        ANDWF PBP#VAR1,W,0
        MOVWF PBP#VAR0,0
        CLRF PBP#VAR0H,0
        MOVF PBP#VAR0H,W,0
        IORWF PBP#VAR0,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL100
F4_000371 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_NUM_OF_ROOT_ENTRIES
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_NUM_OF_ROOT_ENTRIES,F
        INCF SD_NUM_OF_ROOT_ENTRIESH,F
F4_000372 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_NUM_OF_ROOT_ENTRIES = SD_FILE_NUM THEN
        MOVF SD_FILE_NUMH,W
        SUBWF SD_NUM_OF_ROOT_ENTRIESH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL102
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_NUM,W
        SUBWF SD_NUM_OF_ROOT_ENTRIES,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL102
F4_000373 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB104
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB105
F4_000374 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_NAME[SD_ROOT_DIR_FILE_POS] = SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS]
        LFSR 0,SD_ROOT_DIR_FILE
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PLUSW0,PBP#VAR0
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PBP#VAR0,PLUSW0
F4_000375 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB104
NX@LB105
F4_000376 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB106
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB107
F4_000377 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08] = SD_ROOT_DIR_FILE[SD_ROOT_DIR_FILE_POS]
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVWF PBP#VAR0,0
        LFSR 0,SD_ROOT_DIR_FILE
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVFF PLUSW0,PBP#VAR1
        LFSR 0,SD_FILE_EXT
        MOVF PBP#VAR0,W,0
        MOVFF PBP#VAR1,PLUSW0
F4_000378 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB106
NX@LB107
F4_000379 EQU $ ; IN [RFID V28.4_LIB.PBP] GOTO SD_STORE_ROOT_DIRECT_POSITION
        F@JUMP SD_STORE_ROOT_DIRECT_POSITION
F4_000380 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL102
F4_000381 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL100
F4_000382 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL98
F4_000383 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL96
F4_000384 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL94
F4_000385 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDSELECT
BC@LL92
BC@LL74
F4_000386 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_BUFFER_POS
        MOVLW 32
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_BUFFER_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB68
        MOVLB 2
RAM_BANK = 2
        INCF SD_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB68
NX@LB69
F4_000387 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_SEC_NUM
        MOVLB 2
RAM_BANK = 2
        INCF SD_SEC_NUM,F
        MOVLW 0
        ADDWFC SD_SEC_NUMH,F
        ADDWFC SD_SEC_NUMHH,F
        ADDWFC SD_SEC_NUMHHH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO FR@LB66
NX@LB67
F4_000388 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN_ROOT_DIR = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN_ROOT_DIR
F4_000389 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_STORE_ROOT_DIRECT_POSITION
F4_000391 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ROOT_DIR_SEC = SD_SEC_NUM - SD_ROOT_DIR
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR,W
        SUBWF SD_SEC_NUM,W
        MOVWF SD_ROOT_DIR_SEC
        MOVF SD_ROOT_DIRH,W
        SUBWFB SD_SEC_NUMH,W
        MOVWF SD_ROOT_DIR_SECH
        MOVF SD_ROOT_DIRHH,W
        SUBWFB SD_SEC_NUMHH,W
        MOVWF SD_ROOT_DIR_SECHH
        MOVF SD_ROOT_DIRHHH,W
        SUBWFB SD_SEC_NUMHHH,W
        MOVWF SD_ROOT_DIR_SECHHH
F4_000392 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ROOT_DIR_POS = SD_BUFFER_POS
        MOVFF SD_BUFFER_POS,SD_ROOT_DIR_POS
        MOVFF SD_BUFFER_POSH,SD_ROOT_DIR_POSH
F4_000393 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN_ROOT_DIR = 0
        CLRF SD_EXTENDED_RETURN_ROOT_DIR
F4_000394 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_INSERT_BYTE_INTO_BUFFER
F4_000397 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_WRITE_BUFFER_POS > $0FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_WRITE_BUFFER_POSH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL108
F4_000398 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER1[SD_WRITE_BUFFER_POS - $100] = SD_DATA_IO
        MOVLB 2
RAM_BANK = 2
        MOVF SD_WRITE_BUFFER_POS,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_DATA_IO,INDF0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL109
BC@LL108
F4_000399 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000400 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER0[SD_WRITE_BUFFER_POS] = SD_DATA_IO
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_WRITE_BUFFER_POS,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVFF SD_DATA_IO,INDF0
F4_000401 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL109
        MOVLB 0
RAM_BANK = 0
F4_000402 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_ASSEMBLE_FAT_SECTOR
F4_000405 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_FAT_BUFFER_POS_PREV
        MOVFF SD_FAT_BUFFER_POS_PREV,SD_WRITE_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS_PREVH,SD_WRITE_BUFFER_POSH
F4_000406 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_SEC_PREV * $100)
        MOVFF SD_FAT_SEC_PREV,SD_CLUSTER_NUMH
        MOVLB 2
RAM_BANK = 2
        CLRF SD_CLUSTER_NUM
F4_000407 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_BUFFER_POS_PREV / 2) + SD_CLUSTER_NUM
        BCF STATUS,0,0
        RRCF SD_FAT_BUFFER_POS_PREVH,W
        MOVWF PP7H,0
        RRCF SD_FAT_BUFFER_POS_PREV,W
        MOVWF PP7,0
        MOVF PP7,W,0
        ADDWF SD_CLUSTER_NUM,F
        MOVF PP7H,W,0
        ADDWFC SD_CLUSTER_NUMH,F
F4_000408 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_CLUSTER_NUM
        INFSNZ SD_CLUSTER_NUM,F
        INCF SD_CLUSTER_NUMH,F
F4_000409 EQU $ ; IN [RFID V28.4_LIB.PBP] WHILE SD_CLUSTER_SEQ_NUM_PREV > 1
BC@LL110
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_CLUSTER_SEQ_NUM_PREVH,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO CP@LB20
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_CLUSTER_SEQ_NUM_PREV,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL111
CP@LB20
F4_000410 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE0
        MOVFF SD_CLUSTER_NUM,SD_DATA_IO
F4_000411 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000412 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000413 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE1
        MOVFF SD_CLUSTER_NUMH,SD_DATA_IO
F4_000414 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000415 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000416 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_CLUSTER_NUM
        INFSNZ SD_CLUSTER_NUM,F
        INCF SD_CLUSTER_NUMH,F
F4_000417 EQU $ ; IN [RFID V28.4_LIB.PBP] DEC SD_CLUSTER_SEQ_NUM_PREV
        DECF SD_CLUSTER_SEQ_NUM_PREV,F
        MOVLW 0
        SUBWFB SD_CLUSTER_SEQ_NUM_PREVH,F
F4_000418 EQU $ ; IN [RFID V28.4_LIB.PBP] WEND
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL110
BC@LL111
F4_000419 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_ASSEMBLE_FAT_SECTOR_END_CONT
F4_000422 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_SEC * $100)
        MOVFF SD_FAT_SEC,SD_CLUSTER_NUMH
        MOVLB 2
RAM_BANK = 2
        CLRF SD_CLUSTER_NUM
F4_000423 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = (SD_FAT_BUFFER_POS / 2) + SD_CLUSTER_NUM
        BCF STATUS,0,0
        RRCF SD_FAT_BUFFER_POSH,W
        MOVWF PP7H,0
        RRCF SD_FAT_BUFFER_POS,W
        MOVWF PP7,0
        MOVF PP7,W,0
        ADDWF SD_CLUSTER_NUM,F
        MOVF PP7H,W,0
        ADDWFC SD_CLUSTER_NUMH,F
F4_000424 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE0
        MOVFF SD_CLUSTER_NUM,SD_DATA_IO
F4_000425 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000426 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000427 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE1
        MOVFF SD_CLUSTER_NUMH,SD_DATA_IO
F4_000428 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000429 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
F4_000432 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_DATA_IO
F4_000433 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000434 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000435 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000436 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_WRITE_BYTE_TO_FILE_SUB
F4_000439 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_RW_PTR
        MOVLB 2
RAM_BANK = 2
        INCF SD_BYTES_READ,F
        MOVLW 0
        ADDWFC SD_BYTES_READH,F
        ADDWFC SD_BYTES_READHH,F
        ADDWFC SD_BYTES_READHHH,F
F4_000440 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_RW_PTR > SD_FILE_SIZE THEN
        MOVF SD_BYTES_READ,W
        SUBWF SD_FILE_SIZE,W
        MOVF SD_BYTES_READH,W
        SUBWFB SD_FILE_SIZEH,W
        MOVF SD_BYTES_READHH,W
        SUBWFB SD_FILE_SIZEHH,W
        MOVF SD_BYTES_READHHH,W
        SUBWFB SD_FILE_SIZEHHH,W
        MOVF SD_BYTES_READHHH,W
        XORWF SD_FILE_SIZEHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,4,0
        GO@TO BC@LL113
F4_000441 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_FILE_SIZE
        MOVLB 2
RAM_BANK = 2
        INCF SD_FILE_SIZE,F
        MOVLW 0
        ADDWFC SD_FILE_SIZEH,F
        ADDWFC SD_FILE_SIZEHH,F
        ADDWFC SD_FILE_SIZEHHH,F
F4_000442 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EOF = 1
        BSF _B#VR1,0
F4_000443 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL113
        MOVLB 0
RAM_BANK = 0
F4_000444 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_DATA_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_DATA_BUFFER_POS,F
        INCF SD_DATA_BUFFER_POSH,F
F4_000445 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_DATA_BUFFER_POS > SD_BYTES_PER_SEC THEN
        MOVF SD_DATA_BUFFER_POS,W
        SUBWF SD_BYTES_PER_SEC,W
        MOVF SD_DATA_BUFFER_POSH,W
        SUBWFB SD_BYTES_PER_SECH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL115
F4_000446 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_DATA_SEC
        MOVLB 2
RAM_BANK = 2
        INCF SD_DATA_SEC,F
        MOVLW 0
        ADDWFC SD_DATA_SECH,F
        ADDWFC SD_DATA_SECHH,F
        ADDWFC SD_DATA_SECHHH,F
F4_000447 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_SEC_IN_CLUSTER
        INCF SD_SEC_IN_CLUSTER,F
F4_000448 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEC_IN_CLUSTER > SD_SECS_PER_CLUSTER THEN
        MOVF SD_SEC_IN_CLUSTER,W
        SUBWF SD_SECS_PER_CLUSTER,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL117
F4_000449 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EOF = 0 THEN
        MOVLB 2
RAM_BANK = 2
        RRCF _B#VR1,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL119
F4_000450 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        MOVFF SD_CLUSTER_NUM,PP0
        MOVFF SD_CLUSTER_NUMH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_000451 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_000452 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_000453 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_000454 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000455 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000456 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
F4_000457 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000458 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
F4_000459 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000460 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000461 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000462 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000463 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000464 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_SEC_IN_CLUSTER
F4_000466 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        MOVFF SD_CLUSTER_NUM,PP0
        MOVFF SD_CLUSTER_NUMH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_000467 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        CLRF SD_FAT_BUFFER_POSH
F4_000468 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL120
BC@LL119
F4_000470 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000471 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_CLUSTER_SEQ_IDX
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_CLUSTER_SEQ_IDX,F
        INCF SD_CLUSTER_SEQ_IDXH,F
F4_000472 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_CLUSTER_SEQ_IDX > SD_CLUSTER_SEQ_NUM THEN
        MOVF SD_CLUSTER_SEQ_IDX,W
        SUBWF SD_CLUSTER_SEQ_NUM,W
        MOVF SD_CLUSTER_SEQ_IDXH,W
        SUBWFB SD_CLUSTER_SEQ_NUMH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL122
F4_000473 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS_PREV = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS,SD_FAT_BUFFER_POS_PREV
        MOVFF SD_FAT_BUFFER_POSH,SD_FAT_BUFFER_POS_PREVH
F4_000474 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC_PREV = SD_FAT_SEC
        MOVFF SD_FAT_SECHHH,SD_FAT_SEC_PREVHHH
        MOVFF SD_FAT_SECHH,SD_FAT_SEC_PREVHH
        MOVFF SD_FAT_SECH,SD_FAT_SEC_PREVH
        MOVFF SD_FAT_SEC,SD_FAT_SEC_PREV
F4_000475 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_IDX_PREV = SD_CLUSTER_SEQ_IDX
        MOVFF SD_CLUSTER_SEQ_IDX,SD_CLUSTER_SEQ_IDX_PREV
        MOVFF SD_CLUSTER_SEQ_IDXH,SD_CLUSTER_SEQ_IDX_PREVH
F4_000476 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_NUM_PREV = SD_CLUSTER_SEQ_NUM
        MOVFF SD_CLUSTER_SEQ_NUM,SD_CLUSTER_SEQ_NUM_PREV
        MOVFF SD_CLUSTER_SEQ_NUMH,SD_CLUSTER_SEQ_NUM_PREVH
F4_000478 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_FIND_FREE_CLUSTER
        F@CALL SD_FIND_FREE_CLUSTER
F4_000479 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN = 1 THEN RETURN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL124
        RETURN 0
BC@LL124
F4_000480 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_SEC_NUM = SD_FAT1 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT1,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_000481 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000482 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000483 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000485 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR
        F@CALL SD_ASSEMBLE_FAT_SECTOR
F4_000486 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR_END_CONT
        F@CALL SD_ASSEMBLE_FAT_SECTOR_END_CONT
F4_000487 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000488 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_FAT2 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT2,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT2H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT2HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT2HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_000489 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_000490 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000491 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000492 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000493 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 0
        CLRF SD_RW_OPTION
F4_000494 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
        F@JUMP BC@LL125
BC@LL122
F4_000496 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000497 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_CLUSTER_NUM
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_CLUSTER_NUM,F
        INCF SD_CLUSTER_NUMH,F
F4_000498 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL125
        MOVLB 0
RAM_BANK = 0
F4_000499 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_SEC_IN_CLUSTER
F4_000500 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL120
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL126
BC@LL117
F4_000501 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000502 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_SECTOR
        F@CALL SD_READ_SECTOR
F4_000503 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL126
F4_000504 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_BUFFER_POS = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_DATA_BUFFER_POS
        CLRF SD_DATA_BUFFER_POSH
F4_000505 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL115
        MOVLB 0
RAM_BANK = 0
F4_000506 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE_RW = SD_IO_BYTE
        MOVFF SD_IO_BYTE,SD_BYTE_RW
F4_000507 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SUB
        F@CALL SD_WRITE_SUB
F4_000508 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_EXTENDED_RETURN
F4_000509 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
SD_CHECK_FOR_FILE_SUB
F4_000512 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FIND_ROOT_DIR_ENTRY_F = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_FIND_ROOT_DIR_ENTRY_F
F4_000513 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_FIND_ROOT_DIR_ENTRY
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_FIND_ROOT_DIR_ENTRY
F4_000514 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_READ_SUB
F4_000517 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_BUFFER_IDX > $1FF THEN
        MOVLW 2
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL128
F4_000524 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_IDX = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_IDX
        CLRF SD_BUFFER_IDXH
F4_000525 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_SECTOR_NUM
        INCF SD_SECTOR_NUM,F,0
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,F,0
        ADDWFC SD_SECTOR_NUMHH,F,0
        ADDWFC SD_SECTOR_NUMHHH,F,0
F4_000526 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000527 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000528 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL128
F4_000529 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_BUFFER_IDX > $0FF THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_BUFFER_IDXH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL130
F4_000530 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE_RW = SD_BUFFER1[SD_BUFFER_IDX - $100]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        LFSR 0,SD_BUFFER1
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_BYTE_RW
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL131
BC@LL130
F4_000531 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000532 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE_RW = SD_BUFFER0[SD_BUFFER_IDX]
        LFSR 0,SD_BUFFER0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER_IDX,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_BYTE_RW
F4_000533 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL131
        MOVLB 0
RAM_BANK = 0
F4_000534 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_BUFFER_IDX
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_BUFFER_IDX,F
        INCF SD_BUFFER_IDXH,F
F4_000535 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
RAM_BANK = 0
F4_000541 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_INIT_MSSP MACRO P1
SD_INIT_MSSP    MACRO P1,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT > 1)
        ERROR "(IN ASM) SD_INIT_MSSP - TOO MANY PARAMETERS"
 ELSE
 IF (PRM_COUNT == 0)
        MOVLW 32
        MOVWF SSPCON1,0
 ELSE
 IF (PRM_1 != BYTE) && (PRM_1 != NUM8)
        ERROR "(IN ASM) SD_INIT_MSSP - SPEED(PARAM1) SHOULD BE A BYTE VARIABLE OR NUMBER"
 ENDIF
 IF (PRM_1 == BYTE)
        BYTE_BYTE P1, SSPCON1
        BSF SSPCON1,5,0
 ENDIF
 IF (PRM_1 == NUM8)
        NUM_DWORD P1, SSPCON1
RAM_BANK = 0
        BSF SSPCON1,5,0
 ENDIF
 ENDIF
 ENDIF
        F@CALL SD_INIT_MSSP_SUB
 IF (SD_INIT_MSSP_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_INIT_MSSP - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
SD_SEND_CMD
F4_000580 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPBUF = SD_BYTE0
        MOVFF SD_BYTE0,SSPBUF
F4_000581 EQU $ ; IN [RFID V28.4_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000582 EQU $ ; IN [RFID V28.4_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000583 EQU $ ; IN [RFID V28.4_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000584 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPBUF = SD_BYTE1
        MOVFF SD_BYTE1,SSPBUF
F4_000585 EQU $ ; IN [RFID V28.4_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000586 EQU $ ; IN [RFID V28.4_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000587 EQU $ ; IN [RFID V28.4_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000588 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPBUF = SD_BYTE2
        MOVFF SD_BYTE2,SSPBUF
F4_000589 EQU $ ; IN [RFID V28.4_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000590 EQU $ ; IN [RFID V28.4_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000591 EQU $ ; IN [RFID V28.4_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000592 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPBUF = SD_BYTE3
        MOVFF SD_BYTE3,SSPBUF
F4_000593 EQU $ ; IN [RFID V28.4_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000594 EQU $ ; IN [RFID V28.4_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000595 EQU $ ; IN [RFID V28.4_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000596 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPBUF = SD_BYTE4
        MOVFF SD_BYTE4,SSPBUF
F4_000597 EQU $ ; IN [RFID V28.4_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000598 EQU $ ; IN [RFID V28.4_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000599 EQU $ ; IN [RFID V28.4_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
SD_SEND_BYTE
F4_000601 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPBUF = SD_BYTE5
        MOVFF SD_BYTE5,SSPBUF
F4_000602 EQU $ ; IN [RFID V28.4_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000603 EQU $ ; IN [RFID V28.4_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000604 EQU $ ; IN [RFID V28.4_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000605 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_RECEIVE_BYTE
F4_000608 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPBUF = $FF
        SETF SSPBUF,0
F4_000609 EQU $ ; IN [RFID V28.4_LIB.PBP] BTFSS SSPSTAT.0
        BTFSS SSPSTAT,0
F4_000610 EQU $ ; IN [RFID V28.4_LIB.PBP] BRA $ - 2
        BRA $ - 2
F4_000611 EQU $ ; IN [RFID V28.4_LIB.PBP] MOVFF SSPBUF,SD_BYTER
        MOVFF SSPBUF,SD_BYTER
F4_000612 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_INIT_MSSP_SUB
F4_000616 EQU $ ; IN [RFID V28.4_LIB.PBP] SSPSTAT = %01000000
        MOVLW 64
        MOVWF SSPSTAT,0
F4_000617 EQU $ ; IN [RFID V28.4_LIB.PBP] OUTPUT SD_CS : OUTPUT SD_DI : OUTPUT SD_CLK : INPUT SD_DO
        BCF TRISC,2,0
        BCF TRISC,5,0
        BCF TRISC,3,0
        BSF TRISC,4,0
F4_000618 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000619 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE0 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE0
F4_000620 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE1 = $FF
        SETF SD_BYTE1
F4_000621 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE2 = $FF
        SETF SD_BYTE2
F4_000622 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE3 = $FF
        SETF SD_BYTE3
F4_000623 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE4 = $FF
        SETF SD_BYTE4
F4_000624 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000625 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000626 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_CMD
        F@CALL SD_SEND_CMD
F4_000628 EQU $ ; IN [RFID V28.4_LIB.PBP] DELAYMS 100
        MOVLW 100
        F@CALL DL@MS
F4_000629 EQU $ ; IN [RFID V28.4_LIB.PBP] LOW SD_CS
        BCF TRISC,2,0
        BCF LATC,2,0
F4_000630 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE0 = $40
        MOVLW 64
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000631 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE1 = $00
        CLRF SD_BYTE1
F4_000632 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE2 = $00
        CLRF SD_BYTE2
F4_000633 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE3 = $00
        CLRF SD_BYTE3
F4_000634 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE4 = $00
        CLRF SD_BYTE4
F4_000635 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $95
        MOVLW 149
        MOVWF SD_BYTE5
F4_000636 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000637 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_REQD = $01
        MOVLW 1
        MOVWF SD_SEEK_RESPONSE_REQD,0
F4_000638 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FF
        SETF SD_SEEK_RESPONSE_IDX,0
        CLRF SD_SEEK_RESPONSE_IDXH,0
F4_000639 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000640 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEEK_RESPONSE_RETURN = 1 THEN
        MOVLW 1
        SUBWF SD_SEEK_RESPONSE_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL133
F4_000641 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000642 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
F4_000643 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
F4_000644 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL133
F4_000646 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IDX = $FF
        SETF SD_IDX,0
F4_000647 EQU $ ; IN [RFID V28.4_LIB.PBP] REPEAT
BC@LL134
F4_000648 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE0 = $41
        MOVLW 65
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTE0
F4_000649 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE1 = $00
        CLRF SD_BYTE1
F4_000650 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE2 = $00
        CLRF SD_BYTE2
F4_000651 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE3 = $00
        CLRF SD_BYTE3
F4_000652 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE4 = $00
        CLRF SD_BYTE4
F4_000653 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FF
        SETF SD_BYTE5
F4_000654 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_CMD
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_CMD
F4_000655 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_REQD = $00
        CLRF SD_SEEK_RESPONSE_REQD,0
F4_000656 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEEK_RESPONSE_IDX = $FF
        SETF SD_SEEK_RESPONSE_IDX,0
        CLRF SD_SEEK_RESPONSE_IDXH,0
F4_000657 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEEK_RESPONSE
        F@CALL SD_SEEK_RESPONSE
F4_000658 EQU $ ; IN [RFID V28.4_LIB.PBP] DEC SD_IDX
        DECF SD_IDX,F,0
F4_000659 EQU $ ; IN [RFID V28.4_LIB.PBP] UNTIL SD_SEEK_RESPONSE_RETURN = 0 OR SD_IDX = 0
        MOVLW 1
        MOVF SD_SEEK_RESPONSE_RETURN,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVLW 1
        MOVF SD_IDX,F,0
        BTFSS STATUS,2,0
        MOVLW 0
        IORWF SP#P9,F,0
        BTFSC STATUS,2,0
        GO@TO BC@LL134
BC@LL135
F4_000660 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_IDX = 0 THEN
        MOVF SD_IDX,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL137
F4_000661 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000662 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN = 1
        MOVLW 1
        MOVWF SD_RETURN,0
F4_000663 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
F4_000664 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL137
F4_000665 EQU $ ; IN [RFID V28.4_LIB.PBP] HIGH SD_CS
        BCF TRISC,2,0
        BSF LATC,2,0
F4_000666 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTE5 = $FF
        MOVLB 2
RAM_BANK = 2
        SETF SD_BYTE5
F4_000667 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SEND_BYTE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SEND_BYTE
F4_000668 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_IDX = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BUFFER_IDX
        CLRF SD_BUFFER_IDXH
F4_000669 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN = 0
        CLRF SD_RETURN,0
F4_000670 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
RAM_BANK = 0
F4_000676 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_OPEN_FILE MACRO
SD_OPEN_FILE    MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_OPEN_FILE_SUB
 IF (RETURN_TYPE !=BYTE) && (RETURN_TYPE !=WORD) && (RETURN_TYPE !=DWORD)
        ERROR "(IN ASM) SD_OPEN_FILE - RETURN VARIABLE SHOULD BE A BYTE, WORD, OR DWORD VARIABLE"
 ELSE
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 IF (RETURN_TYPE == WORD)
        BYTE_WORD SD_EXTENDED_RETURN, RETURN_VAR
RAM_BANK = 0
 ENDIF
 IF (RETURN_TYPE == DWORD)
        BYTE_DWORD SD_EXTENDED_RETURN, RETURN_VAR
RAM_BANK = 0
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
SD_OPEN_FILE_SUB
F4_000700 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_CHECK_FOR_FILE_SUB
        F@CALL SD_CHECK_FOR_FILE_SUB
F4_000701 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR <> 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_EXTENDED_RETURN_ROOT_DIR,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL139
F4_000702 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000703 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000704 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL139
F4_000705 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM.BYTE0 = SD_ROOT_DIR_FILE[$1A]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#26,W
        MOVWF SD_CLUSTER_NUM
F4_000706 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM.BYTE1 = SD_ROOT_DIR_FILE[$1B]
        MOVF SD_ROOT_DIR_FILE#27,W
        MOVWF SD_CLUSTER_NUMH
F4_000707 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE0 = SD_ROOT_DIR_FILE[$1C]
        MOVF SD_ROOT_DIR_FILE#28,W
        MOVWF SD_FILE_SIZE
F4_000708 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE1 = SD_ROOT_DIR_FILE[$1D]
        MOVF SD_ROOT_DIR_FILE#29,W
        MOVWF SD_FILE_SIZEH
F4_000709 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE2 = SD_ROOT_DIR_FILE[$1E]
        MOVF SD_ROOT_DIR_FILE#30,W
        MOVWF SD_FILE_SIZEHH
F4_000710 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE3 = SD_ROOT_DIR_FILE[$1F]
        MOVF SD_ROOT_DIR_FILE#31,W
        MOVWF SD_FILE_SIZEHHH
F4_000711 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000712 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000713 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVWF SD_SEC_IN_CLUSTER
F4_000714 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000715 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVWF SD_RW_OPTION
F4_000716 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000718 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_RETURN = 1 THEN
        MOVLW 1
        SUBWF SD_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL141
F4_000719 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000720 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000721 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL141
F4_000722 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_BUFFER_POS = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_BUFFER_POS
        CLRF SD_DATA_BUFFER_POSH
F4_000723 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTES_READ = 0
        CLRF SD_BYTES_READHHH
        CLRF SD_BYTES_READHH
        CLRF SD_BYTES_READH
        CLRF SD_BYTES_READ
F4_000724 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_FILE_SIZE > 0 THEN
        BCF STATUS,3,0
        BTFSC SD_FILE_SIZEHHH,7
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL143
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_SIZE,W
        IORWF SD_FILE_SIZEH,W
        IORWF SD_FILE_SIZEHH,W
        IORWF SD_FILE_SIZEHHH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL143
F4_000725 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EOF = 0
        MOVLB 2
RAM_BANK = 2
        BCF _B#VR1,0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL144
BC@LL143
F4_000726 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000727 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EOF = 1
        MOVLB 2
RAM_BANK = 2
        BSF _B#VR1,0
F4_000728 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL144
        MOVLB 0
RAM_BANK = 0
F4_000729 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IS_DIRTY = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_IS_DIRTY
F4_000730 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_NUM = 1
        MOVLW 1
        MOVWF SD_CLUSTER_SEQ_NUM
        CLRF SD_CLUSTER_SEQ_NUMH
F4_000731 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_000732 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
RAM_BANK = 0
F4_000738 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_READ_BYTE_FROM_FILE MACRO
SD_READ_BYTE_FROM_FILE  MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_READ_BYTE_FROM_FILE_SUB
 IF (SD_READ_BYTE_FROM_FILE_RETURN != 1)
        ERROR "(IN ASM) SD_READ_BYTE_FROM_FILE -  MANDATORY RETURN PARAMETER MISSING"
 ELSE
 IF (RETURN_TYPE !=BYTE) && (RETURN_TYPE !=WORD) && (RETURN_TYPE !=DWORD)
        ERROR "(IN ASM) SD_READ_BYTE_FROM_FILE - RETURN VARIABLE SHOULD BE A BYTE, WORD OR DWORD VARIABLE"
 ELSE
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_BYTE_RW, RETURN_VAR
 ENDIF
 IF (RETURN_TYPE == WORD)
        BYTE_WORD SD_BYTE_RW, RETURN_VAR
RAM_BANK = 0
 ENDIF
 IF (RETURN_TYPE == DWORD)
        BYTE_DWORD SD_BYTE_RW, RETURN_VAR
RAM_BANK = 0
 ENDIF
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
SD_READ_BYTE_FROM_FILE_SUB
F4_000766 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EOF = 0 THEN
        MOVLB 2
RAM_BANK = 2
        RRCF _B#VR1,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL146
F4_000767 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_DATA_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_DATA_BUFFER_POS,F
        INCF SD_DATA_BUFFER_POSH,F
F4_000768 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_DATA_BUFFER_POS > SD_BYTES_PER_SEC THEN
        MOVF SD_DATA_BUFFER_POS,W
        SUBWF SD_BYTES_PER_SEC,W
        MOVF SD_DATA_BUFFER_POSH,W
        SUBWFB SD_BYTES_PER_SECH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL148
F4_000769 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_IS_DIRTY = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_IS_DIRTY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL150
F4_000770 EQU $ ; IN [RFID V28.4_LIB.PBP] REPEAT
BC@LL151
F4_000771 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000772 EQU $ ; IN [RFID V28.4_LIB.PBP] UNTIL SD_RETURN = 0
        MOVF SD_RETURN,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL151
BC@LL152
F4_000773 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IS_DIRTY = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_IS_DIRTY
F4_000774 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL150
        MOVLB 0
RAM_BANK = 0
F4_000775 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_DATA_SEC
        MOVLB 2
RAM_BANK = 2
        INCF SD_DATA_SEC,F
        MOVLW 0
        ADDWFC SD_DATA_SECH,F
        ADDWFC SD_DATA_SECHH,F
        ADDWFC SD_DATA_SECHHH,F
F4_000776 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_SEC_IN_CLUSTER
        INCF SD_SEC_IN_CLUSTER,F
F4_000777 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SEC_IN_CLUSTER > SD_SECS_PER_CLUSTER THEN
        MOVF SD_SEC_IN_CLUSTER,W
        SUBWF SD_SECS_PER_CLUSTER,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL154
F4_000778 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        MOVFF SD_CLUSTER_NUM,PP0
        MOVFF SD_CLUSTER_NUMH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_000779 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_000780 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_000781 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_000782 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000783 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000785 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
F4_000786 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_000787 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
F4_000788 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_000789 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_000790 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_000791 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000792 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000794 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_SEC_IN_CLUSTER
F4_000795 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL154
        MOVLB 0
RAM_BANK = 0
F4_000796 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_BUFFER_POS = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_DATA_BUFFER_POS
        CLRF SD_DATA_BUFFER_POSH
F4_000797 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL148
        MOVLB 0
RAM_BANK = 0
F4_000798 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_SUB
        F@CALL SD_READ_SUB
F4_000799 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_BYTES_READ
        MOVLB 2
RAM_BANK = 2
        INCF SD_BYTES_READ,F
        MOVLW 0
        ADDWFC SD_BYTES_READH,F
        ADDWFC SD_BYTES_READHH,F
        ADDWFC SD_BYTES_READHHH,F
F4_000800 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_BYTES_READ >= SD_FILE_SIZE THEN SD_EOF = 1
        MOVF SD_FILE_SIZE,W
        SUBWF SD_BYTES_READ,W
        MOVF SD_FILE_SIZEH,W
        SUBWFB SD_BYTES_READH,W
        MOVF SD_FILE_SIZEHH,W
        SUBWFB SD_BYTES_READHH,W
        MOVF SD_FILE_SIZEHHH,W
        SUBWFB SD_BYTES_READHHH,W
        MOVF SD_BYTES_READHHH,W
        XORWF SD_FILE_SIZEHHH,W
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,4,0
        GO@TO BC@LL156
        MOVLB 2
RAM_BANK = 2
        BSF _B#VR1,0
BC@LL156
        MOVLB 0
RAM_BANK = 0
F4_000801 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL146
F4_000802 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
RAM_BANK = 0
F4_000808 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_INIT_FS_MSSP MACRO P1
SD_INIT_FS_MSSP MACRO P1,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT > 1)
        ERROR "(IN ASM) SD_INIT_FS_MSSP - TOO MANY PARAMETERS"
 ELSE
 IF (PRM_COUNT == 0)
        MOVLW 32
        MOVWF SSPCON1,0
 ELSE
 IF (PRM_1 != BYTE) && (PRM_1 != NUM8)
        ERROR "(IN ASM) SD_INIT_FS_MSSP - SPEED(PARAM1) SHOULD BE A BYTE VARIABLE OR NUMBER"
 ENDIF
 IF (PRM_1 == BYTE)
        BYTE_BYTE P1, SSPCON1
        BSF SSPCON1,5,0
 ENDIF
 IF (PRM_1 == NUM8)
        NUM_DWORD P1, SSPCON1
RAM_BANK = 0
        BSF SSPCON1,5,0
 ENDIF
 ENDIF
 ENDIF
        F@CALL SD_INIT_FS_MSSP_SUB
 IF (SD_INIT_FS_MSSP_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_INIT_FS_MSSP - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
SD_INIT_FS_MSSP_SUB
F4_000847 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN_INT = SD_INIT_MSSP SSPCON1
VARIABLE PRM_1=2
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_INIT_MSSP_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=SSPCON1
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=SD_EXTENDED_RETURN_INT,SD_INIT_MSSP_RETURN=1,PRM_COUNT=1
        SD_INIT_MSSP SSPCON1,0,0,0,0,0,0,0,0,0
F4_000848 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN_INT = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN_INT,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL158
F4_000849 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_000850 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_000851 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL158
F4_000852 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = $00
        CLRF SD_SECTOR_NUMHHH,0
        CLRF SD_SECTOR_NUMHH,0
        CLRF SD_SECTOR_NUMH,0
        CLRF SD_SECTOR_NUM,0
F4_000853 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_000854 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000856 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_BUFFER0[0] = $EB AND SD_BUFFER0[2] = $90 THEN
        MOVF SD_BUFFER0#0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 235
        SUBWF PBP#VAR0,W,0
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        MOVWF SP#P9,0
        MOVF SD_BUFFER0#2,W,0
        MOVWF PBP#VAR0,0
        MOVLW 144
        SUBWF PBP#VAR0,W,0
        MOVLW 1
        BTFSS STATUS,2,0
        MOVLW 0
        ANDWF SP#P9,F,0
        BTFSC STATUS,2,0
        GO@TO BC@LL160
F4_000858 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BOOT_RECORD = $0000
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BOOT_RECORD
        CLRF SD_BOOT_RECORDH
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL159
F4_000859 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSEIF SD_BUFFER0[0] = $E9 THEN
BC@LL160
        MOVF SD_BUFFER0#0,W,0
        MOVWF PBP#VAR0,0
        MOVLW 233
        SUBWF PBP#VAR0,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL161
F4_000861 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BOOT_RECORD = $0000
        MOVLB 2
RAM_BANK = 2
        CLRF SD_BOOT_RECORD
        CLRF SD_BOOT_RECORDH
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL162
BC@LL161
F4_000862 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_000864 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BOOT_RECORD = SD_BUFFER1[$0C6] + 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_BUFFER1#198,W
        MOVWF PBP#VAR1,0
        MOVFF PBP#VAR1,SD_BOOT_RECORD
        CLRF SD_BOOT_RECORDH
F4_000865 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL162
        MOVLB 0
RAM_BANK = 0
BC@LL159
F4_000866 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_BOOT_RECORD
        MOVFF SD_BOOT_RECORD,SD_SECTOR_NUM
        MOVFF SD_BOOT_RECORDH,SD_SECTOR_NUMH
        CLRF SD_SECTOR_NUMHH,0
        CLRF SD_SECTOR_NUMHHH,0
F4_000867 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_RW_OPTION
F4_000868 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000870 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTES_PER_SEC.BYTE0 = SD_BUFFER0[$0B]
        MOVF SD_BUFFER0#11,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_BYTES_PER_SEC
F4_000871 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BYTES_PER_SEC.BYTE1 = SD_BUFFER0[$0C]
        MOVF SD_BUFFER0#12,W,0
        MOVWF SD_BYTES_PER_SECH
F4_000872 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECS_PER_CLUSTER = SD_BUFFER0[$0D]
        MOVF SD_BUFFER0#13,W,0
        MOVWF SD_SECS_PER_CLUSTER
F4_000873 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RESERVED_SECS.BYTE0 = SD_BUFFER0[$0E]
        MOVF SD_BUFFER0#14,W,0
        MOVWF SD_RESERVED_SECS
F4_000874 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RESERVED_SECS.BYTE1 = SD_BUFFER0[$0F]
        MOVF SD_BUFFER0#15,W,0
        MOVWF SD_RESERVED_SECSH
F4_000875 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_FATS = SD_BUFFER0[$10]
        MOVF SD_BUFFER0#16,W,0
        MOVWF SD_NUM_OF_FATS
F4_000876 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_ROOT_ENTRIES.BYTE0 = SD_BUFFER0[$11]
        MOVF SD_BUFFER0#17,W,0
        MOVWF SD_NUM_OF_ROOT_ENTRIES
F4_000877 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_ROOT_ENTRIES.BYTE1 = SD_BUFFER0[$12]
        MOVF SD_BUFFER0#18,W,0
        MOVWF SD_NUM_OF_ROOT_ENTRIESH
F4_000878 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECS_PER_FAT.BYTE0 = SD_BUFFER0[$16]
        MOVF SD_BUFFER0#22,W,0
        MOVWF SD_SECS_PER_FAT
F4_000879 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECS_PER_FAT.BYTE1 = SD_BUFFER0[$17]
        MOVF SD_BUFFER0#23,W,0
        MOVWF SD_SECS_PER_FATH
F4_000880 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_SECS.BYTE0 = SD_BUFFER0[$20]
        MOVF SD_BUFFER0#32,W,0
        MOVWF SD_NUM_OF_SECS
F4_000881 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_SECS.BYTE1 = SD_BUFFER0[$21]
        MOVF SD_BUFFER0#33,W,0
        MOVWF SD_NUM_OF_SECSH
F4_000882 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_SECS.BYTE2 = SD_BUFFER0[$22]
        MOVF SD_BUFFER0#34,W,0
        MOVWF SD_NUM_OF_SECSHH
F4_000883 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NUM_OF_SECS.BYTE3 = SD_BUFFER0[$23]
        MOVF SD_BUFFER0#35,W,0
        MOVWF SD_NUM_OF_SECSHHH
F4_000884 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT1 = SD_BOOT_RECORD + SD_RESERVED_SECS
        MOVF SD_RESERVED_SECS,W
        ADDWF SD_BOOT_RECORD,W
        MOVWF SD_FAT1
        MOVF SD_RESERVED_SECSH,W
        ADDWFC SD_BOOT_RECORDH,W
        MOVWF SD_FAT1H
        MOVLW 0
        CLRF SD_FAT1HH
        ADDWFC SD_FAT1HH,F
        CLRF SD_FAT1HHH
F4_000885 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT2 = SD_BOOT_RECORD + SD_RESERVED_SECS + SD_SECS_PER_FAT
        MOVF SD_RESERVED_SECS,W
        ADDWF SD_BOOT_RECORD,W
        MOVWF PP7,0
        MOVF SD_RESERVED_SECSH,W
        ADDWFC SD_BOOT_RECORDH,W
        MOVWF PP7H,0
        MOVLW 0
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        MOVF SD_SECS_PER_FAT,W
        ADDWF PP7,W,0
        MOVWF SD_FAT2
        MOVF SD_SECS_PER_FATH,W
        ADDWFC PP7H,W,0
        MOVWF SD_FAT2H
        MOVLW 0
        ADDWFC PP7HH,W,0
        MOVWF SD_FAT2HH
        MOVLW 0
        ADDWFC PP7HHH,W,0
        MOVWF SD_FAT2HHH
F4_000886 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ROOT_DIR = SD_NUM_OF_FATS * SD_SECS_PER_FAT
        CLRF PP0HHH,0
        CLRF PP0HH,0
        CLRF PP0H,0
        MOVFF SD_NUM_OF_FATS,PP0
        MOVFF SD_SECS_PER_FAT,PP2
        MOVFF SD_SECS_PER_FATH,PP2H
        CLRF PP2HH,0
        CLRF PP2HHH,0
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_ROOT_DIRHHH
        MOVFF PP0HH,SD_ROOT_DIRHH
        MOVFF PP0H,SD_ROOT_DIRH
        MOVFF PP0,SD_ROOT_DIR
F4_000887 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_ROOT_DIR = SD_BOOT_RECORD + SD_RESERVED_SECS + SD_ROOT_DIR
        MOVF SD_RESERVED_SECS,W
        ADDWF SD_BOOT_RECORD,W
        MOVWF PP7,0
        MOVF SD_RESERVED_SECSH,W
        ADDWFC SD_BOOT_RECORDH,W
        MOVWF PP7H,0
        MOVLW 0
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        MOVF PP7,W,0
        ADDWF SD_ROOT_DIR,F
        MOVF PP7H,W,0
        ADDWFC SD_ROOT_DIRH,F
        MOVF PP7HH,W,0
        ADDWFC SD_ROOT_DIRHH,F
        MOVF PP7HHH,W,0
        ADDWFC SD_ROOT_DIRHHH,F
F4_000888 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECS_IN_ROOT = SD_NUM_OF_ROOT_ENTRIES * 32
        MOVF SD_NUM_OF_ROOT_ENTRIESH,W
        MULLW 32
        MOVFF PRODL,SD_SECS_IN_ROOTH
        MOVF SD_NUM_OF_ROOT_ENTRIES,W
        MULLW 32
        MOVFF PRODL,SD_SECS_IN_ROOT
        MOVF PRODH,W,0
        ADDWF SD_SECS_IN_ROOTH,F
F4_000889 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECS_IN_ROOT = SD_SECS_IN_ROOT / SD_BYTES_PER_SEC
        MOVFF SD_SECS_IN_ROOT,PP0
        MOVFF SD_SECS_IN_ROOTH,PP0H
        MOVFF SD_BYTES_PER_SEC,PP1
        MOVFF SD_BYTES_PER_SECH,PP1H
        F@CALL D@VD
        MOVWF SD_SECS_IN_ROOT
        MOVFF PP0H,SD_SECS_IN_ROOTH
F4_000890 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_AREA = SD_ROOT_DIR + SD_SECS_IN_ROOT
        MOVF SD_SECS_IN_ROOT,W
        ADDWF SD_ROOT_DIR,W
        MOVWF SD_DATA_AREA
        MOVF SD_SECS_IN_ROOTH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF SD_DATA_AREAH
        MOVLW 0
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF SD_DATA_AREAHH
        MOVLW 0
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF SD_DATA_AREAHHH
F4_000892 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_BOOT_RECORD + SD_NUM_OF_SECS - 1
        MOVF SD_BOOT_RECORD,W
        ADDWF SD_NUM_OF_SECS,W
        MOVWF PP7,0
        MOVF SD_BOOT_RECORDH,W
        ADDWFC SD_NUM_OF_SECSH,W
        MOVWF PP7H,0
        MOVLW 0
        ADDWFC SD_NUM_OF_SECSHH,W
        MOVWF PP7HH,0
        MOVLW 0
        ADDWFC SD_NUM_OF_SECSHHH,W
        MOVWF PP7HHH,0
        DECF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVLW 0
        SUBWFB PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVLW 0
        SUBWFB PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVLW 0
        SUBWFB PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_000893 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM - SD_DATA_AREA + 1
        MOVF SD_DATA_AREA,W
        SUBWF SD_SECTOR_NUM,W,0
        MOVWF PP7,0
        MOVF SD_DATA_AREAH,W
        SUBWFB SD_SECTOR_NUMH,W,0
        MOVWF PP7H,0
        MOVF SD_DATA_AREAHH,W
        SUBWFB SD_SECTOR_NUMHH,W,0
        MOVWF PP7HH,0
        MOVF SD_DATA_AREAHHH,W
        SUBWFB SD_SECTOR_NUMHHH,W,0
        MOVWF PP7HHH,0
        INCF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVLW 0
        ADDWFC PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVLW 0
        ADDWFC PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_000894 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM / SD_SECS_PER_CLUSTER
        MOVFF SD_SECTOR_NUMHHH,PP0HHH
        MOVFF SD_SECTOR_NUMHH,PP0HH
        MOVFF SD_SECTOR_NUMH,PP0H
        MOVFF SD_SECTOR_NUM,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL L@DIV
        MOVFF PP0HHH,SD_SECTOR_NUMHHH
        MOVFF PP0HH,SD_SECTOR_NUMHH
        MOVFF PP0H,SD_SECTOR_NUMH
        MOVFF PP0,SD_SECTOR_NUM
F4_000895 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_LAST_CLUSTER = SD_SECTOR_NUM + 1
        MOVLW 1
        ADDWF SD_SECTOR_NUM,W,0
        MOVWF SD_LAST_CLUSTER
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,W,0
        MOVWF SD_LAST_CLUSTERH
F4_000897 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_NAME = "        "
        LFSR 0,SD_FILE_NAME
        MOVLW HIGH (STR@LB1)
        MOVWF TBLPTRLH
        MOVLW LOW (STR@LB1)
        MOVWF TBLPTRL,0
        F@CALL LOAD@MSTR
        CLRF INDF0,0
F4_000898 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_EXT = "   "
        LFSR 0,SD_FILE_EXT
        MOVLW 32
        MOVWF POSTINC0
        MOVWF POSTINC0,0
        MOVWF POSTINC0,0
        CLRF INDF0,0
F4_000899 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DAY = 1
        MOVLW 1
        MOVWF SD_DAY
F4_000900 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_MONTH = 1
        MOVWF SD_MONTH
F4_000901 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_YEAR = 0
        CLRF SD_YEAR
F4_000902 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_MSECONDS = 0
        CLRF SD_MSECONDS
F4_000903 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECONDS = 0
        CLRF SD_SECONDS
F4_000904 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_MINUTES = 0
        CLRF SD_MINUTES
F4_000905 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_HOURS = 0
        CLRF SD_HOURS
F4_000906 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_NUM = 0
        CLRF SD_FILE_NUM
        CLRF SD_FILE_NUMH
F4_000907 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_000908 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
RAM_BANK = 0
F4_000914 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CHECK_FOR_FILE MACRO
SD_CHECK_FOR_FILE       MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_CHECK_FOR_FILE_SUB
 IF (SD_CHECK_FOR_FILE_RETURN != 1)
        ERROR "(IN ASM) SD_CHECK_FOR_FILE -  MANDATORY RETURN PARAMETER MISSING"
 ELSE
 IF (RETURN_TYPE != BYTE) && (RETURN_TYPE != WORD) && (RETURN_TYPE != DWORD)
        ERROR "(IN ASM) SD_CHECK_FOR_FILE - RETURN VARIABLE SHOULD BE A BYTE, WORD OR DWORD VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN_ROOT_DIR, RETURN_VAR
 ENDIF
 IF (RETURN_TYPE == WORD)
        BYTE_WORD SD_EXTENDED_RETURN_ROOT_DIR, RETURN_VAR
RAM_BANK = 0
 ENDIF
 IF (RETURN_TYPE == DWORD)
        BYTE_DWORD SD_EXTENDED_RETURN_ROOT_DIR, RETURN_VAR
RAM_BANK = 0
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
RAM_BANK = 0
F4_000943 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLOSE_FILE MACRO
SD_CLOSE_FILE   MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT != 0)
        ERROR "(IN ASM) NO PARAMETERS REQUIRED FOR SD_CLOSE_FILE"
        EXITM
 ENDIF
        F@CALL SD_CLOSE_FILE_SUB
        ENDM
RAM_BANK = 0
SD_CLOSE_FILE_SUB
F4_000965 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_IS_DIRTY = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_IS_DIRTY,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL164
F4_000966 EQU $ ; IN [RFID V28.4_LIB.PBP] REPEAT
BC@LL165
F4_000967 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000968 EQU $ ; IN [RFID V28.4_LIB.PBP] UNTIL SD_RETURN = 0
        MOVF SD_RETURN,F,0
        BTFSS STATUS,2,0
        GO@TO BC@LL165
BC@LL166
F4_000969 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL164
F4_000970 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_SEC_NUM = SD_ROOT_DIR + SD_ROOT_DIR_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_SEC,W
        ADDWF SD_ROOT_DIR,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_ROOT_DIR_SECH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_ROOT_DIR_SECHH,W
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_ROOT_DIR_SECHHH,W
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_000971 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000972 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000973 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000975 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $1C
        MOVLW 28
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000976 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE0
        MOVFF SD_FILE_SIZE,SD_DATA_IO
F4_000977 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000978 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000979 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE1
        MOVFF SD_FILE_SIZEH,SD_DATA_IO
F4_000980 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000981 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000982 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE2
        MOVFF SD_FILE_SIZEHH,SD_DATA_IO
F4_000983 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000984 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_000985 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_FILE_SIZE.BYTE3
        MOVFF SD_FILE_SIZEHHH,SD_DATA_IO
F4_000986 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_000987 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $16
        MOVLW 22
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_000988 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SET_FILE_TIME_MODIFIED
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SET_FILE_TIME_MODIFIED
F4_000989 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_000990 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EOF = 1 THEN
        MOVLB 2
RAM_BANK = 2
        RRCF _B#VR1,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL168
        BCF STATUS,3,0
        MOVLB 2
RAM_BANK = 2
        BTFSS _B#VR1,0
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL168
F4_000991 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS_PREV = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS,SD_FAT_BUFFER_POS_PREV
        MOVFF SD_FAT_BUFFER_POSH,SD_FAT_BUFFER_POS_PREVH
F4_000992 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC_PREV = SD_FAT_SEC
        MOVFF SD_FAT_SECHHH,SD_FAT_SEC_PREVHHH
        MOVFF SD_FAT_SECHH,SD_FAT_SEC_PREVHH
        MOVFF SD_FAT_SECH,SD_FAT_SEC_PREVH
        MOVFF SD_FAT_SEC,SD_FAT_SEC_PREV
F4_000993 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_SEC_NUM = SD_FAT1 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT1,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_000994 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_000995 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_000996 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_000998 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_NUM_PREV = SD_CLUSTER_SEQ_IDX
        MOVFF SD_CLUSTER_SEQ_IDX,SD_CLUSTER_SEQ_NUM_PREV
        MOVFF SD_CLUSTER_SEQ_IDXH,SD_CLUSTER_SEQ_NUM_PREVH
F4_000999 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR
        F@CALL SD_ASSEMBLE_FAT_SECTOR
F4_001000 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
        F@CALL SD_ASSEMBLE_FAT_SECTOR_END_CLOSE
F4_001001 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001002 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_FAT2 + SD_FAT_SEC_PREV
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC_PREV,W
        ADDWF SD_FAT2,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SEC_PREVH,W
        ADDWFC SD_FAT2H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SEC_PREVHH,W
        ADDWFC SD_FAT2HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SEC_PREVHHH,W
        ADDWFC SD_FAT2HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_001003 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_001004 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL168
F4_001005 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
SD_SET_FILE_TIME_CREATE
F4_001009 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_MSECONDS + ((SD_SECONDS // 2) * 100)
        MOVFF SD_MSECONDS,PP7
        CLRF PP7H,0
        MOVFF SD_SECONDS,PP8
        CLRF PP8H,0
        MOVLW 1
        ANDWF PP8,F,0
        CLRF PP8H,0
        MOVF PP8H,W,0
        MULLW 100
        MOVFF PRODL,PP8H
        MOVF PP8,W,0
        MULLW 100
        MOVFF PRODL,PP8
        MOVF PRODH,W,0
        ADDWF PP8H,F,0
        MOVF PP7,W,0
        ADDWF PP8,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_DATA_IO
F4_001010 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001011 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
SD_SET_FILE_TIME_MODIFIED
        MOVLB 0
RAM_BANK = 0
F4_001013 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = (SD_SECONDS / 2) | (SD_MINUTES << 5)
        MOVFF SD_SECONDS,PP7
        CLRF PP7H,0
        BCF STATUS,0,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        MOVFF SD_MINUTES,PP8
        CLRF PP8H,0
        MOVLW 5
SL@LB44
        BCF STATUS,0,0
        RLCF PP8,F,0
        RLCF PP8H,F,0
        DECFSZ WREG,F,0
        BRA SL@LB44
        MOVF PP7,W,0
        IORWF PP8,W,0
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_DATA_IO
F4_001014 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001015 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_001016 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = (SD_MINUTES >> 3) | (SD_HOURS << 3)
        MOVFF SD_MINUTES,PP7
        CLRF PP7H,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        MOVLW 31
        ANDWF PP7H,F,0
        MOVFF SD_HOURS,PP8
        CLRF PP8H,0
        MOVLW 3
SL@LB45
        BCF STATUS,0,0
        RLCF PP8,F,0
        RLCF PP8H,F,0
        DECFSZ WREG,F,0
        BRA SL@LB45
        MOVF PP7,W,0
        IORWF PP8,W,0
        MOVWF SD_DATA_IO
F4_001017 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001018 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_001019 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_DAY | (SD_MONTH << 5)
        MOVFF SD_MONTH,PP7H
        CLRF PP7,0
        BCF STATUS,0,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        MOVF SD_DAY,W
        IORWF PP7,W,0
        MOVWF SD_DATA_IO
F4_001020 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001021 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_001022 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = (SD_MONTH >> 3) | ((SD_YEAR + 20) << 1)
        MOVFF SD_MONTH,PP7
        CLRF PP7H,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        RRCF PP7H,F,0
        RRCF PP7,F,0
        MOVLW 31
        ANDWF PP7H,F,0
        MOVFF SD_YEAR,PP8
        CLRF PP8H,0
        MOVLW 20
        ADDWF PP8,F,0
        MOVLW 0
        ADDWFC PP8H,F,0
        BCF STATUS,0,0
        RLCF PP8,F,0
        RLCF PP8H,F,0
        MOVF PP7,W,0
        IORWF PP8,W,0
        MOVWF SD_DATA_IO
F4_001023 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001024 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
RAM_BANK = 0
F4_001030 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_NEW_FILE MACRO
SD_NEW_FILE     MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT != 0)
        ERROR "(IN ASM) NO PARAMETERS REQUIRED FOR SD_NEW_FILE"
        EXITM
 ENDIF
        F@CALL SD_NEW_FILE_SUB
 IF (SD_NEW_FILE_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_NEW_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
SD_NEW_FILE_SUB
F4_001055 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_RETURN_F
F4_001056 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = 0
        CLRF SD_FAT_SECHHH
        CLRF SD_FAT_SECHH
        CLRF SD_FAT_SECH
        CLRF SD_FAT_SEC
F4_001057 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = 0
        CLRF SD_FAT_BUFFER_POS
        CLRF SD_FAT_BUFFER_POSH
F4_001058 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_NUM = 0
        CLRF SD_CLUSTER_SEQ_NUM
        CLRF SD_CLUSTER_SEQ_NUMH
F4_001059 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_FIND_FREE_CLUSTER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_FIND_FREE_CLUSTER
F4_001060 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN = 1 THEN RETURN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL170
        RETURN 0
BC@LL170
F4_001061 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FIND_ROOT_DIR_ENTRY_F = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FIND_ROOT_DIR_ENTRY_F
F4_001062 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_FIND_ROOT_DIR_ENTRY
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_FIND_ROOT_DIR_ENTRY
F4_001063 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR = 1 THEN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN_ROOT_DIR,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL172
F4_001064 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001065 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001066 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL172
F4_001067 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_SEC_NUM = SD_ROOT_DIR + SD_ROOT_DIR_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_SEC,W
        ADDWF SD_ROOT_DIR,W
        MOVWF SD_WRITE_SEC_NUM
        MOVF SD_ROOT_DIR_SECH,W
        ADDWFC SD_ROOT_DIRH,W
        MOVWF SD_WRITE_SEC_NUMH
        MOVF SD_ROOT_DIR_SECHH,W
        ADDWFC SD_ROOT_DIRHH,W
        MOVWF SD_WRITE_SEC_NUMHH
        MOVF SD_ROOT_DIR_SECHHH,W
        ADDWFC SD_ROOT_DIRHHH,W
        MOVWF SD_WRITE_SEC_NUMHHH
F4_001068 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_WRITE_SEC_NUM
        MOVFF SD_WRITE_SEC_NUMHHH,SD_SECTOR_NUMHHH
        MOVFF SD_WRITE_SEC_NUMHH,SD_SECTOR_NUMHH
        MOVFF SD_WRITE_SEC_NUMH,SD_SECTOR_NUMH
        MOVFF SD_WRITE_SEC_NUM,SD_SECTOR_NUM
F4_001069 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_001070 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001072 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $1F
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB174
        MOVLB 0
RAM_BANK = 0
        MOVLW 32
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB175
F4_001073 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001074 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = 0
        CLRF SD_DATA_IO
F4_001075 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001076 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB174
NX@LB175
F4_001077 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_MODIFY_FILE_NAME
        F@CALL SD_MODIFY_FILE_NAME
F4_001078 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $00 TO $07
        MOVLB 2
RAM_BANK = 2
        CLRF SD_ROOT_DIR_FILE_POS
FR@LB176
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB177
F4_001079 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001080 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_FILE_NAME[SD_ROOT_DIR_FILE_POS]
        LFSR 0,SD_FILE_NAME
        MOVF SD_ROOT_DIR_FILE_POS,W
        MOVF PLUSW0,W,0
        MOVWF SD_DATA_IO
F4_001081 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001082 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB176
NX@LB177
F4_001083 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_ROOT_DIR_FILE_POS = $08 TO $0A
        MOVLW 8
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_ROOT_DIR_FILE_POS
FR@LB178
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_ROOT_DIR_FILE_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB179
F4_001084 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE_POS,W
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001085 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_FILE_EXT[SD_ROOT_DIR_FILE_POS - $08]
        MOVLW 8
        SUBWF SD_ROOT_DIR_FILE_POS,W
        LFSR 0,SD_FILE_EXT
        MOVF PLUSW0,W,0
        MOVWF SD_DATA_IO
F4_001086 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001087 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_ROOT_DIR_FILE_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_ROOT_DIR_FILE_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB178
NX@LB179
F4_001088 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $0B
        MOVLW 11
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001089 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = %00100000
        MOVLW 32
        MOVWF SD_DATA_IO
F4_001090 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001091 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $0D
        MOVLW 13
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001092 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SET_FILE_TIME_CREATE
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SET_FILE_TIME_CREATE
F4_001093 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS + $1A
        MOVLW 26
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_ROOT_DIR_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_ROOT_DIR_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001094 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE0
        MOVFF SD_CLUSTER_NUM,SD_DATA_IO
F4_001095 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001096 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_WRITE_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        INFSNZ SD_WRITE_BUFFER_POS,F
        INCF SD_WRITE_BUFFER_POSH,F
F4_001097 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = SD_CLUSTER_NUM.BYTE1
        MOVFF SD_CLUSTER_NUMH,SD_DATA_IO
F4_001098 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001099 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001100 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_001101 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_001102 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = 1
        MOVLW 1
        MOVWF SD_SEC_IN_CLUSTER
F4_001103 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_001104 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 0
        CLRF SD_RW_OPTION
F4_001105 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001107 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_BUFFER_POS = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_BUFFER_POS
        CLRF SD_DATA_BUFFER_POSH
F4_001108 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE = 0
        CLRF SD_FILE_SIZEHHH
        CLRF SD_FILE_SIZEHH
        CLRF SD_FILE_SIZEH
        CLRF SD_FILE_SIZE
F4_001109 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_PTR = 0
        CLRF SD_BYTES_READHHH
        CLRF SD_BYTES_READHH
        CLRF SD_BYTES_READH
        CLRF SD_BYTES_READ
F4_001110 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EOF = 1
        BSF _B#VR1,0
F4_001111 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RETURN_F = 1
        MOVLW 1
        MOVWF SD_RETURN_F
F4_001112 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
RAM_BANK = 0
F4_001118 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_APPEND_FILE MACRO
SD_APPEND_FILE  MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_APPEND_FILE_SUB
 IF (RETURN_TYPE !=BYTE)
        ERROR "(IN ASM) SD_APPEND_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ELSE
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
SD_APPEND_FILE_SUB
F4_001136 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_CHECK_FOR_FILE_SUB
        F@CALL SD_CHECK_FOR_FILE_SUB
F4_001137 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR <> 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_EXTENDED_RETURN_ROOT_DIR,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL180
F4_001138 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001139 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001140 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL180
F4_001141 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM.BYTE0 = SD_ROOT_DIR_FILE[$1A]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#26,W
        MOVWF SD_CLUSTER_NUM
F4_001142 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM.BYTE1 = SD_ROOT_DIR_FILE[$1B]
        MOVF SD_ROOT_DIR_FILE#27,W
        MOVWF SD_CLUSTER_NUMH
F4_001143 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE0 = SD_ROOT_DIR_FILE[$1C]
        MOVF SD_ROOT_DIR_FILE#28,W
        MOVWF SD_FILE_SIZE
F4_001144 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE1 = SD_ROOT_DIR_FILE[$1D]
        MOVF SD_ROOT_DIR_FILE#29,W
        MOVWF SD_FILE_SIZEH
F4_001145 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE2 = SD_ROOT_DIR_FILE[$1E]
        MOVF SD_ROOT_DIR_FILE#30,W
        MOVWF SD_FILE_SIZEHH
F4_001146 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE.BYTE3 = SD_ROOT_DIR_FILE[$1F]
        MOVF SD_ROOT_DIR_FILE#31,W
        MOVWF SD_FILE_SIZEHHH
F4_001147 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE_LEFT = SD_FILE_SIZE
        MOVFF SD_FILE_SIZEHHH,SD_FILE_SIZE_LEFTHHH
        MOVFF SD_FILE_SIZEHH,SD_FILE_SIZE_LEFTHH
        MOVFF SD_FILE_SIZEH,SD_FILE_SIZE_LEFTH
        MOVFF SD_FILE_SIZE,SD_FILE_SIZE_LEFT
F4_001148 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = 0
        CLRF SD_SECTOR_NUMHHH,0
        CLRF SD_SECTOR_NUMHH,0
        CLRF SD_SECTOR_NUMH,0
        CLRF SD_SECTOR_NUM,0
F4_001149 EQU $ ; IN [RFID V28.4_LIB.PBP] WHILE SD_FILE_SIZE_LEFT > (SD_BYTES_PER_SEC * SD_SECS_PER_CLUSTER)
BC@LL181
        MOVLB 0
RAM_BANK = 0
        MOVFF SD_BYTES_PER_SEC,PP0
        MOVFF SD_BYTES_PER_SECH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,PBP#VAR1HHH
        MOVFF PP0HH,PBP#VAR1HH
        MOVFF PP0H,PBP#VAR1H
        MOVFF PP0,PBP#VAR1
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_SIZE_LEFT,W
        SUBWF PBP#VAR1,W,0
        MOVF SD_FILE_SIZE_LEFTH,W
        SUBWFB PBP#VAR1H,W,0
        MOVF SD_FILE_SIZE_LEFTHH,W
        SUBWFB PBP#VAR1HH,W,0
        MOVF SD_FILE_SIZE_LEFTHHH,W
        SUBWFB PBP#VAR1HHH,W,0
        MOVF SD_FILE_SIZE_LEFTHHH,W
        XORWF PBP#VAR1HHH,W,0
        BTFSC STATUS,0,0
        XORLW 128
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,4,0
        GO@TO BC@LL182
F4_001150 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        MOVFF SD_CLUSTER_NUM,PP0
        MOVFF SD_CLUSTER_NUMH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_001151 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_001152 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_001153 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SECTOR_NUM <> (SD_FAT1 + SD_FAT_SEC) THEN
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF PBP#VAR1,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF PBP#VAR1H,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF PBP#VAR1HH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF PBP#VAR1HHH,0
        MOVF PBP#VAR1,W,0
        SUBWF SD_SECTOR_NUM,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO CP@LB26
        MOVF PBP#VAR1H,W,0
        SUBWF SD_SECTOR_NUMH,W,0
        BTFSS STATUS,2,0
        GO@TO CP@LB26
        MOVF PBP#VAR1HH,W,0
        SUBWF SD_SECTOR_NUMHH,W,0
        BTFSS STATUS,2,0
        GO@TO CP@LB26
        MOVF PBP#VAR1HHH,W,0
        SUBWF SD_SECTOR_NUMHHH,W,0
        BTFSC STATUS,2,0
        GO@TO BC@LL184
CP@LB26
F4_001154 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_001155 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_001156 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001158 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL184
F4_001159 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
F4_001160 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_001161 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
F4_001162 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FILE_SIZE_LEFT = SD_FILE_SIZE_LEFT - (SD_BYTES_PER_SEC * SD_SECS_PER_CLUSTER)
        MOVFF SD_BYTES_PER_SEC,PP0
        MOVFF SD_BYTES_PER_SECH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,PP7HHH
        MOVFF PP0HH,PP7HH
        MOVFF PP0H,PP7H
        MOVFF PP0,PP7
        MOVF PP7,W,0
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_FILE_SIZE_LEFT,F
        MOVF PP7H,W,0
        SUBWFB SD_FILE_SIZE_LEFTH,F
        MOVF PP7HH,W,0
        SUBWFB SD_FILE_SIZE_LEFTHH,F
        MOVF PP7HHH,W,0
        SUBWFB SD_FILE_SIZE_LEFTHHH,F
F4_001163 EQU $ ; IN [RFID V28.4_LIB.PBP] WEND
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL181
BC@LL182
F4_001164 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        MOVFF SD_CLUSTER_NUM,PP0
        MOVFF SD_CLUSTER_NUMH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_001165 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_001166 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_001167 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_FILE_SIZE_LEFT = 0 THEN
        MOVF SD_FILE_SIZE_LEFTHHH,W
        IORWF SD_FILE_SIZE_LEFTHH,W
        IORWF SD_FILE_SIZE_LEFTH,W
        IORWF SD_FILE_SIZE_LEFT,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL186
F4_001168 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_SEC_IN_CLUSTER
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL187
BC@LL186
F4_001169 EQU $ ; IN [RFID V28.4_LIB.PBP] ELSE
F4_001170 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = (SD_FILE_SIZE_LEFT - 1) / SD_BYTES_PER_SEC
        MOVLB 2
RAM_BANK = 2
        DECF SD_FILE_SIZE_LEFT,W
        MOVWF PP7,0
        MOVLW 0
        SUBWFB SD_FILE_SIZE_LEFTH,W
        MOVWF PP7H,0
        MOVLW 0
        SUBWFB SD_FILE_SIZE_LEFTHH,W
        MOVWF PP7HH,0
        MOVLW 0
        SUBWFB SD_FILE_SIZE_LEFTHHH,W
        MOVWF PP7HHH,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        MOVFF SD_BYTES_PER_SEC,PP2
        MOVFF SD_BYTES_PER_SECH,PP2H
        CLRF PP2HH,0
        CLRF PP2HHH,0
        F@CALL L@DIV
        MOVFF PP0,SD_SEC_IN_CLUSTER
F4_001171 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL187
        MOVLB 0
RAM_BANK = 0
F4_001172 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = (SD_CLUSTER_NUM - 2) * SD_SECS_PER_CLUSTER
        MOVLW 254
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_CLUSTER_NUM,W
        MOVWF PP7,0
        MOVLW 255
        ADDWFC SD_CLUSTER_NUMH,W
        MOVWF PP7H,0
        MOVLW 255
        CLRF PP7HH,0
        ADDWFC PP7HH,F,0
        CLRF PP7HHH,0
        ADDWFC PP7HHH,F,0
        MOVFF PP7HHH,PP0HHH
        MOVFF PP7HH,PP0HH
        MOVFF PP7H,PP0H
        MOVFF PP7,PP0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        CLRF PP2H,0
        MOVFF SD_SECS_PER_CLUSTER,PP2
        F@CALL AL@MUL
        MOVFF PP0HHH,SD_DATA_SECHHH
        MOVFF PP0HH,SD_DATA_SECHH
        MOVFF PP0H,SD_DATA_SECH
        MOVFF PP0,SD_DATA_SEC
F4_001173 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_SEC_IN_CLUSTER
        MOVF SD_SEC_IN_CLUSTER,W
        ADDWF SD_DATA_SEC,W
        MOVWF SD_DATA_SEC
        MOVLW 0
        ADDWFC SD_DATA_SECH,W
        MOVWF SD_DATA_SECH
        MOVLW 0
        ADDWFC SD_DATA_SECHH,W
        MOVWF SD_DATA_SECHH
        MOVLW 0
        ADDWFC SD_DATA_SECHHH,W
        MOVWF SD_DATA_SECHHH
F4_001174 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_SEC = SD_DATA_SEC + SD_DATA_AREA
        MOVF SD_DATA_AREA,W
        ADDWF SD_DATA_SEC,F
        MOVF SD_DATA_AREAH,W
        ADDWFC SD_DATA_SECH,F
        MOVF SD_DATA_AREAHH,W
        ADDWFC SD_DATA_SECHH,F
        MOVF SD_DATA_AREAHHH,W
        ADDWFC SD_DATA_SECHHH,F
F4_001175 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SEC_IN_CLUSTER = SD_SEC_IN_CLUSTER + 1
        INCF SD_SEC_IN_CLUSTER,F
F4_001176 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_DATA_SEC
        MOVFF SD_DATA_SECHHH,SD_SECTOR_NUMHHH
        MOVFF SD_DATA_SECHH,SD_SECTOR_NUMHH
        MOVFF SD_DATA_SECH,SD_SECTOR_NUMH
        MOVFF SD_DATA_SEC,SD_SECTOR_NUM
F4_001177 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_001178 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001180 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_RETURN = 1 THEN
        MOVLW 1
        SUBWF SD_RETURN,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL189
F4_001181 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001182 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001183 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL189
F4_001184 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_BUFFER_POS = SD_FILE_SIZE_LEFT // SD_BYTES_PER_SEC
        MOVFF SD_FILE_SIZE_LEFTHHH,PP0HHH
        MOVFF SD_FILE_SIZE_LEFTHH,PP0HH
        MOVFF SD_FILE_SIZE_LEFTH,PP0H
        MOVFF SD_FILE_SIZE_LEFT,PP0
        MOVFF SD_BYTES_PER_SEC,PP2
        MOVFF SD_BYTES_PER_SECH,PP2H
        CLRF PP2HH,0
        CLRF PP2HHH,0
        F@CALL L@MOD
        MOVFF PP2,SD_DATA_BUFFER_POS
        MOVFF PP2H,SD_DATA_BUFFER_POSH
F4_001185 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_IDX = SD_DATA_BUFFER_POS
        MOVFF SD_DATA_BUFFER_POS,SD_BUFFER_IDX
        MOVFF SD_DATA_BUFFER_POSH,SD_BUFFER_IDXH
F4_001186 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_DATA_BUFFER_POS = 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_DATA_BUFFER_POSH,W
        IORWF SD_DATA_BUFFER_POS,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL191
F4_001187 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_FILE_SIZE_LEFT > 0 THEN
        BCF STATUS,3,0
        MOVLB 2
RAM_BANK = 2
        BTFSC SD_FILE_SIZE_LEFTHHH,7
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL193
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FILE_SIZE_LEFT,W
        IORWF SD_FILE_SIZE_LEFTH,W
        IORWF SD_FILE_SIZE_LEFTHH,W
        IORWF SD_FILE_SIZE_LEFTHHH,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL193
F4_001188 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_BUFFER_POS = SD_BYTES_PER_SEC
        MOVFF SD_BYTES_PER_SEC,SD_DATA_BUFFER_POS
        MOVFF SD_BYTES_PER_SECH,SD_DATA_BUFFER_POSH
F4_001189 EQU $ ; IN [RFID V28.4_LIB.PBP] INC SD_SECTOR_NUM
        INCF SD_SECTOR_NUM,F,0
        MOVLW 0
        ADDWFC SD_SECTOR_NUMH,F,0
        ADDWFC SD_SECTOR_NUMHH,F,0
        ADDWFC SD_SECTOR_NUMHHH,F,0
F4_001190 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL193
F4_001191 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL191
F4_001192 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_IDX = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_CLUSTER_SEQ_IDX
        CLRF SD_CLUSTER_SEQ_IDXH
F4_001193 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_SEQ_NUM = 1
        MOVWF SD_CLUSTER_SEQ_NUM
        CLRF SD_CLUSTER_SEQ_NUMH
F4_001194 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EOF = 1
        BSF _B#VR1,0
F4_001195 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_PTR = SD_FILE_SIZE
        MOVFF SD_FILE_SIZEHHH,SD_BYTES_READHHH
        MOVFF SD_FILE_SIZEHH,SD_BYTES_READHH
        MOVFF SD_FILE_SIZEH,SD_BYTES_READH
        MOVFF SD_FILE_SIZE,SD_BYTES_READ
F4_001196 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 0
        CLRF SD_EXTENDED_RETURN
F4_001197 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
RAM_BANK = 0
F4_001203 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DELETE_FILE MACRO
SD_DELETE_FILE  MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
        F@CALL SD_DELETE_FILE_SUB
        ENDM
RAM_BANK = 0
SD_DELETE_FILE_SUB
F4_001214 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_CHECK_FOR_FILE_SUB
        F@CALL SD_CHECK_FOR_FILE_SUB
F4_001215 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN_ROOT_DIR <> 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_EXTENDED_RETURN_ROOT_DIR,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL195
F4_001216 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_EXTENDED_RETURN
F4_001217 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F4_001218 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL195
F4_001219 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM.BYTE0 = SD_ROOT_DIR_FILE[$1A]
        MOVLB 2
RAM_BANK = 2
        MOVF SD_ROOT_DIR_FILE#26,W
        MOVWF SD_CLUSTER_NUM
F4_001220 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM.BYTE1 = SD_ROOT_DIR_FILE[$1B]
        MOVF SD_ROOT_DIR_FILE#27,W
        MOVWF SD_CLUSTER_NUMH
F4_001221 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_ROOT_DIR_POS
        MOVFF SD_ROOT_DIR_POS,SD_WRITE_BUFFER_POS
        MOVFF SD_ROOT_DIR_POSH,SD_WRITE_BUFFER_POSH
F4_001222 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = $E5
        MOVLW 229
        MOVWF SD_DATA_IO
F4_001223 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001224 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001225 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_RW_OPTION
F4_001226 EQU $ ; IN [RFID V28.4_LIB.PBP] REPEAT
BC@LL196
        MOVLB 0
RAM_BANK = 0
F4_001227 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_SEC = SD_CLUSTER_NUM / $100
        MOVFF SD_CLUSTER_NUM,PP0
        MOVFF SD_CLUSTER_NUMH,PP0H
        CLRF PP0HH,0
        CLRF PP0HHH,0
        CLRF PP2HHH,0
        CLRF PP2HH,0
        MOVLW 1
        MOVWF PP2H,0
        CLRF PP2,0
        F@CALL L@DIV
        MOVFF PP0HHH,SD_FAT_SECHHH
        MOVFF PP0HH,SD_FAT_SECHH
        MOVFF PP0H,SD_FAT_SECH
        MOVFF PP0,SD_FAT_SEC
F4_001228 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_CLUSTER_NUM // $100
        MOVFF SD_CLUSTER_NUM,SD_FAT_BUFFER_POS
        MOVLB 2
RAM_BANK = 2
        CLRF SD_FAT_BUFFER_POSH
F4_001229 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_FAT_BUFFER_POS = SD_FAT_BUFFER_POS * 2
        BCF STATUS,0,0
        RLCF SD_FAT_BUFFER_POS,F
        RLCF SD_FAT_BUFFER_POSH,F
F4_001230 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_SECTOR_NUM <> (SD_FAT1 + SD_FAT_SEC) THEN
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF PBP#VAR1,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF PBP#VAR1H,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF PBP#VAR1HH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF PBP#VAR1HHH,0
        MOVF PBP#VAR1,W,0
        SUBWF SD_SECTOR_NUM,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO CP@LB28
        MOVF PBP#VAR1H,W,0
        SUBWF SD_SECTOR_NUMH,W,0
        BTFSS STATUS,2,0
        GO@TO CP@LB28
        MOVF PBP#VAR1HH,W,0
        SUBWF SD_SECTOR_NUMHH,W,0
        BTFSS STATUS,2,0
        GO@TO CP@LB28
        MOVF PBP#VAR1HHH,W,0
        SUBWF SD_SECTOR_NUMHHH,W,0
        BTFSC STATUS,2,0
        GO@TO BC@LL199
CP@LB28
F4_001231 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_RW_OPTION > 0 THEN
        MOVLB 2
RAM_BANK = 2
        MOVF SD_RW_OPTION,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL201
F4_001232 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001233 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM - SD_FAT1 + SD_FAT2
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        SUBWF SD_SECTOR_NUM,W,0
        MOVWF PP7,0
        MOVF SD_FAT1H,W
        SUBWFB SD_SECTOR_NUMH,W,0
        MOVWF PP7H,0
        MOVF SD_FAT1HH,W
        SUBWFB SD_SECTOR_NUMHH,W,0
        MOVWF PP7HH,0
        MOVF SD_FAT1HHH,W
        SUBWFB SD_SECTOR_NUMHHH,W,0
        MOVWF PP7HHH,0
        MOVF SD_FAT2,W
        ADDWF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT2H,W
        ADDWFC PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT2HH,W
        ADDWFC PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT2HHH,W
        ADDWFC PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_001234 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_001235 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL201
F4_001236 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_FAT1 + SD_FAT_SEC
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT_SEC,W
        ADDWF SD_FAT1,W
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT_SECH,W
        ADDWFC SD_FAT1H,W
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT_SECHH,W
        ADDWFC SD_FAT1HH,W
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT_SECHHH,W
        ADDWFC SD_FAT1HHH,W
        MOVWF SD_SECTOR_NUMHHH,0
F4_001237 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_RW_OPTION = 1
        MOVLW 1
        MOVWF SD_RW_OPTION
F4_001238 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_SECTOR_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_SECTOR_SUB
F4_001240 EQU $ ; IN [RFID V28.4_LIB.PBP] ENDIF
BC@LL199
F4_001241 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS,SD_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_BUFFER_POSH
F4_001242 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_READ_FAT_ENTRY
        F@CALL SD_READ_FAT_ENTRY
F4_001243 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_CLUSTER_NUM = SD_FAT_ENTRY
        MOVFF SD_FAT_ENTRY,SD_CLUSTER_NUM
        MOVFF SD_FAT_ENTRYH,SD_CLUSTER_NUMH
F4_001244 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_FAT_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POS,SD_WRITE_BUFFER_POS
        MOVFF SD_FAT_BUFFER_POSH,SD_WRITE_BUFFER_POSH
F4_001245 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_DATA_IO = $00
        MOVLB 2
RAM_BANK = 2
        CLRF SD_DATA_IO
F4_001246 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001247 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BUFFER_POS = SD_FAT_BUFFER_POS + 1
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        ADDWF SD_FAT_BUFFER_POS,W
        MOVWF SD_WRITE_BUFFER_POS
        MOVLW 0
        ADDWFC SD_FAT_BUFFER_POSH,W
        MOVWF SD_WRITE_BUFFER_POSH
F4_001248 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_INSERT_BYTE_INTO_BUFFER
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_INSERT_BYTE_INTO_BUFFER
F4_001249 EQU $ ; IN [RFID V28.4_LIB.PBP] UNTIL SD_CLUSTER_NUM = $FFFF
        MOVLB 2
RAM_BANK = 2
        INCF SD_CLUSTER_NUM,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO CP@LB29
        MOVLB 2
RAM_BANK = 2
        INCF SD_CLUSTER_NUMH,W
CP@LB29
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL196
BC@LL197
F4_001250 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        F@CALL SD_WRITE_SECTOR
F4_001251 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_SECTOR_NUM = SD_SECTOR_NUM - SD_FAT1 + SD_FAT2
        MOVLB 2
RAM_BANK = 2
        MOVF SD_FAT1,W
        SUBWF SD_SECTOR_NUM,W,0
        MOVWF PP7,0
        MOVF SD_FAT1H,W
        SUBWFB SD_SECTOR_NUMH,W,0
        MOVWF PP7H,0
        MOVF SD_FAT1HH,W
        SUBWFB SD_SECTOR_NUMHH,W,0
        MOVWF PP7HH,0
        MOVF SD_FAT1HHH,W
        SUBWFB SD_SECTOR_NUMHHH,W,0
        MOVWF PP7HHH,0
        MOVF SD_FAT2,W
        ADDWF PP7,W,0
        MOVWF SD_SECTOR_NUM,0
        MOVF SD_FAT2H,W
        ADDWFC PP7H,W,0
        MOVWF SD_SECTOR_NUMH,0
        MOVF SD_FAT2HH,W
        ADDWFC PP7HH,W,0
        MOVWF SD_SECTOR_NUMHH,0
        MOVF SD_FAT2HHH,W
        ADDWFC PP7HHH,W,0
        MOVWF SD_SECTOR_NUMHHH,0
F4_001252 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_SECTOR
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_SECTOR
F4_001253 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_EXTENDED_RETURN = 0
        MOVLB 2
RAM_BANK = 2
        CLRF SD_EXTENDED_RETURN
F4_001254 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
RAM_BANK = 0
F4_001260 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_BYTE_TO_FILE MACRO P1
SD_WRITE_BYTE_TO_FILE   MACRO P1,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT >  1)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - TOO MANY PARAMETERS"
 ELSE
 IF (PRM_COUNT <  1)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - TOO FEW PARAMETERS"
 ELSE
 IF (PRM_1 != BYTE) && (PRM_1 != NUM8) && (PRM_1 != NUM16) && (PRM_1 != NUM32) && (PRM_1 != WORD) && (PRM_1 != DWORD)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - BYTE(PARAM 1) SHOULD BE A BYTE, WORD OR DWORD VARIABLE OR NUMBER"
 ENDIF
 IF (PRM_1 == BYTE)
        BYTE_BYTE P1, SD_IO_BYTE
 ENDIF
 IF (PRM_1 == NUM8)
        NUM_BYTE P1, SD_IO_BYTE
RAM_BANK = 0
 ENDIF
 IF (PRM_1 == NUM16)
        NUM_BYTE P1, SD_IO_BYTE
RAM_BANK = 0
 ENDIF
 IF (PRM_1 == NUM32)
        NUM_BYTE P1, SD_IO_BYTE
RAM_BANK = 0
 ENDIF
 IF (PRM_1 == WORD)
        BYTE_BYTE P1, SD_IO_BYTE
 ENDIF
 IF (PRM_1 == DWORD)
        BYTE_BYTE P1, SD_IO_BYTE
 ENDIF
 IF (PRM_1 == FLOAT)
        FLOAT_BYTE P1, SD_IO_BYTE
 ENDIF
        F@CALL SD_WRITE_BYTE_TO_FILE_SUB
 IF (SD_WRITE_BYTE_TO_FILE_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_WRITE_BYTE_TO_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
RAM_BANK = 0
F4_001318 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_WRITE_STRING_TO_FILE MACRO
SD_WRITE_STRING_TO_FILE MACRO .,.,.,.,.,.,.,.,.,.
 LOCAL PRM_EMPTY=0,BIT=1,BYTE=2,WORD=3,DWORD=4,FLOAT=5,LABEL=6,CHAR=7,STRING=9
 LOCAL NUM8=8,NUM16=16,NUM32=32,SNUM8=10,SNUM16=15,SNUM32=31,FNUM=33,BYTE_ARRAY_PTR=22,WORD_ARRAY_PTR=23
 IF (PRM_COUNT != 0)
        ERROR "(IN ASM) NO PARAMETERS REQUIRED FOR SD_WRITE_STRING_TO_FILE"
        EXITM
 ENDIF
        F@CALL SD_WRITE_STRING_TO_FILE_SUB
 IF (SD_WRITE_STRING_TO_FILE_RETURN != 1)
 ELSE
 IF (RETURN_TYPE != BYTE)
        ERROR "(IN ASM) SD_WRITE_STRING_TO_FILE - RETURN VARIABLE SHOULD BE A BYTE VARIABLE"
 ENDIF
 IF (RETURN_TYPE == BYTE)
        BYTE_BYTE SD_EXTENDED_RETURN, RETURN_VAR
 ENDIF
 ENDIF
        ENDM
RAM_BANK = 0
SD_WRITE_STRING_TO_FILE_SUB
F4_001345 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IO_STRING_LENGTH = LEN(SD_IO_STRING)
        LFSR 0,SD_IO_STRING
        CLRF WREG,0
        MOVF POSTINC0,F,0
        BZ $ + 6
        INCFSZ WREG,F,0
        BRA $ - 6
        MOVLB 2
RAM_BANK = 2
        MOVWF SD_IO_STRING_LENGTH
F4_001346 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IO_STRING_LENGTH = SD_IO_STRING_LENGTH - 1
        DECF SD_IO_STRING_LENGTH,F
F4_001347 EQU $ ; IN [RFID V28.4_LIB.PBP] FOR SD_IO_STRING_POS = 0 TO SD_IO_STRING_LENGTH
        CLRF SD_IO_STRING_POS
FR@LB203
        MOVLB 0
RAM_BANK = 0
        MOVLB 2
RAM_BANK = 2
        MOVF SD_IO_STRING_POS,W
        SUBWF SD_IO_STRING_LENGTH,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO NX@LB204
F4_001348 EQU $ ; IN [RFID V28.4_LIB.PBP] SD_IO_BYTE = SD_IO_STRING[SD_IO_STRING_POS]
        LFSR 0,SD_IO_STRING
        MOVLB 2
RAM_BANK = 2
        MOVF SD_IO_STRING_POS,W
        ADDWF FSR0L,F,0
        MOVLW 0
        ADDWFC FSR0H,F,0
        MOVF INDF0,W,0
        MOVWF SD_IO_BYTE
F4_001349 EQU $ ; IN [RFID V28.4_LIB.PBP] GOSUB SD_WRITE_BYTE_TO_FILE_SUB
        MOVLB 0
RAM_BANK = 0
        F@CALL SD_WRITE_BYTE_TO_FILE_SUB
F4_001350 EQU $ ; IN [RFID V28.4_LIB.PBP] IF SD_EXTENDED_RETURN = 1 THEN RETURN
        MOVLW 1
        MOVLB 2
RAM_BANK = 2
        SUBWF SD_EXTENDED_RETURN,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL205
        RETURN 0
BC@LL205
F4_001351 EQU $ ; IN [RFID V28.4_LIB.PBP] NEXT SD_IO_STRING_POS
        MOVLB 2
RAM_BANK = 2
        INCF SD_IO_STRING_POS,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB203
NX@LB204
F4_001352 EQU $ ; IN [RFID V28.4_LIB.PBP] RETURN
        RETURN 0
OVERLIBCODE
F4_EOF EQU $ ; RFID V28.4_LIB.PBP
F2_EOF EQU $ ; RFID V28.4.PRP
F1_SOF EQU $ ; RFID V28.4.BAS
F5_SOF EQU $ ; INITIALIZE.INC
F5_000047 EQU $ ; IN [INITIALIZE.INC] ALL_DIGITAL = TRUE
        MOVLW 7
        MOVWF CMCON,0
        MOVLW 15
        MOVWF ADCON1,0
F5_000131 EQU $ ; IN [INITIALIZE.INC] DELAYMS 200
        MOVLW 200
        F@CALL DL@MS
F5_000132 EQU $ ; IN [INITIALIZE.INC] HIGH SDC
        BCF TRISD,5,0
        BSF LATD,5,0
F5_000133 EQU $ ; IN [INITIALIZE.INC] INPUT SD_DETECT
        BSF TRISC,1,0
F5_000134 EQU $ ; IN [INITIALIZE.INC] GOSUB HIGH_V
        F@CALL HIGH_V
F5_000135 EQU $ ; IN [INITIALIZE.INC] LOW RFIDENABLE
        BCF TRISD,4,0
        BCF LATD,4,0
F5_000136 EQU $ ; IN [INITIALIZE.INC] LOW STARTENABLE
        BCF TRISE,1,0
        BCF LATE,1,0
F5_000137 EQU $ ; IN [INITIALIZE.INC] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F5_000138 EQU $ ; IN [INITIALIZE.INC] LOW GREEN
        BCF TRISA,1,0
        BCF LATA,1,0
F5_000142 EQU $ ; IN [INITIALIZE.INC] BYTE_VAR = EREAD NUM_UHE
        MOVLW 2
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF BYTE_VAR
F5_000143 EQU $ ; IN [INITIALIZE.INC] IF BYTE_VAR = 0XFF THEN
        INCF BYTE_VAR,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL207
F5_000144 EQU $ ; IN [INITIALIZE.INC] EWRITE NUM_USERS,[0X00]
        MOVLW 1
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 0
        F@CALL EE@WR@W
F5_000145 EQU $ ; IN [INITIALIZE.INC] EWRITE NUM_UHE,[0X00]
        MOVLW 2
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 0
        F@CALL EE@WR@W
F5_000146 EQU $ ; IN [INITIALIZE.INC] EWRITE NUM_MHE,[0X00]
        MOVLW 3
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 0
        F@CALL EE@WR@W
F5_000147 EQU $ ; IN [INITIALIZE.INC] EWRITE DBO,[0X00]
        MOVLW 4
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 0
        F@CALL EE@WR@W
F5_000148 EQU $ ; IN [INITIALIZE.INC] EWRITE TOP,[0X1E]
        MOVLW 5
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 30
        F@CALL EE@WR@W
F5_000149 EQU $ ; IN [INITIALIZE.INC] EWRITE SOO,[0X01]
        MOVLW 6
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 1
        F@CALL EE@WR@W
F5_000150 EQU $ ; IN [INITIALIZE.INC] EWRITE MOP,[0X00]
        MOVLW 7
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 0
        F@CALL EE@WR@W
F5_000151 EQU $ ; IN [INITIALIZE.INC] ENDIF
BC@LL207
F5_EOF EQU $ ; INITIALIZE.INC
F1_000012 EQU $ ; IN [RFID V28.4.BAS] HIGH GREEN
        BCF TRISA,1,0
        BSF LATA,1,0
F1_000013 EQU $ ; IN [RFID V28.4.BAS] PAUSE 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F1_000014 EQU $ ; IN [RFID V28.4.BAS] LOW GREEN
        BCF TRISA,1,0
        BCF LATA,1,0
F1_000015 EQU $ ; IN [RFID V28.4.BAS] HIGH RED
        BCF TRISA,0,0
        BSF LATA,0,0
F1_000016 EQU $ ; IN [RFID V28.4.BAS] PAUSE 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F1_000017 EQU $ ; IN [RFID V28.4.BAS] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F1_000018 EQU $ ; IN [RFID V28.4.BAS] CLS
        F@CALL LCD@CLS
F1_000019 EQU $ ; IN [RFID V28.4.BAS] PRINT "START"
        MOVLW 83
        F@CALL PRINT
        MOVLW 116
        F@CALL PRINT
        MOVLW 97
        F@CALL PRINT
        MOVLW 114
        F@CALL PRINT
        MOVLW 116
        F@CALL PRINT
F1_000020 EQU $ ; IN [RFID V28.4.BAS] GOSUB BEEP
        F@CALL BEEP
F1_000021 EQU $ ; IN [RFID V28.4.BAS] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F1_000022 EQU $ ; IN [RFID V28.4.BAS] GOSUB RESET_DIAGNOSTIC_LOGGER
        F@CALL RESET_DIAGNOSTIC_LOGGER
F1_000024 EQU $ ; IN [RFID V28.4.BAS] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
MAIN
F1_000026 EQU $ ; IN [RFID V28.4.BAS] IF SD_DETECT = 0 THEN
        BTFSC PORTC,1,0
        GO@TO BC@LL209
F1_000027 EQU $ ; IN [RFID V28.4.BAS] GOSUB INIT_SD
        F@CALL INIT_SD
F1_000028 EQU $ ; IN [RFID V28.4.BAS] IF RESPONSE <> 0 THEN
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,F
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL211
F1_000029 EQU $ ; IN [RFID V28.4.BAS] GOSUB HIGH_V
        F@CALL HIGH_V
F1_000030 EQU $ ; IN [RFID V28.4.BAS] CLS
        F@CALL LCD@CLS
F1_000031 EQU $ ; IN [RFID V28.4.BAS] PRINT "NO INIT"
        MOVLW HIGH (STR@LB2)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB2)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000032 EQU $ ; IN [RFID V28.4.BAS] PAUSE 5000
        MOVLW 19
        MOVWF PP1H,0
        MOVLW 136
        F@CALL DLY@W
F1_000033 EQU $ ; IN [RFID V28.4.BAS] GOSUB ERROR_BEEP
        F@CALL ERROR_BEEP
F1_000034 EQU $ ; IN [RFID V28.4.BAS] GOTO BAD_CARD
        F@JUMP BAD_CARD
F1_000035 EQU $ ; IN [RFID V28.4.BAS] END IF
BC@LL211
F1_000038 EQU $ ; IN [RFID V28.4.BAS] GOSUB READ_SD
        F@CALL READ_SD
F1_000039 EQU $ ; IN [RFID V28.4.BAS] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL213
F1_000040 EQU $ ; IN [RFID V28.4.BAS] GOSUB HIGH_V
        F@CALL HIGH_V
F1_000041 EQU $ ; IN [RFID V28.4.BAS] CLS
        F@CALL LCD@CLS
F1_000042 EQU $ ; IN [RFID V28.4.BAS] PRINT "SD ERROR"
        MOVLW HIGH (STR@LB3)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB3)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000043 EQU $ ; IN [RFID V28.4.BAS] PAUSE 5000
        MOVLW 19
        MOVWF PP1H,0
        MOVLW 136
        F@CALL DLY@W
F1_000044 EQU $ ; IN [RFID V28.4.BAS] GOSUB ERROR_BEEP
        F@CALL ERROR_BEEP
F1_000045 EQU $ ; IN [RFID V28.4.BAS] GOTO BAD_FILE
        F@JUMP BAD_FILE
        F@JUMP BC@LL214
BC@LL213
F1_000046 EQU $ ; IN [RFID V28.4.BAS] ELSE
F1_000047 EQU $ ; IN [RFID V28.4.BAS] GOSUB HIGH_V
        F@CALL HIGH_V
F1_000048 EQU $ ; IN [RFID V28.4.BAS] CLS
        F@CALL LCD@CLS
F1_000049 EQU $ ; IN [RFID V28.4.BAS] PRINT "SD READ OK"
        MOVLW HIGH (STR@LB4)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB4)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000050 EQU $ ; IN [RFID V28.4.BAS] PAUSE 5000
        MOVLW 19
        MOVWF PP1H,0
        MOVLW 136
        F@CALL DLY@W
F1_000051 EQU $ ; IN [RFID V28.4.BAS] GOTO SLEEPNOW
        F@JUMP SLEEPNOW
F1_000052 EQU $ ; IN [RFID V28.4.BAS] END IF
BC@LL214
F1_000053 EQU $ ; IN [RFID V28.4.BAS] END IF
BC@LL209
READ_AGAIN
F1_000056 EQU $ ; IN [RFID V28.4.BAS] GOSUB READ_TAG
        F@CALL READ_TAG
F1_000057 EQU $ ; IN [RFID V28.4.BAS] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL216
F1_000058 EQU $ ; IN [RFID V28.4.BAS] GOSUB ERROR_BEEP
        F@CALL ERROR_BEEP
F1_000059 EQU $ ; IN [RFID V28.4.BAS] GOTO TAG_NOT_FOUND
        F@JUMP TAG_NOT_FOUND
        F@JUMP BC@LL217
BC@LL216
F1_000060 EQU $ ; IN [RFID V28.4.BAS] ELSE CLS
        F@CALL LCD@CLS
F1_000061 EQU $ ; IN [RFID V28.4.BAS] PRINT "TAG READ"
        MOVLW HIGH (STR@LB5)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB5)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000062 EQU $ ; IN [RFID V28.4.BAS] PAUSE 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F1_000063 EQU $ ; IN [RFID V28.4.BAS] END IF
BC@LL217
F1_000065 EQU $ ; IN [RFID V28.4.BAS] GOSUB CHECK_TAG
        F@CALL CHECK_TAG
F1_000066 EQU $ ; IN [RFID V28.4.BAS] IF RESPONSE = 0 THEN
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL219
F1_000067 EQU $ ; IN [RFID V28.4.BAS] GOSUB BEEP
        F@CALL BEEP
F1_000068 EQU $ ; IN [RFID V28.4.BAS] GOTO TAG_INVALID
        F@JUMP TAG_INVALID
        F@JUMP BC@LL220
BC@LL219
F1_000069 EQU $ ; IN [RFID V28.4.BAS] ELSE
F1_000070 EQU $ ; IN [RFID V28.4.BAS] CLS
        F@CALL LCD@CLS
F1_000071 EQU $ ; IN [RFID V28.4.BAS] PRINT "TAG IS GOOD!"
        MOVLW HIGH (STR@LB6)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB6)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F1_000072 EQU $ ; IN [RFID V28.4.BAS] PAUSE 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F1_000073 EQU $ ; IN [RFID V28.4.BAS] GOTO STARTUNIT
        F@JUMP STARTUNIT
F1_000075 EQU $ ; IN [RFID V28.4.BAS] END IF
BC@LL220
F6_SOF EQU $ ; READ TAG.INC
READ_TAG
F6_000013 EQU $ ; IN [READ TAG.INC] READ_TAG:     GOSUB HIGH_V
        F@CALL HIGH_V
F6_000014 EQU $ ; IN [READ TAG.INC] HIGH GREEN
        BCF TRISA,1,0
        BSF LATA,1,0
F6_000015 EQU $ ; IN [READ TAG.INC] HIGH RED
        BCF TRISA,0,0
        BSF LATA,0,0
F6_000018 EQU $ ; IN [READ TAG.INC] CLS
        F@CALL LCD@CLS
F6_000019 EQU $ ; IN [READ TAG.INC] PRINT AT 1,1, "ATTEMPTING TO"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB7)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB7)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000020 EQU $ ; IN [READ TAG.INC] PRINT AT 2,1, "READ TAG...."
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 192
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB8)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB8)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000022 EQU $ ; IN [READ TAG.INC] HIGH RFIDENABLE
        BCF TRISD,4,0
        BSF LATD,4,0
F6_000023 EQU $ ; IN [READ TAG.INC] PAUSE 10
        MOVLW 10
        F@CALL DL@MS
F6_000025 EQU $ ; IN [READ TAG.INC] HSERIN 30000, TIMEOUT,[WAIT (0X82) ,STR TAGIN]
        MOVLW 48
        MOVWF GEN,0
        MOVLW 117
        MOVWF GENH,0
PB@LB222
        F@CALL HRSIN2
        BTFSS STATUS,0,0
        GO@TO TIMEOUT
        SUBLW 130
        BTFSS STATUS,2,0
        GO@TO PB@LB222
        LFSR 0,TAGIN
        MOVLW 10
        MOVWF PRODL,0
PB@LB225
        BSF STATUS,0,0
        F@CALL HRSIN2
        BTFSS STATUS,0,0
        GO@TO TIMEOUT
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA PB@LB225
F6_000027 EQU $ ; IN [READ TAG.INC] HSERIN[CHECKSUM]
        F@CALL HRSIN
        MOVLB 3
RAM_BANK = 3
        MOVWF CHECKSUM
F6_000028 EQU $ ; IN [READ TAG.INC] HSERIN[ETX]
        F@CALL HRSIN
        MOVWF ETX
F6_000029 EQU $ ; IN [READ TAG.INC] LOW RFIDENABLE
        BCF TRISD,4,0
        BCF LATD,4,0
F6_000030 EQU $ ; IN [READ TAG.INC] IF ETX <> 0X83 THEN  GOTO READ_TAG
        MOVLW 131
        SUBWF ETX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,2,0
        GO@TO BC@LL226
        F@JUMP READ_TAG
BC@LL226
F6_000032 EQU $ ; IN [READ TAG.INC] FOR INDEX = 0 TO 9
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB228
        MOVLB 0
RAM_BANK = 0
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB229
F6_000033 EQU $ ; IN [READ TAG.INC] BYTE_VAR = TAGIN[INDEX]
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF BYTE_VAR
F6_000034 EQU $ ; IN [READ TAG.INC] BYTE_VAR.7 = 0
        BCF BYTE_VAR,7
F6_000035 EQU $ ; IN [READ TAG.INC] TAGIN[INDEX] = BYTE_VAR
        LFSR 0,TAGIN
        MOVF INDEX,W
        MOVFF BYTE_VAR,PLUSW0
F6_000036 EQU $ ; IN [READ TAG.INC] NEXT INDEX
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB228
NX@LB229
F6_000037 EQU $ ; IN [READ TAG.INC] CWRITE BUA,[TAGIN[0], TAGIN[1], TAGIN[2], TAGIN[3], TAGIN[4], TAGIN[5], TAGIN[6], TAGIN[7],TAGIN[8], TAGIN[9] ]
        MOVLW 128
        MOVWF TBLPTRL,0
        MOVLW 156
        MOVWF TBLPTRLH,0
        MOVLB 3
RAM_BANK = 3
        MOVF TAGIN#0,W
        F@CALL C@WRITE
        MOVF TAGIN#1,W
        F@CALL C@WRITE
        MOVF TAGIN#2,W
        F@CALL C@WRITE
        MOVF TAGIN#3,W
        F@CALL C@WRITE
        MOVF TAGIN#4,W
        F@CALL C@WRITE
        MOVF TAGIN#5,W
        F@CALL C@WRITE
        MOVF TAGIN#6,W
        F@CALL C@WRITE
        MOVF TAGIN#7,W
        F@CALL C@WRITE
        MOVF TAGIN#8,W
        F@CALL C@WRITE
        MOVF TAGIN#9,W
        F@CALL C@WRITE
F6_000038 EQU $ ; IN [READ TAG.INC] FOR INDEX = 0 TO 9
        CLRF INDEX
FR@LB230
        MOVLB 0
RAM_BANK = 0
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB231
F6_000039 EQU $ ; IN [READ TAG.INC] SELECT TAGIN[INDEX]
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
F6_000040 EQU $ ; IN [READ TAG.INC] CASE 48 TO 57
        MOVLW 48
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL232
        MOVLW 58
        SUBWF PBP#VAR1,W,0
        BTFSC STATUS,0,0
        GO@TO BC@LL232
F6_000041 EQU $ ; IN [READ TAG.INC] TAGBYTE[INDEX] = TAGIN[INDEX]-48
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR3,0
        MOVLW 48
        SUBWF PBP#VAR3,W,0
        MOVWF PBP#VAR2,0
        LFSR 0,TAGBYTE
        MOVF INDEX,W
        MOVFF PBP#VAR2,PLUSW0
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL231
BC@LL232
F6_000042 EQU $ ; IN [READ TAG.INC] CASE > 65 TO 70
        MOVLW 65
        SUBWF PBP#VAR1,W,0
        BTFSS STATUS,0,0
        GO@TO BC@LL235
        MOVLW 71
        SUBWF PBP#VAR1,W,0
        BTFSC STATUS,0,0
        GO@TO BC@LL235
F6_000043 EQU $ ; IN [READ TAG.INC] TAGBYTE[INDEX] = TAGIN[INDEX]-55
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR3,0
        MOVLW 55
        SUBWF PBP#VAR3,W,0
        MOVWF PBP#VAR2,0
        LFSR 0,TAGBYTE
        MOVF INDEX,W
        MOVFF PBP#VAR2,PLUSW0
F6_000045 EQU $ ; IN [READ TAG.INC] END SELECT
BC@LL235
        MOVLB 0
RAM_BANK = 0
BC@LL231
F6_000046 EQU $ ; IN [READ TAG.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB230
NX@LB231
F6_000049 EQU $ ; IN [READ TAG.INC] MYCOUNT = (TAGBYTE[4] << 4) + TAGBYTE[5]
        MOVLB 3
RAM_BANK = 3
        MOVF TAGBYTE#4,W
        MOVWF PBP#VAR1,0
        SWAPF PBP#VAR1,W,0
        MOVWF PP7,0
        MOVWF PP7H,0
        MOVLW 240
        ANDWF PP7,F,0
        MOVLW 15
        ANDWF PP7H,F,0
        MOVF TAGBYTE#5,W
        MOVWF PBP#VAR2,0
        MOVF PBP#VAR2,W,0
        ADDWF PP7,W,0
        MOVWF MYCOUNT
F6_000050 EQU $ ; IN [READ TAG.INC] CLS
        F@CALL LCD@CLS
F6_000051 EQU $ ; IN [READ TAG.INC] PRINT HEX MYCOUNT
        MOVLW 128
        MOVWF BPFH,0
        MOVF MYCOUNT,W
        F@CALL OUT@HEXB
F6_000052 EQU $ ; IN [READ TAG.INC] STOP
PB@LB237
        MOVLB 0
RAM_BANK = 0
        BRA PB@LB237
F6_000054 EQU $ ; IN [READ TAG.INC] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F6_000055 EQU $ ; IN [READ TAG.INC] HIGH GREEN
        BCF TRISA,1,0
        BSF LATA,1,0
F6_000056 EQU $ ; IN [READ TAG.INC] CLS
        F@CALL LCD@CLS
F6_000057 EQU $ ; IN [READ TAG.INC] PRINT "THANK YOU"
        MOVLW HIGH (STR@LB9)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB9)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000058 EQU $ ; IN [READ TAG.INC] PAUSE 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F6_000059 EQU $ ; IN [READ TAG.INC] RESPONSE = 0
        MOVLB 3
RAM_BANK = 3
        CLRF RESPONSE
F6_000060 EQU $ ; IN [READ TAG.INC] LOW RFIDENABLE
        BCF TRISD,4,0
        BCF LATD,4,0
F6_000061 EQU $ ; IN [READ TAG.INC] CLS
        F@CALL LCD@CLS
F6_000063 EQU $ ; IN [READ TAG.INC] PRINT AT 1,1, HEX TAGBYTE[0], HEX TAGBYTE[1], HEX TAGBYTE[2], HEX TAGBYTE[3], HEX TAGBYTE[4]
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVF TAGBYTE#0,W
        F@CALL OUT@HEXB
        MOVF TAGBYTE#1,W
        F@CALL OUT@HEXB
        MOVF TAGBYTE#2,W
        F@CALL OUT@HEXB
        MOVF TAGBYTE#3,W
        F@CALL OUT@HEXB
        MOVF TAGBYTE#4,W
        F@CALL OUT@HEXB
F6_000066 EQU $ ; IN [READ TAG.INC] PRINT AT 3,1, HEX CHECKSUM
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 148
        F@CALL LCD@CRS
        MOVF CHECKSUM,W
        F@CALL OUT@HEXB
F6_000067 EQU $ ; IN [READ TAG.INC] PRINT AT 4,1, HEX ETX
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 212
        F@CALL LCD@CRS
        MOVF ETX,W
        F@CALL OUT@HEXB
F6_000068 EQU $ ; IN [READ TAG.INC] STOP
PB@LB238
        MOVLB 0
RAM_BANK = 0
        BRA PB@LB238
F6_000069 EQU $ ; IN [READ TAG.INC] RETURN
        RETURN 0
TIMEOUT
F6_000071 EQU $ ; IN [READ TAG.INC] TIMEOUT: LOW RFIDENABLE
        BCF TRISD,4,0
        BCF LATD,4,0
F6_000073 EQU $ ; IN [READ TAG.INC] CLS
        F@CALL LCD@CLS
F6_000074 EQU $ ; IN [READ TAG.INC] PRINT AT 1,1, "NO TAG DETECTED"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB10)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB10)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F6_000075 EQU $ ; IN [READ TAG.INC] DELAYMS 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F6_000076 EQU $ ; IN [READ TAG.INC] RESPONSE = 1
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF RESPONSE
F6_000077 EQU $ ; IN [READ TAG.INC] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F6_EOF EQU $ ; READ TAG.INC
F7_SOF EQU $ ; READ SD.INC
READ_SD
F7_000015 EQU $ ; IN [READ SD.INC] READ_SD:    GOSUB LOW_V
        F@CALL LOW_V
F7_000017 EQU $ ; IN [READ SD.INC] GOSUB READ_MOD
        F@CALL READ_MOD
F7_000018 EQU $ ; IN [READ SD.INC] SD_FILE_NAME = STR MODNUM
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        CLRF INDF0,0
F7_000019 EQU $ ; IN [READ SD.INC] SD_FILE_EXT = "TXT"
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F7_000020 EQU $ ; IN [READ SD.INC] RESPONSE = SD_OPEN_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_OPEN_FILE_RETURN=1,PRM_COUNT=0
        SD_OPEN_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_OPEN_FILE_RETURN=1,PRM_COUNT=0
F7_000023 EQU $ ; IN [READ SD.INC] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL239
F7_000024 EQU $ ; IN [READ SD.INC] GOSUB WRITE_USERS_SD
        F@CALL WRITE_USERS_SD
F7_000025 EQU $ ; IN [READ SD.INC] GOSUB WRITE_M_SD
        F@CALL WRITE_M_SD
F7_000026 EQU $ ; IN [READ SD.INC] RETURN
        RETURN 0
F7_000027 EQU $ ; IN [READ SD.INC] ENDIF
BC@LL239
F7_000032 EQU $ ; IN [READ SD.INC] EWRITE NUM_USERS,[0X00]
        MOVLW 1
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLW 0
        F@CALL EE@WR@W
F7_000035 EQU $ ; IN [READ SD.INC] MYCOUNT = 0
        MOVLB 3
RAM_BANK = 3
        CLRF MYCOUNT
F7_000036 EQU $ ; IN [READ SD.INC] WHILE SD_EOF < 1
BC@LL240
        MOVLB 0
RAM_BANK = 0
        BCF STATUS,3,0
        MOVLB 2
RAM_BANK = 2
        BTFSC _B#VR1,0
        BSF STATUS,3,0
        MOVLB 0
RAM_BANK = 0
        G@OTO BC@LL241
F7_000037 EQU $ ; IN [READ SD.INC] RESPONSE = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000038 EQU $ ; IN [READ SD.INC] SELECT RESPONSE
F7_000039 EQU $ ; IN [READ SD.INC] CASE  0X40
        MOVLW 64
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL243
F7_000040 EQU $ ; IN [READ SD.INC] BYTE_VAR =  SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000041 EQU $ ; IN [READ SD.INC] GOSUB GET_HEX
        F@CALL GET_HEX
F7_000042 EQU $ ; IN [READ SD.INC] INDEX = BYTE_VAR
        MOVFF BYTE_VAR,INDEX
F7_000044 EQU $ ; IN [READ SD.INC] BYTE_VAR =  SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000045 EQU $ ; IN [READ SD.INC] GOSUB GET_HEX
        F@CALL GET_HEX
F7_000046 EQU $ ; IN [READ SD.INC] INDEX2 = BYTE_VAR
        MOVFF BYTE_VAR,INDEX2
F7_000047 EQU $ ; IN [READ SD.INC] BYTE_VAR = (INDEX <<4) + INDEX2
        MOVLB 3
RAM_BANK = 3
        SWAPF INDEX,W
        MOVWF PP7,0
        MOVWF PP7H,0
        MOVLW 240
        ANDWF PP7,F,0
        MOVLW 15
        ANDWF PP7H,F,0
        MOVF INDEX2,W
        ADDWF PP7,W,0
        MOVWF BYTE_VAR
F7_000048 EQU $ ; IN [READ SD.INC] EWRITE DBO,[BYTE_VAR]
        MOVLW 4
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVF BYTE_VAR,W
        F@CALL EE@WR@W
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL242
BC@LL243
F7_000051 EQU $ ; IN [READ SD.INC] CASE 0X2A
        MOVLW 42
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL246
F7_000052 EQU $ ; IN [READ SD.INC] BYTE_VAR =  SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000053 EQU $ ; IN [READ SD.INC] GOSUB GET_HEX
        F@CALL GET_HEX
F7_000054 EQU $ ; IN [READ SD.INC] INDEX = BYTE_VAR
        MOVFF BYTE_VAR,INDEX
F7_000056 EQU $ ; IN [READ SD.INC] BYTE_VAR =  SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000057 EQU $ ; IN [READ SD.INC] GOSUB GET_HEX
        F@CALL GET_HEX
F7_000058 EQU $ ; IN [READ SD.INC] INDEX2 = BYTE_VAR
        MOVFF BYTE_VAR,INDEX2
F7_000059 EQU $ ; IN [READ SD.INC] BYTE_VAR = (INDEX <<4) + INDEX2
        MOVLB 3
RAM_BANK = 3
        SWAPF INDEX,W
        MOVWF PP7,0
        MOVWF PP7H,0
        MOVLW 240
        ANDWF PP7,F,0
        MOVLW 15
        ANDWF PP7H,F,0
        MOVF INDEX2,W
        ADDWF PP7,W,0
        MOVWF BYTE_VAR
F7_000060 EQU $ ; IN [READ SD.INC] EWRITE TOP,[BYTE_VAR]
        MOVLW 5
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVF BYTE_VAR,W
        F@CALL EE@WR@W
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL242
BC@LL246
F7_000062 EQU $ ; IN [READ SD.INC] CASE 0X2B
        MOVLW 43
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL248
F7_000063 EQU $ ; IN [READ SD.INC] BYTE_VAR =  SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000064 EQU $ ; IN [READ SD.INC] GOSUB GET_HEX
        F@CALL GET_HEX
F7_000065 EQU $ ; IN [READ SD.INC] EWRITE SOO,[BYTE_VAR]
        MOVLW 6
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLB 3
RAM_BANK = 3
        MOVF BYTE_VAR,W
        F@CALL EE@WR@W
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL242
BC@LL248
F7_000067 EQU $ ; IN [READ SD.INC] CASE 0X24
        MOVLW 36
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL250
F7_000068 EQU $ ; IN [READ SD.INC] BYTE_VAR =  SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=BYTE_VAR,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
F7_000069 EQU $ ; IN [READ SD.INC] GOSUB GET_HEX
        F@CALL GET_HEX
F7_000070 EQU $ ; IN [READ SD.INC] EWRITE MOP,[BYTE_VAR]
        MOVLW 7
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLB 3
RAM_BANK = 3
        MOVF BYTE_VAR,W
        F@CALL EE@WR@W
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL242
BC@LL250
F7_000072 EQU $ ; IN [READ SD.INC] CASE  0X3A
        MOVLW 58
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL252
F7_000073 EQU $ ; IN [READ SD.INC] FOR INDEX = 0 TO 9
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB254
        MOVLB 0
RAM_BANK = 0
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB255
F7_000074 EQU $ ; IN [READ SD.INC] TAGIN[INDEX] = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F7_000075 EQU $ ; IN [READ SD.INC] GOSUB HIGH_V
        MOVLB 0
RAM_BANK = 0
        F@CALL HIGH_V
F7_000076 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F7_000077 EQU $ ; IN [READ SD.INC] PRINT HEX TAGIN[INDEX]
        MOVLW 128
        MOVWF BPFH,0
        LFSR 0,TAGIN
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        F@CALL OUT@HEXB
F7_000078 EQU $ ; IN [READ SD.INC] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F7_000079 EQU $ ; IN [READ SD.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB254
NX@LB255
F7_000080 EQU $ ; IN [READ SD.INC] STOP
PB@LB256
        BRA PB@LB256
F7_000084 EQU $ ; IN [READ SD.INC] CWRITE BUA +(MYCOUNT * 16),[TAGIN[0], TAGIN[1], TAGIN[2], TAGIN[3], TAGIN[4], TAGIN[5], TAGIN[6], TAGIN[7] , TAGIN[8], TAGIN[9],0,0,0,0,0,0]
        MOVLB 3
RAM_BANK = 3
        MOVF MYCOUNT,W
        MULLW 16
        MOVFF PRODL,PP7
        MOVFF PRODH,PP7H
        MOVLW 128
        ADDWF PP7,W,0
        MOVWF TBLPTRL,0
        MOVLW 156
        ADDWFC PP7H,W,0
        MOVWF TBLPTRLH,0
        MOVF TAGIN#0,W
        F@CALL C@WRITE
        MOVF TAGIN#1,W
        F@CALL C@WRITE
        MOVF TAGIN#2,W
        F@CALL C@WRITE
        MOVF TAGIN#3,W
        F@CALL C@WRITE
        MOVF TAGIN#4,W
        F@CALL C@WRITE
        MOVF TAGIN#5,W
        F@CALL C@WRITE
        MOVF TAGIN#6,W
        F@CALL C@WRITE
        MOVF TAGIN#7,W
        F@CALL C@WRITE
        MOVF TAGIN#8,W
        F@CALL C@WRITE
        MOVF TAGIN#9,W
        F@CALL C@WRITE
        MOVLW 0
        F@CALL C@WRITE
        MOVLW 0
        F@CALL C@WRITE
        MOVLW 0
        F@CALL C@WRITE
        MOVLW 0
        F@CALL C@WRITE
        MOVLW 0
        F@CALL C@WRITE
        MOVLW 0
        F@CALL C@WRITE
F7_000086 EQU $ ; IN [READ SD.INC] INC MYCOUNT
        INCF MYCOUNT,F
F7_000087 EQU $ ; IN [READ SD.INC] EWRITE NUM_USERS,[MYCOUNT]
        MOVLW 1
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVF MYCOUNT,W
        F@CALL EE@WR@W
F7_000088 EQU $ ; IN [READ SD.INC] GOSUB HIGH_V
        MOVLB 0
RAM_BANK = 0
        F@CALL HIGH_V
F7_000089 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F7_000090 EQU $ ; IN [READ SD.INC] PRINT "DONE ONE"
        MOVLW HIGH (STR@LB11)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB11)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F7_000091 EQU $ ; IN [READ SD.INC] STOP
PB@LB257
        BRA PB@LB257
        F@JUMP BC@LL242
BC@LL252
F7_000092 EQU $ ; IN [READ SD.INC] CASE  0X7E
        MOVLW 126
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL258
F7_000094 EQU $ ; IN [READ SD.INC] FOR INDEX = 0 TO 3
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB260
        MOVLB 0
RAM_BANK = 0
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB261
F7_000095 EQU $ ; IN [READ SD.INC] M_U_CODE[INDEX] = SD_READ_BYTE_FROM_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        SD_READ_BYTE_FROM_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=PBP#VAR1,SD_READ_BYTE_FROM_FILE_RETURN=1,PRM_COUNT=0
        LFSR 0,M_U_CODE
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F7_000096 EQU $ ; IN [READ SD.INC] NEXT INDEX
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB260
NX@LB261
F7_000097 EQU $ ; IN [READ SD.INC] BYTE_VAR = EREAD NUM_MHE
        MOVLW 3
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF BYTE_VAR
F7_000098 EQU $ ; IN [READ SD.INC] FOR INDEX = 0 TO 3
        CLRF INDEX
FR@LB262
        MOVLB 0
RAM_BANK = 0
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB263
F7_000099 EQU $ ; IN [READ SD.INC] EWRITE MHA + (4 * BYTE_VAR) + INDEX,[M_U_CODE[INDEX]]
        MOVLW 144
        MOVWF PP7,0
        MOVLW 3
        MOVWF PP7H,0
        MOVLW 4
        MOVWF PP8,0
        CLRF PP8H,0
        MOVFF PP8H,PP0
        MOVLB 3
RAM_BANK = 3
        MOVF BYTE_VAR,W
        MULWF PP8,0
        MOVFF PRODL,PP8
        MOVFF PRODH,PP8H
        MULWF PP0,0
        MOVF PRODL,W,0
        ADDWF PP8H,F,0
        MOVF PP8,W,0
        ADDWF PP7,F,0
        MOVF PP8H,W,0
        ADDWFC PP7H,F,0
        MOVF INDEX,W
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        LFSR 0,M_U_CODE
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        F@CALL EE@WR@W
F7_000100 EQU $ ; IN [READ SD.INC] NEXT INDEX
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB262
NX@LB263
F7_000101 EQU $ ; IN [READ SD.INC] INC BYTE_VAR
        MOVLB 3
RAM_BANK = 3
        INCF BYTE_VAR,F
F7_000102 EQU $ ; IN [READ SD.INC] IF BYTE_VAR > MAX_MH THEN BYTE_VAR = 0
        MOVLW 11
        SUBWF BYTE_VAR,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL264
        MOVLB 3
RAM_BANK = 3
        CLRF BYTE_VAR
BC@LL264
        MOVLB 0
RAM_BANK = 0
F7_000103 EQU $ ; IN [READ SD.INC] EWRITE NUM_MHE,[BYTE_VAR]
        MOVLW 3
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLB 3
RAM_BANK = 3
        MOVF BYTE_VAR,W
        F@CALL EE@WR@W
F7_000104 EQU $ ; IN [READ SD.INC] GOSUB WRITE_USERS_SD
        MOVLB 0
RAM_BANK = 0
        F@CALL WRITE_USERS_SD
F7_000105 EQU $ ; IN [READ SD.INC] GOSUB WRITE_M_SD
        F@CALL WRITE_M_SD
F7_000106 EQU $ ; IN [READ SD.INC] RETURN
        RETURN 0
F7_000108 EQU $ ; IN [READ SD.INC] CASE ELSE
        F@JUMP BC@LL266
BC@LL258
F7_000109 EQU $ ; IN [READ SD.INC] GOSUB HIGH_V
        F@CALL HIGH_V
F7_000110 EQU $ ; IN [READ SD.INC] CLS
        F@CALL LCD@CLS
F7_000111 EQU $ ; IN [READ SD.INC] PRINT RESPONSE
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,W
        F@CALL PRINT
F7_000112 EQU $ ; IN [READ SD.INC] STOP
PB@LB268
        MOVLB 0
RAM_BANK = 0
        BRA PB@LB268
F7_000113 EQU $ ; IN [READ SD.INC] RESPONSE = 1
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF RESPONSE
F7_000114 EQU $ ; IN [READ SD.INC] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F7_000115 EQU $ ; IN [READ SD.INC] END SELECT
BC@LL266
BC@LL242
F7_000116 EQU $ ; IN [READ SD.INC] WEND
        F@JUMP BC@LL240
BC@LL241
GET_HEX
F7_000119 EQU $ ; IN [READ SD.INC] SELECT BYTE_VAR
F7_000120 EQU $ ; IN [READ SD.INC] CASE 48 TO 57
        MOVLW 48
        MOVLB 3
RAM_BANK = 3
        SUBWF BYTE_VAR,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL269
        MOVLW 58
        MOVLB 3
RAM_BANK = 3
        SUBWF BYTE_VAR,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL269
F7_000121 EQU $ ; IN [READ SD.INC] BYTE_VAR = BYTE_VAR - 48
        MOVLW 48
        MOVLB 3
RAM_BANK = 3
        SUBWF BYTE_VAR,F
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL268
BC@LL269
F7_000122 EQU $ ; IN [READ SD.INC] CASE > 65 TO 70
        MOVLW 65
        MOVLB 3
RAM_BANK = 3
        SUBWF BYTE_VAR,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL272
        MOVLW 71
        MOVLB 3
RAM_BANK = 3
        SUBWF BYTE_VAR,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL272
F7_000123 EQU $ ; IN [READ SD.INC] BYTE_VAR = BYTE_VAR - 55
        MOVLW 55
        MOVLB 3
RAM_BANK = 3
        SUBWF BYTE_VAR,F
F7_000124 EQU $ ; IN [READ SD.INC] CASE ELSE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL274
BC@LL272
F7_000125 EQU $ ; IN [READ SD.INC] GOSUB BEEP
        F@CALL BEEP
F7_000126 EQU $ ; IN [READ SD.INC] GOTO BAD_FILE
        F@JUMP BAD_FILE
F7_000127 EQU $ ; IN [READ SD.INC] END SELECT
BC@LL274
BC@LL268
F7_000128 EQU $ ; IN [READ SD.INC] RETURN
        RETURN 0
F7_EOF EQU $ ; READ SD.INC
F8_SOF EQU $ ; INIT SD.INC
INIT_SD
F8_000015 EQU $ ; IN [INIT SD.INC] GOSUB LOW_V
        F@CALL LOW_V
F8_000016 EQU $ ; IN [INIT SD.INC] FOR INDEX = 0 TO 2
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB276
        MOVLB 0
RAM_BANK = 0
        MOVLW 3
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB277
F8_000017 EQU $ ; IN [INIT SD.INC] RESPONSE = SD_INIT_FS_MSSP SD_SPI_FOSC_04
VARIABLE PRM_1=8
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_INIT_FS_MSSP_LST_PRM=0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_INIT_FS_MSSP_RETURN=1,PRM_COUNT=1
        SD_INIT_FS_MSSP 0,0,0,0,0,0,0,0,0,0
F8_000018 EQU $ ; IN [INIT SD.INC] IF RESPONSE = 0 THEN
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL278
F8_000019 EQU $ ; IN [INIT SD.INC] RETURN
        RETURN 0
F8_000020 EQU $ ; IN [INIT SD.INC] ENDIF
BC@LL278
F8_000021 EQU $ ; IN [INIT SD.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB276
NX@LB277
F8_000022 EQU $ ; IN [INIT SD.INC] RETURN
        RETURN 0
F8_EOF EQU $ ; INIT SD.INC
F9_SOF EQU $ ; CHECK TAG.INC
CHECK_TAG
F9_000017 EQU $ ; IN [CHECK TAG.INC] CHECK_TAG:    RESPONSE = 0
        MOVLB 3
RAM_BANK = 3
        CLRF RESPONSE
F9_000018 EQU $ ; IN [CHECK TAG.INC] IF EREAD NUM_USERS = 0 THEN
        MOVLW 1
        F@CALL EE@RD
        MOVWF PBP#VAR1,0
        MOVF PBP#VAR1,F,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL280
F9_000019 EQU $ ; IN [CHECK TAG.INC] CLS
        F@CALL LCD@CLS
F9_000020 EQU $ ; IN [CHECK TAG.INC] PRINT "NO USERS EXIST"
        MOVLW HIGH (STR@LB12)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB12)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F9_000021 EQU $ ; IN [CHECK TAG.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F9_000022 EQU $ ; IN [CHECK TAG.INC] GOTO TAG_INVALID
        F@JUMP TAG_INVALID
F9_000024 EQU $ ; IN [CHECK TAG.INC] END IF
BC@LL280
F9_000026 EQU $ ; IN [CHECK TAG.INC] MYCOUNT = 0
        MOVLB 3
RAM_BANK = 3
        CLRF MYCOUNT
F9_000027 EQU $ ; IN [CHECK TAG.INC] WORD_VAR = BUA
        MOVLW 128
        MOVWF WORD_VAR
        MOVLW 156
        MOVWF WORD_VARH
F9_000028 EQU $ ; IN [CHECK TAG.INC] REPEAT
BC@LL281
        MOVLB 0
RAM_BANK = 0
F9_000029 EQU $ ; IN [CHECK TAG.INC] INDEX = 0
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
F9_000030 EQU $ ; IN [CHECK TAG.INC] RESPONSE = 0
        CLRF RESPONSE
F9_000031 EQU $ ; IN [CHECK TAG.INC] REPEAT
BC@LL283
        MOVLB 0
RAM_BANK = 0
F9_000032 EQU $ ; IN [CHECK TAG.INC] BYTE_VAR = CREAD WORD_VAR + (16 * MYCOUNT) + INDEX
        MOVFF WORD_VAR,PP7
        MOVFF WORD_VARH,PP7H
        MOVLW 16
        MOVWF PP8,0
        CLRF PP8H,0
        MOVFF PP8H,PP0
        MOVLB 3
RAM_BANK = 3
        MOVF MYCOUNT,W
        MULWF PP8,0
        MOVFF PRODL,PP8
        MOVFF PRODH,PP8H
        MULWF PP0,0
        MOVF PRODL,W,0
        ADDWF PP8H,F,0
        MOVF PP8,W,0
        ADDWF PP7,F,0
        MOVF PP8H,W,0
        ADDWFC PP7H,F,0
        MOVF INDEX,W
        ADDWF PP7,W,0
        MOVWF TBLPTRL,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF TBLPTRLH,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,BYTE_VAR
F9_000033 EQU $ ; IN [CHECK TAG.INC] IF BYTE_VAR = TAGIN[INDEX] THEN
        LFSR 0,TAGIN
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        MOVWF PBP#VAR1,0
        MOVF BYTE_VAR,W
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL286
F9_000034 EQU $ ; IN [CHECK TAG.INC] RESPONSE = 1
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF RESPONSE
F9_000035 EQU $ ; IN [CHECK TAG.INC] INC INDEX
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL287
BC@LL286
F9_000036 EQU $ ; IN [CHECK TAG.INC] ELSE
F9_000037 EQU $ ; IN [CHECK TAG.INC] RESPONSE = 0
        MOVLB 3
RAM_BANK = 3
        CLRF RESPONSE
F9_000038 EQU $ ; IN [CHECK TAG.INC] INDEX = 10
        MOVLW 10
        MOVWF INDEX
F9_000039 EQU $ ; IN [CHECK TAG.INC] ENDIF
BC@LL287
        MOVLB 0
RAM_BANK = 0
F9_000040 EQU $ ; IN [CHECK TAG.INC] UNTIL INDEX > 9
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL283
BC@LL284
F9_000041 EQU $ ; IN [CHECK TAG.INC] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL289
F9_000042 EQU $ ; IN [CHECK TAG.INC] GOSUB WRITE_UH
        F@CALL WRITE_UH
F9_000043 EQU $ ; IN [CHECK TAG.INC] RETURN
        RETURN 0
F9_000044 EQU $ ; IN [CHECK TAG.INC] END IF
BC@LL289
F9_000045 EQU $ ; IN [CHECK TAG.INC] INC MYCOUNT
        MOVLB 3
RAM_BANK = 3
        INCF MYCOUNT,F
F9_000046 EQU $ ; IN [CHECK TAG.INC] UNTIL MYCOUNT > EREAD NUM_USERS
        MOVLW 1
        F@CALL EE@RD
        MOVWF PBP#VAR1,0
        MOVF MYCOUNT,W
        SUBWF PBP#VAR1,W,0
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO BC@LL281
BC@LL282
F9_000047 EQU $ ; IN [CHECK TAG.INC] RETURN
        RETURN 0
F9_EOF EQU $ ; CHECK TAG.INC
F10_SOF EQU $ ; WRITE_U_H.INC
WRITE_UH
F10_000014 EQU $ ; IN [WRITE_U_H.INC] BYTE_VAR = EREAD NUM_UHE
        MOVLW 2
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF BYTE_VAR
F10_000015 EQU $ ; IN [WRITE_U_H.INC] EWRITE UHA + (11 * BYTE_VAR),[":"]
        MOVF BYTE_VAR,W
        MULLW 11
        MOVFF PRODL,PP7
        MOVFF PRODH,PP7H
        MOVLW 26
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        MOVLW 58
        F@CALL EE@WR@W
F10_000016 EQU $ ; IN [WRITE_U_H.INC] FOR INDEX = 1 TO 10
        MOVLW 1
        MOVWF INDEX
FR@LB291
        MOVLB 0
RAM_BANK = 0
        MOVLW 11
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB292
F10_000017 EQU $ ; IN [WRITE_U_H.INC] EWRITE UHA + (11 * BYTE_VAR) + INDEX,[TAGIN[INDEX]]
        MOVLW 26
        MOVWF PP7,0
        CLRF PP7H,0
        MOVLW 11
        MOVWF PP8,0
        CLRF PP8H,0
        MOVFF PP8H,PP0
        MOVLB 3
RAM_BANK = 3
        MOVF BYTE_VAR,W
        MULWF PP8,0
        MOVFF PRODL,PP8
        MOVFF PRODH,PP8H
        MULWF PP0,0
        MOVF PRODL,W,0
        ADDWF PP8H,F,0
        MOVF PP8,W,0
        ADDWF PP7,F,0
        MOVF PP8H,W,0
        ADDWFC PP7H,F,0
        MOVF INDEX,W
        ADDWF PP7,W,0
        MOVWF EEADR,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF EEADRH,0
        LFSR 0,TAGIN
        MOVF INDEX,W
        MOVF PLUSW0,W,0
        F@CALL EE@WR@W
F10_000018 EQU $ ; IN [WRITE_U_H.INC] NEXT INDEX
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB291
NX@LB292
F10_000020 EQU $ ; IN [WRITE_U_H.INC] INC BYTE_VAR
        MOVLB 3
RAM_BANK = 3
        INCF BYTE_VAR,F
F10_000021 EQU $ ; IN [WRITE_U_H.INC] IF BYTE_VAR > MAX_UH THEN BYTE_VAR = 0
        MOVLW 51
        SUBWF BYTE_VAR,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL293
        MOVLB 3
RAM_BANK = 3
        CLRF BYTE_VAR
BC@LL293
        MOVLB 0
RAM_BANK = 0
F10_000022 EQU $ ; IN [WRITE_U_H.INC] EWRITE NUM_UHE,[BYTE_VAR]
        MOVLW 2
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVLB 3
RAM_BANK = 3
        MOVF BYTE_VAR,W
        F@CALL EE@WR@W
F10_000024 EQU $ ; IN [WRITE_U_H.INC] RETURN
        MOVLB 0
RAM_BANK = 0
        RETURN 0
F10_EOF EQU $ ; WRITE_U_H.INC
F11_SOF EQU $ ; READ_MOD.INC
READ_MOD
F11_000015 EQU $ ; IN [READ_MOD.INC] FOR INDEX = 0 TO 7
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB295
        MOVLB 0
RAM_BANK = 0
        MOVLW 8
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB296
F11_000016 EQU $ ; IN [READ_MOD.INC] MODNUM[INDEX] = CREAD 0X9C40 + INDEX
        MOVLW 64
        MOVLB 3
RAM_BANK = 3
        ADDWF INDEX,W
        MOVWF TBLPTRL,0
        CLRF TBLPTRLH,0
        MOVLW 156
        ADDWFC TBLPTRLH,F,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,PBP#VAR1
        LFSR 0,MODNUM
        MOVF INDEX,W
        MOVFF PBP#VAR1,PLUSW0
F11_000017 EQU $ ; IN [READ_MOD.INC] NEXT
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB295
NX@LB296
F11_000018 EQU $ ; IN [READ_MOD.INC] RETURN
        RETURN 0
F11_EOF EQU $ ; READ_MOD.INC
F12_SOF EQU $ ; SOUND.INC
BEEP
F12_000023 EQU $ ; IN [SOUND.INC] GOSUB HIGH_V
        F@CALL HIGH_V
F12_000024 EQU $ ; IN [SOUND.INC] SOUND SP1,[110,50]
        MOVLW PORTC
        MOVWF GEN,0
        MOVLW 1
        MOVWF GENH,0
        MOVLW 110
        MOVWF PP1,0
        MOVLW 50
        F@CALL NOISE
F12_000025 EQU $ ; IN [SOUND.INC] RETURN
        RETURN 0
ERROR_BEEP
F12_000028 EQU $ ; IN [SOUND.INC] GOSUB HIGH_V
        F@CALL HIGH_V
F12_000029 EQU $ ; IN [SOUND.INC] SOUND SP1,[110,30,118,30]
        MOVLW PORTC
        MOVWF GEN,0
        MOVLW 1
        MOVWF GENH,0
        MOVLW 110
        MOVWF PP1,0
        MOVLW 30
        F@CALL NOISE
        MOVLW 118
        MOVWF PP1,0
        MOVLW 30
        F@CALL NOISE
F12_000030 EQU $ ; IN [SOUND.INC] RETURN
        RETURN 0
F12_EOF EQU $ ; SOUND.INC
F13_SOF EQU $ ; VOLTAGE_CONTROL.INC
LOW_V
F13_000012 EQU $ ; IN [VOLTAGE_CONTROL.INC] INPUT VC
        BSF TRISA,3,0
F13_000013 EQU $ ; IN [VOLTAGE_CONTROL.INC] LOW SDC
        BCF TRISD,5,0
        BCF LATD,5,0
F13_000014 EQU $ ; IN [VOLTAGE_CONTROL.INC] RETURN
        RETURN 0
HIGH_V
F13_000017 EQU $ ; IN [VOLTAGE_CONTROL.INC] HIGH SDC
        BCF TRISD,5,0
        BSF LATD,5,0
F13_000018 EQU $ ; IN [VOLTAGE_CONTROL.INC] LOW VC
        BCF TRISA,3,0
        BCF LATA,3,0
F13_000019 EQU $ ; IN [VOLTAGE_CONTROL.INC] RETURN
        RETURN 0
F13_EOF EQU $ ; VOLTAGE_CONTROL.INC
F14_SOF EQU $ ; GOSLEEP.INC
SLEEPNOW
F14_000003 EQU $ ; IN [GOSLEEP.INC] CLS
        F@CALL LCD@CLS
F14_000004 EQU $ ; IN [GOSLEEP.INC] GOSUB HIGH_V
        F@CALL HIGH_V
F14_000005 EQU $ ; IN [GOSLEEP.INC] PRINT AT 1,1, "GOING TO SLEEP.."
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB13)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB13)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F14_000006 EQU $ ; IN [GOSLEEP.INC] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F14_000007 EQU $ ; IN [GOSLEEP.INC] INTCON.4 = 1
        BSF INTCON,4,0
F14_000008 EQU $ ; IN [GOSLEEP.INC] INTCON.1 = 0
        BCF INTCON,1,0
F14_000011 EQU $ ; IN [GOSLEEP.INC] SLEEP
        SLEEP
F14_000012 EQU $ ; IN [GOSLEEP.INC] INTCON.4 = 0
        BCF INTCON,4,0
F14_000013 EQU $ ; IN [GOSLEEP.INC] CLS
        F@CALL LCD@CLS
F14_000014 EQU $ ; IN [GOSLEEP.INC] PRINT AT 1,1, "I JUST WOKE UP!!"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB14)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB14)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F14_000019 EQU $ ; IN [GOSLEEP.INC] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F14_000027 EQU $ ; IN [GOSLEEP.INC] GOTO SLEEPNOW
        F@JUMP SLEEPNOW
F14_EOF EQU $ ; GOSLEEP.INC
F15_SOF EQU $ ; STARTUNIT.INC
STARTUNIT
F15_000003 EQU $ ; IN [STARTUNIT.INC] CLS
        F@CALL LCD@CLS
F15_000004 EQU $ ; IN [STARTUNIT.INC] PRINT AT 1,1, "UNIT CAN NOW"
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB15)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB15)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F15_000005 EQU $ ; IN [STARTUNIT.INC] PRINT AT 2,1, "BE STARTED!"
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 192
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB16)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB16)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F15_000006 EQU $ ; IN [STARTUNIT.INC] PAUSE 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F15_000007 EQU $ ; IN [STARTUNIT.INC] GOSUB WRITE_UH
        F@CALL WRITE_UH
F15_000008 EQU $ ; IN [STARTUNIT.INC] BYTE_VAR = EREAD DBO
        MOVLW 4
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF BYTE_VAR
F15_000009 EQU $ ; IN [STARTUNIT.INC] LOW GREEN
        BCF TRISA,1,0
        BCF LATA,1,0
F15_000010 EQU $ ; IN [STARTUNIT.INC] HIGH RED
        BCF TRISA,0,0
        BSF LATA,0,0
F15_000011 EQU $ ; IN [STARTUNIT.INC] DELAYMS BYTE_VAR
        MOVF BYTE_VAR,W
        F@CALL DL@MS
F15_000012 EQU $ ; IN [STARTUNIT.INC] HIGH STARTENABLE
        BCF TRISE,1,0
        BSF LATE,1,0
F15_000013 EQU $ ; IN [STARTUNIT.INC] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F15_000014 EQU $ ; IN [STARTUNIT.INC] HIGH GREEN
        BCF TRISA,1,0
        BSF LATA,1,0
F15_000015 EQU $ ; IN [STARTUNIT.INC] BYTE_VAR = EREAD TOP
        MOVLW 5
        F@CALL EE@RD
        MOVWF BYTE_VAR
F15_000016 EQU $ ; IN [STARTUNIT.INC] DELAYMS BYTE_VAR
        MOVF BYTE_VAR,W
        F@CALL DL@MS
F15_000017 EQU $ ; IN [STARTUNIT.INC] LOW STARTENABLE
        BCF TRISE,1,0
        BCF LATE,1,0
F15_000018 EQU $ ; IN [STARTUNIT.INC] LOW GREEN
        BCF TRISA,1,0
        BCF LATA,1,0
F15_000021 EQU $ ; IN [STARTUNIT.INC] GOTO SLEEPNOW
        MOVLB 0
RAM_BANK = 0
        F@JUMP SLEEPNOW
F15_EOF EQU $ ; STARTUNIT.INC
F16_SOF EQU $ ; WRITE SD.INC
WRITE_SD
F16_000017 EQU $ ; IN [WRITE SD.INC] SD_FILE_NAME = STR MODNUM + "W"
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        MOVLW 87
        MOVWF POSTINC0,0
        CLRF INDF0,0
F16_000018 EQU $ ; IN [WRITE SD.INC] SD_FILE_EXT = "TXT"
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F16_000019 EQU $ ; IN [WRITE SD.INC] RESPONSE = SD_CHECK_FOR_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
        SD_CHECK_FOR_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_CHECK_FOR_FILE_RETURN=1,PRM_COUNT=0
F16_000020 EQU $ ; IN [WRITE SD.INC] IF RESPONSE = 0 THEN
        MOVLB 3
RAM_BANK = 3
        MOVF RESPONSE,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL297
F16_000021 EQU $ ; IN [WRITE SD.INC] SD_DELETE_FILE
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
        SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F16_000022 EQU $ ; IN [WRITE SD.INC] ENDIF
BC@LL297
F16_000023 EQU $ ; IN [WRITE SD.INC] SD_NEW_FILE
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
        SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F16_000024 EQU $ ; IN [WRITE SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F16_000026 EQU $ ; IN [WRITE SD.INC] SD_FILE_NAME = STR MODNUM + "W"
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        MOVLW 87
        MOVWF POSTINC0,0
        CLRF INDF0,0
F16_000027 EQU $ ; IN [WRITE SD.INC] SD_FILE_EXT = "TXT"
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F16_000028 EQU $ ; IN [WRITE SD.INC] RESPONSE = SD_APPEND_FILE
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_APPEND_FILE_RETURN=1,PRM_COUNT=0
        SD_APPEND_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,RETURN_TYPE=2,RETURN_VAR=RESPONSE,SD_APPEND_FILE_RETURN=1,PRM_COUNT=0
F16_000029 EQU $ ; IN [WRITE SD.INC] IF RESPONSE = 1 THEN
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        SUBWF RESPONSE,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL299
F16_000030 EQU $ ; IN [WRITE SD.INC] CLS
        F@CALL LCD@CLS
F16_000031 EQU $ ; IN [WRITE SD.INC] PRINT "FILE NOT FOUND"
        MOVLW HIGH (STR@LB17)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB17)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F16_000033 EQU $ ; IN [WRITE SD.INC] SLEEP
        SLEEP
F16_000034 EQU $ ; IN [WRITE SD.INC] ENDIF
BC@LL299
CLOSE_FILE
F16_000040 EQU $ ; IN [WRITE SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F16_000041 EQU $ ; IN [WRITE SD.INC] RETURN
        RETURN 0
F16_EOF EQU $ ; WRITE SD.INC
F17_SOF EQU $ ; WRITE_M_SD.INC
WRITE_M_SD
F17_000014 EQU $ ; IN [WRITE_M_SD.INC] GOSUB READ_MOD
        F@CALL READ_MOD
F17_000016 EQU $ ; IN [WRITE_M_SD.INC] SD_FILE_NAME = STR MODNUM
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        CLRF INDF0,0
F17_000017 EQU $ ; IN [WRITE_M_SD.INC] SD_FILE_NAME = SD_FILE_NAME +"M"
        LFSR 0,SD_FILE_NAME
        MOVF POSTINC0,W,0
        BNZ $ - 2
        MOVF POSTDEC0,F,0
        MOVLW 77
        MOVWF POSTINC0,0
        CLRF INDF0,0
F17_000018 EQU $ ; IN [WRITE_M_SD.INC] SD_FILE_EXT = "TXT"
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F17_000020 EQU $ ; IN [WRITE_M_SD.INC] SD_DELETE_FILE
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
        SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F17_000023 EQU $ ; IN [WRITE_M_SD.INC] SD_NEW_FILE
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
        SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F17_000024 EQU $ ; IN [WRITE_M_SD.INC] BYTE_VAR = EREAD NUM_MHE
        MOVLW 3
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF BYTE_VAR
F17_000026 EQU $ ; IN [WRITE_M_SD.INC] IF BYTE_VAR = 0 THEN
        MOVF BYTE_VAR,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL301
F17_000027 EQU $ ; IN [WRITE_M_SD.INC] SD_IO_STRING = "NO MANAGER UPDATE HISTORY EXISTS FOR THIS MODULE!"
        LFSR 0,SD_IO_STRING
        MOVLW HIGH (STR@LB18)
        MOVWF TBLPTRLH
        MOVLW LOW (STR@LB18)
        MOVWF TBLPTRL,0
        F@CALL LOAD@MSTR
        CLRF INDF0,0
F17_000028 EQU $ ; IN [WRITE_M_SD.INC] SD_WRITE_STRING_TO_FILE
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
        SD_WRITE_STRING_TO_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
F17_000029 EQU $ ; IN [WRITE_M_SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F17_000030 EQU $ ; IN [WRITE_M_SD.INC] RETURN
        RETURN 0
F17_000031 EQU $ ; IN [WRITE_M_SD.INC] ENDIF
BC@LL301
F17_000032 EQU $ ; IN [WRITE_M_SD.INC] SD_IO_STRING = RESPONSE
        LFSR 0,SD_IO_STRING
        MOVFF RESPONSE,POSTINC0
        CLRF INDF0,0
F17_000033 EQU $ ; IN [WRITE_M_SD.INC] SD_WRITE_STRING_TO_FILE
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
        SD_WRITE_STRING_TO_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
F17_000034 EQU $ ; IN [WRITE_M_SD.INC] SD_WRITE_BYTE_TO_FILE "|"
VARIABLE PRM_1=8
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_WRITE_BYTE_TO_FILE_LST_PRM=0
VARIABLE MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
        SD_WRITE_BYTE_TO_FILE 124,0,0,0,0,0,0,0,0,0
F17_000036 EQU $ ; IN [WRITE_M_SD.INC] MYCOUNT = 0
        MOVLB 3
RAM_BANK = 3
        CLRF MYCOUNT
F17_000037 EQU $ ; IN [WRITE_M_SD.INC] REPEAT
BC@LL302
        MOVLB 0
RAM_BANK = 0
F17_000038 EQU $ ; IN [WRITE_M_SD.INC] FOR INDEX = 0 TO 4
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB305
        MOVLB 0
RAM_BANK = 0
        MOVLW 5
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB306
F17_000039 EQU $ ; IN [WRITE_M_SD.INC] RESPONSE = CREAD WORD_VAR + (BYTE_VAR -1) * 10   + INDEX
        MOVFF WORD_VAR,PP7
        MOVFF WORD_VARH,PP7H
        MOVFF BYTE_VAR,PP8
        CLRF PP8H,0
        DECF PP8,F,0
        MOVLW 0
        SUBWFB PP8H,F,0
        MOVF PP8H,W,0
        MULLW 10
        MOVFF PRODL,PP8H
        MOVF PP8,W,0
        MULLW 10
        MOVFF PRODL,PP8
        MOVF PRODH,W,0
        ADDWF PP8H,F,0
        MOVF PP8,W,0
        ADDWF PP7,F,0
        MOVF PP8H,W,0
        ADDWFC PP7H,F,0
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        ADDWF PP7,W,0
        MOVWF TBLPTRL,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF TBLPTRLH,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,RESPONSE
F17_000040 EQU $ ; IN [WRITE_M_SD.INC] SD_WRITE_BYTE_TO_FILE RESPONSE
        MOVLB 0
RAM_BANK = 0
VARIABLE PRM_1=2
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=RESPONSE
VARIABLE MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
        SD_WRITE_BYTE_TO_FILE RESPONSE,0,0,0,0,0,0,0,0,0
F17_000041 EQU $ ; IN [WRITE_M_SD.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB305
NX@LB306
F17_000042 EQU $ ; IN [WRITE_M_SD.INC] SD_WRITE_BYTE_TO_FILE ":"
VARIABLE PRM_1=8
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_WRITE_BYTE_TO_FILE_LST_PRM=0
VARIABLE MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
        SD_WRITE_BYTE_TO_FILE 58,0,0,0,0,0,0,0,0,0
F17_000043 EQU $ ; IN [WRITE_M_SD.INC] DEC BYTE_VAR
        MOVLB 3
RAM_BANK = 3
        DECF BYTE_VAR,F
F17_000045 EQU $ ; IN [WRITE_M_SD.INC] UNTIL BYTE_VAR = 0
        MOVF BYTE_VAR,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL302
BC@LL303
F17_000046 EQU $ ; IN [WRITE_M_SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F17_000047 EQU $ ; IN [WRITE_M_SD.INC] RETURN
        RETURN 0
F17_EOF EQU $ ; WRITE_M_SD.INC
F18_SOF EQU $ ; WRITE_USERS_SD.INC
WRITE_USERS_SD
F18_000016 EQU $ ; IN [WRITE_USERS_SD.INC] GOSUB READ_MOD
        F@CALL READ_MOD
F18_000017 EQU $ ; IN [WRITE_USERS_SD.INC] SD_FILE_NAME = STR MODNUM
        LFSR 0,SD_FILE_NAME
        LFSR 1,MODNUM
        MOVLW 7
        MOVWF PRODL,0
        MOVF POSTINC1,W,0
        BZ $ + 8
        MOVWF POSTINC0,0
        DECFSZ PRODL,F,0
        BRA $ - 8
        CLRF INDF0,0
F18_000018 EQU $ ; IN [WRITE_USERS_SD.INC] SD_FILE_NAME = SD_FILE_NAME + "R"
        LFSR 0,SD_FILE_NAME
        MOVF POSTINC0,W,0
        BNZ $ - 2
        MOVF POSTDEC0,F,0
        MOVLW 82
        MOVWF POSTINC0,0
        CLRF INDF0,0
F18_000019 EQU $ ; IN [WRITE_USERS_SD.INC] SD_FILE_EXT = "TXT"
        LFSR 0,SD_FILE_EXT
        MOVLW 84
        MOVWF POSTINC0
        MOVLW 88
        MOVWF POSTINC0,0
        MOVLW 84
        MOVWF POSTINC0,0
        CLRF INDF0,0
F18_000022 EQU $ ; IN [WRITE_USERS_SD.INC] SD_DELETE_FILE
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
        SD_DELETE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_DELETE_FILE_RETURN=0,PRM_COUNT=0
F18_000025 EQU $ ; IN [WRITE_USERS_SD.INC] SD_NEW_FILE
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
        SD_NEW_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_NEW_FILE_RETURN=0,PRM_COUNT=0
F18_000027 EQU $ ; IN [WRITE_USERS_SD.INC] BYTE_VAR = EREAD NUM_USERS
        MOVLW 1
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF BYTE_VAR
F18_000028 EQU $ ; IN [WRITE_USERS_SD.INC] IF BYTE_VAR = 0 THEN
        MOVF BYTE_VAR,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL307
F18_000032 EQU $ ; IN [WRITE_USERS_SD.INC] SD_IO_STRING = "NO USERS HAVE BEEN ASSIGNED TO THIS MODULE!"
        LFSR 0,SD_IO_STRING
        MOVLW HIGH (STR@LB19)
        MOVWF TBLPTRLH
        MOVLW LOW (STR@LB19)
        MOVWF TBLPTRL,0
        F@CALL LOAD@MSTR
        CLRF INDF0,0
F18_000033 EQU $ ; IN [WRITE_USERS_SD.INC] SD_WRITE_STRING_TO_FILE
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
        SD_WRITE_STRING_TO_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_WRITE_STRING_TO_FILE_RETURN=0,PRM_COUNT=0
F18_000034 EQU $ ; IN [WRITE_USERS_SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F18_000035 EQU $ ; IN [WRITE_USERS_SD.INC] RETURN
        RETURN 0
F18_000036 EQU $ ; IN [WRITE_USERS_SD.INC] ENDIF
BC@LL307
F18_000039 EQU $ ; IN [WRITE_USERS_SD.INC] MYCOUNT = 0
        MOVLB 3
RAM_BANK = 3
        CLRF MYCOUNT
F18_000040 EQU $ ; IN [WRITE_USERS_SD.INC] WORD_VAR = BUA
        MOVLW 128
        MOVWF WORD_VAR
        MOVLW 156
        MOVWF WORD_VARH
F18_000041 EQU $ ; IN [WRITE_USERS_SD.INC] REPEAT
BC@LL308
        MOVLB 0
RAM_BANK = 0
F18_000042 EQU $ ; IN [WRITE_USERS_SD.INC] FOR INDEX = 0 TO 9
        MOVLB 3
RAM_BANK = 3
        CLRF INDEX
FR@LB311
        MOVLB 0
RAM_BANK = 0
        MOVLW 10
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB312
F18_000043 EQU $ ; IN [WRITE_USERS_SD.INC] RESPONSE = CREAD WORD_VAR + (BYTE_VAR -1) * 10   + INDEX
        MOVFF WORD_VAR,PP7
        MOVFF WORD_VARH,PP7H
        MOVFF BYTE_VAR,PP8
        CLRF PP8H,0
        DECF PP8,F,0
        MOVLW 0
        SUBWFB PP8H,F,0
        MOVF PP8H,W,0
        MULLW 10
        MOVFF PRODL,PP8H
        MOVF PP8,W,0
        MULLW 10
        MOVFF PRODL,PP8
        MOVF PRODH,W,0
        ADDWF PP8H,F,0
        MOVF PP8,W,0
        ADDWF PP7,F,0
        MOVF PP8H,W,0
        ADDWFC PP7H,F,0
        MOVLB 3
RAM_BANK = 3
        MOVF INDEX,W
        ADDWF PP7,W,0
        MOVWF TBLPTRL,0
        MOVLW 0
        ADDWFC PP7H,W,0
        MOVWF TBLPTRLH,0
        CLRF EECON1,0
        BSF EECON1,PP_EEPGD,0
        TBLRD*
        MOVFF TABLAT,RESPONSE
F18_000044 EQU $ ; IN [WRITE_USERS_SD.INC] SD_WRITE_BYTE_TO_FILE RESPONSE
        MOVLB 0
RAM_BANK = 0
VARIABLE PRM_1=2
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_WRITE_BYTE_TO_FILE_LST_PRM=1,LST_PRM_TYPE=2,LST_PRM_NAME=RESPONSE
VARIABLE MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
        SD_WRITE_BYTE_TO_FILE RESPONSE,0,0,0,0,0,0,0,0,0
F18_000045 EQU $ ; IN [WRITE_USERS_SD.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB311
NX@LB312
F18_000046 EQU $ ; IN [WRITE_USERS_SD.INC] SD_WRITE_BYTE_TO_FILE ":"
VARIABLE PRM_1=8
 VARIABLE PRM_2=0,PRM_3=0,PRM_4=0,PRM_5=0,PRM_6=0,PRM_7=0,PRM_8=0,PRM_9=0,PRM_10=0
VARIABLE SD_WRITE_BYTE_TO_FILE_LST_PRM=0
VARIABLE MAX_PARAMS=10,SD_WRITE_BYTE_TO_FILE_RETURN=0,PRM_COUNT=1
        SD_WRITE_BYTE_TO_FILE 58,0,0,0,0,0,0,0,0,0
F18_000048 EQU $ ; IN [WRITE_USERS_SD.INC] DEC BYTE_VAR
        MOVLB 3
RAM_BANK = 3
        DECF BYTE_VAR,F
F18_000050 EQU $ ; IN [WRITE_USERS_SD.INC] UNTIL BYTE_VAR = 0
        MOVF BYTE_VAR,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL308
BC@LL309
F18_000056 EQU $ ; IN [WRITE_USERS_SD.INC] SD_CLOSE_FILE
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
        SD_CLOSE_FILE 0,0,0,0,0,0,0,0,0,0
VARIABLE MAX_PARAMS=10,SD_CLOSE_FILE_RETURN=0,PRM_COUNT=0
F18_000057 EQU $ ; IN [WRITE_USERS_SD.INC] RETURN
        RETURN 0
F18_EOF EQU $ ; WRITE_USERS_SD.INC
F19_SOF EQU $ ; ERRORS.INC
TAG_INVALID
F19_000013 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000014 EQU $ ; IN [ERRORS.INC] PRINT "UNAUTHORIZED"
        MOVLW HIGH (STR@LB20)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB20)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000015 EQU $ ; IN [ERRORS.INC] FOR INDEX = 1 TO 5
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX
FR@LB313
        MOVLB 0
RAM_BANK = 0
        MOVLW 6
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB314
F19_000016 EQU $ ; IN [ERRORS.INC] HIGH RED
        BCF TRISA,0,0
        BSF LATA,0,0
F19_000017 EQU $ ; IN [ERRORS.INC] DELAYMS 200
        MOVLW 200
        F@CALL DL@MS
F19_000018 EQU $ ; IN [ERRORS.INC] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F19_000019 EQU $ ; IN [ERRORS.INC] HIGH GREEN
        BCF TRISA,1,0
        BSF LATA,1,0
F19_000020 EQU $ ; IN [ERRORS.INC] DELAYMS 200
        MOVLW 200
        F@CALL DL@MS
F19_000021 EQU $ ; IN [ERRORS.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB313
NX@LB314
F19_000022 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000023 EQU $ ; IN [ERRORS.INC] PRINT "SLEEPING NOW"
        MOVLW HIGH (STR@LB21)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB21)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000024 EQU $ ; IN [ERRORS.INC] GOTO SLEEPNOW
        F@JUMP SLEEPNOW
F19_000025 EQU $ ; IN [ERRORS.INC] RETURN
        RETURN 0
TAG_NOT_FOUND
F19_000028 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000029 EQU $ ; IN [ERRORS.INC] PRINT "NO TAG"
        MOVLW HIGH (STR@LB22)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB22)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000030 EQU $ ; IN [ERRORS.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F19_000031 EQU $ ; IN [ERRORS.INC] FOR INDEX = 1 TO 5
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX
FR@LB315
        MOVLB 0
RAM_BANK = 0
        MOVLW 6
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB316
F19_000032 EQU $ ; IN [ERRORS.INC] HIGH RED
        BCF TRISA,0,0
        BSF LATA,0,0
F19_000033 EQU $ ; IN [ERRORS.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F19_000034 EQU $ ; IN [ERRORS.INC] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F19_000035 EQU $ ; IN [ERRORS.INC] DELAYMS 500
        MOVLW 1
        MOVWF PP1H,0
        MOVLW 244
        F@CALL DLY@W
F19_000036 EQU $ ; IN [ERRORS.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB315
NX@LB316
F19_000037 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000038 EQU $ ; IN [ERRORS.INC] PRINT "SLEEPING NOW"
        MOVLW HIGH (STR@LB23)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB23)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000039 EQU $ ; IN [ERRORS.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F19_000040 EQU $ ; IN [ERRORS.INC] GOTO SLEEPNOW
        F@JUMP SLEEPNOW
F19_000041 EQU $ ; IN [ERRORS.INC] RETURN
        RETURN 0
BAD_CARD
F19_000044 EQU $ ; IN [ERRORS.INC] GOSUB HIGH_V
        F@CALL HIGH_V
F19_000045 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000046 EQU $ ; IN [ERRORS.INC] PRINT "BAD CARD"
        MOVLW HIGH (STR@LB24)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB24)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000047 EQU $ ; IN [ERRORS.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F19_000048 EQU $ ; IN [ERRORS.INC] REPEAT
BC@LL316
F19_000049 EQU $ ; IN [ERRORS.INC] FOR INDEX = 1 TO 5
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX
FR@LB319
        MOVLB 0
RAM_BANK = 0
        MOVLW 6
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB320
F19_000050 EQU $ ; IN [ERRORS.INC] HIGH RED
        BCF TRISA,0,0
        BSF LATA,0,0
F19_000051 EQU $ ; IN [ERRORS.INC] DELAYMS 200
        MOVLW 200
        F@CALL DL@MS
F19_000052 EQU $ ; IN [ERRORS.INC] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F19_000053 EQU $ ; IN [ERRORS.INC] DELAYMS 200
        MOVLW 200
        F@CALL DL@MS
F19_000054 EQU $ ; IN [ERRORS.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB319
NX@LB320
F19_000055 EQU $ ; IN [ERRORS.INC] DELAYMS 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F19_000056 EQU $ ; IN [ERRORS.INC] UNTIL SD_DETECT = 1
        BTFSS PORTC,1,0
        GO@TO BC@LL316
BC@LL317
F19_000057 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000058 EQU $ ; IN [ERRORS.INC] PRINT "SLEEPING NOW"
        MOVLW HIGH (STR@LB25)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB25)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000059 EQU $ ; IN [ERRORS.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F19_000060 EQU $ ; IN [ERRORS.INC] GOTO SLEEPNOW
        F@JUMP SLEEPNOW
BAD_FILE
F19_000063 EQU $ ; IN [ERRORS.INC] GOSUB HIGH_V
        F@CALL HIGH_V
F19_000064 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000065 EQU $ ; IN [ERRORS.INC] PRINT "BAD FILE"
        MOVLW HIGH (STR@LB26)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB26)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000066 EQU $ ; IN [ERRORS.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F19_000067 EQU $ ; IN [ERRORS.INC] REPEAT
BC@LL320
F19_000068 EQU $ ; IN [ERRORS.INC] FOR INDEX = 1 TO 5
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF INDEX
FR@LB323
        MOVLB 0
RAM_BANK = 0
        MOVLW 6
        MOVLB 3
RAM_BANK = 3
        SUBWF INDEX,W
        MOVLB 0
RAM_BANK = 0
        BTFSC STATUS,0,0
        GO@TO NX@LB324
F19_000069 EQU $ ; IN [ERRORS.INC] HIGH RED
        BCF TRISA,0,0
        BSF LATA,0,0
F19_000070 EQU $ ; IN [ERRORS.INC] DELAYMS 200
        MOVLW 200
        F@CALL DL@MS
F19_000071 EQU $ ; IN [ERRORS.INC] LOW RED
        BCF TRISA,0,0
        BCF LATA,0,0
F19_000072 EQU $ ; IN [ERRORS.INC] DELAYMS 200
        MOVLW 200
        F@CALL DL@MS
F19_000073 EQU $ ; IN [ERRORS.INC] NEXT INDEX
        MOVLB 3
RAM_BANK = 3
        INCF INDEX,F
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO FR@LB323
NX@LB324
F19_000074 EQU $ ; IN [ERRORS.INC] DELAYMS 2000
        MOVLW 7
        MOVWF PP1H,0
        MOVLW 208
        F@CALL DLY@W
F19_000075 EQU $ ; IN [ERRORS.INC] UNTIL SD_DETECT = 1
        BTFSS PORTC,1,0
        GO@TO BC@LL320
BC@LL321
F19_000076 EQU $ ; IN [ERRORS.INC] CLS
        F@CALL LCD@CLS
F19_000077 EQU $ ; IN [ERRORS.INC] PRINT "SLEEPING NOW"
        MOVLW HIGH (STR@LB27)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB27)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F19_000078 EQU $ ; IN [ERRORS.INC] DELAYMS 1000
        MOVLW 3
        MOVWF PP1H,0
        MOVLW 232
        F@CALL DLY@W
F19_000079 EQU $ ; IN [ERRORS.INC] GOTO SLEEPNOW
        F@JUMP SLEEPNOW
F19_EOF EQU $ ; ERRORS.INC
F20_SOF EQU $ ; RESET_LOGGER.INC
RESET_DIAGNOSTIC_LOGGER
F20_000012 EQU $ ; IN [RESET_LOGGER.INC] BBOOT_CNT = EREAD EBOOT_CNT_LOCATION
        MOVLW 16
        F@CALL EE@RD
        MOVLB 3
RAM_BANK = 3
        MOVWF BBOOT_CNT
F20_000013 EQU $ ; IN [RESET_LOGGER.INC] IF BBOOT_CNT = 255 THEN
        INCF BBOOT_CNT,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,2,0
        GO@TO BC@LL325
RESET_COUNT
F20_000014 EQU $ ; IN [RESET_LOGGER.INC] RESET_COUNT:       BBOOT_CNT = 1
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF BBOOT_CNT
F20_000015 EQU $ ; IN [RESET_LOGGER.INC] EWRITE EBOOT_CNT_LOCATION,[BBOOT_CNT]
        MOVLW 16
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVF BBOOT_CNT,W
        F@CALL EE@WR@W
F20_000016 EQU $ ; IN [RESET_LOGGER.INC] GOTO WRITE_PCON_DATA
        MOVLB 0
RAM_BANK = 0
        F@JUMP WRITE_PCON_DATA
F20_000017 EQU $ ; IN [RESET_LOGGER.INC] ENDIF
BC@LL325
F20_000018 EQU $ ; IN [RESET_LOGGER.INC] IF BBOOT_CNT > 10 THEN GOTO RESET_COUNT
        MOVLW 11
        MOVLB 3
RAM_BANK = 3
        SUBWF BBOOT_CNT,W
        MOVLB 0
RAM_BANK = 0
        BTFSS STATUS,0,0
        GO@TO BC@LL327
        F@JUMP RESET_COUNT
BC@LL327
F20_000019 EQU $ ; IN [RESET_LOGGER.INC] INC BBOOT_CNT
        MOVLB 3
RAM_BANK = 3
        INCF BBOOT_CNT,F
F20_000020 EQU $ ; IN [RESET_LOGGER.INC] EWRITE EBOOT_CNT_LOCATION,[BBOOT_CNT]
        MOVLW 16
        MOVWF EEADR,0
        CLRF EEADRH,0
        MOVF BBOOT_CNT,W
        F@CALL EE@WR@W
WRITE_PCON_DATA
        MOVLB 0
RAM_BANK = 0
F20_000024 EQU $ ; IN [RESET_LOGGER.INC] SELECT RCON
F20_000025 EQU $ ; IN [RESET_LOGGER.INC] CASE 12,13
        MOVLW 12
        SUBWF RCON,W,0
        BTFSC STATUS,2,0
        GO@TO BC@LL330
        MOVLW 13
        SUBWF RCON,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL329
BC@LL330
F20_000026 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = 1
        MOVLW 1
        MOVLB 3
RAM_BANK = 3
        MOVWF BRESET_TYPE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL328
BC@LL329
F20_000027 EQU $ ; IN [RESET_LOGGER.INC] CASE 7
        MOVLW 7
        SUBWF RCON,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL332
F20_000028 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = 2
        MOVLW 2
        MOVLB 3
RAM_BANK = 3
        MOVWF BRESET_TYPE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL328
BC@LL332
F20_000029 EQU $ ; IN [RESET_LOGGER.INC] CASE 15
        MOVLW 15
        SUBWF RCON,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL334
F20_000030 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = 3
        MOVLW 3
        MOVLB 3
RAM_BANK = 3
        MOVWF BRESET_TYPE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL328
BC@LL334
F20_000031 EQU $ ; IN [RESET_LOGGER.INC] CASE 14
        MOVLW 14
        SUBWF RCON,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL336
F20_000032 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = 4
        MOVLW 4
        MOVLB 3
RAM_BANK = 3
        MOVWF BRESET_TYPE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL328
BC@LL336
F20_000033 EQU $ ; IN [RESET_LOGGER.INC] CASE 11
        MOVLW 11
        SUBWF RCON,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL338
F20_000034 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = 5
        MOVLW 5
        MOVLB 3
RAM_BANK = 3
        MOVWF BRESET_TYPE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL328
BC@LL338
F20_000035 EQU $ ; IN [RESET_LOGGER.INC] CASE 143
        MOVLW 143
        SUBWF RCON,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL340
F20_000036 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = 6
        MOVLW 6
        MOVLB 3
RAM_BANK = 3
        MOVWF BRESET_TYPE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL328
BC@LL340
F20_000037 EQU $ ; IN [RESET_LOGGER.INC] CASE 79
        MOVLW 79
        SUBWF RCON,W,0
        BTFSS STATUS,2,0
        GO@TO BC@LL342
F20_000038 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = 7
        MOVLW 7
        MOVLB 3
RAM_BANK = 3
        MOVWF BRESET_TYPE
F20_000039 EQU $ ; IN [RESET_LOGGER.INC] CASE ELSE
        MOVLB 0
RAM_BANK = 0
        F@JUMP BC@LL344
BC@LL342
F20_000040 EQU $ ; IN [RESET_LOGGER.INC] BRESET_TYPE = RCON
        MOVFF RCON,BRESET_TYPE
F20_000041 EQU $ ; IN [RESET_LOGGER.INC] END SELECT
BC@LL344
BC@LL328
F20_000043 EQU $ ; IN [RESET_LOGGER.INC] EWRITE EBOOT_CNT_LOCATION + BBOOT_CNT,[BRESET_TYPE]
        MOVLW 16
        MOVLB 3
RAM_BANK = 3
        ADDWF BBOOT_CNT,W
        MOVWF EEADR,0
        CLRF EEADRH,0
        RLCF EEADRH,F,0
        MOVF BRESET_TYPE,W
        F@CALL EE@WR@W
F20_000044 EQU $ ; IN [RESET_LOGGER.INC] CLS
        F@CALL LCD@CLS
F20_000045 EQU $ ; IN [RESET_LOGGER.INC] PRINT AT 1,1, "RESET CODE = "
        MOVLW 128
        MOVWF BPFH,0
        F@CALL LCD@CRS
        MOVLW HIGH (STR@LB28)
        MOVWF TBLPTRLH,0
        MOVLW LOW (STR@LB28)
        MOVWF TBLPTRL,0
        F@CALL PRINT@MSTR
F20_000046 EQU $ ; IN [RESET_LOGGER.INC] PRINT AT 2,1, HEX BRESET_TYPE
        MOVLW 128
        MOVWF BPFH,0
        MOVLW 192
        F@CALL LCD@CRS
        MOVF BRESET_TYPE,W
        F@CALL OUT@HEXB
F20_000047 EQU $ ; IN [RESET_LOGGER.INC] PAUSE 10000
        MOVLW 39
        MOVWF PP1H,0
        MOVLW 16
        F@CALL DLY@W
OVER_BOOT_LOGGER
        MOVLB 0
RAM_BANK = 0
F20_000049 EQU $ ; IN [RESET_LOGGER.INC] RCON = 001111
        MOVLW 1111
        MOVWF RCON,0
F20_000086 EQU $ ; IN [RESET_LOGGER.INC] RETURN
        RETURN 0
F20_EOF EQU $ ; RESET_LOGGER.INC
        ORG 40000
        DB 65,50,55,66,56,51
        DB 66,0
F1_EOF EQU $ ; RFID V28.4.BAS
__EOF
CONFIG OSC = XT
CONFIG PWRT = ON
CONFIG BOREN = OFF
CONFIG MCLRE = ON
CONFIG PBADEN = OFF
CONFIG STVREN = OFF
CONFIG WDT = OFF
CONFIG LVP = ON
CONFIG XINST = OFF
CONFIG CP0 = OFF
CONFIG CP1 = OFF
CONFIG CPB = OFF
CONFIG CPD = OFF
CONFIG WRT0 = OFF
CONFIG WRT1 = OFF
CONFIG WRTB = OFF
CONFIG WRTC = OFF
CONFIG WRTD = OFF
CONFIG EBTR0 = OFF
CONFIG EBTR1 = OFF
CONFIG EBTRB = OFF
        END
